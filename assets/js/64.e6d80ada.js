(window.webpackJsonp=window.webpackJsonp||[]).push([[64],{534:function(s,n,a){"use strict";a.r(n);var e=a(18),t=Object(e.a)({},(function(){var s=this,n=s.$createElement,a=s._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"函数的扩展"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数的扩展"}},[s._v("#")]),s._v(" 函数的扩展")]),s._v(" "),a("ol",[a("li",[a("a",{attrs:{href:"https://es6.ruanyifeng.com/#docs/function#%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E7%9A%84%E9%BB%98%E8%AE%A4%E5%80%BC",target:"_blank",rel:"noopener noreferrer"}},[s._v("函数参数的默认值"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"https://es6.ruanyifeng.com/#docs/function#rest%20%E5%8F%82%E6%95%B0",target:"_blank",rel:"noopener noreferrer"}},[s._v("rest 参数"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"https://es6.ruanyifeng.com/#docs/function#%E4%B8%A5%E6%A0%BC%E6%A8%A1%E5%BC%8F",target:"_blank",rel:"noopener noreferrer"}},[s._v("严格模式"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"https://es6.ruanyifeng.com/#docs/function#name%20%E5%B1%9E%E6%80%A7",target:"_blank",rel:"noopener noreferrer"}},[s._v("name 属性"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"https://es6.ruanyifeng.com/#docs/function#%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0",target:"_blank",rel:"noopener noreferrer"}},[s._v("箭头函数"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"https://es6.ruanyifeng.com/#docs/function#%E5%B0%BE%E8%B0%83%E7%94%A8%E4%BC%98%E5%8C%96",target:"_blank",rel:"noopener noreferrer"}},[s._v("尾调用优化"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"https://es6.ruanyifeng.com/#docs/function#%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E7%9A%84%E5%B0%BE%E9%80%97%E5%8F%B7",target:"_blank",rel:"noopener noreferrer"}},[s._v("函数参数的尾逗号"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"https://es6.ruanyifeng.com/#docs/function#Function.prototype.toString()",target:"_blank",rel:"noopener noreferrer"}},[s._v("Function.prototype.toString()"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"https://es6.ruanyifeng.com/#docs/function#catch%20%E5%91%BD%E4%BB%A4%E7%9A%84%E5%8F%82%E6%95%B0%E7%9C%81%E7%95%A5",target:"_blank",rel:"noopener noreferrer"}},[s._v("catch 命令的参数省略"),a("OutboundLink")],1)])]),s._v(" "),a("h2",{attrs:{id:"函数参数的默认值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数参数的默认值"}},[s._v("#")]),s._v(" 函数参数的默认值")]),s._v(" "),a("h3",{attrs:{id:"基本用法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基本用法"}},[s._v("#")]),s._v(" 基本用法")]),s._v(" "),a("p",[s._v("ES6 之前，不能直接为函数的参数指定默认值，只能采用变通的方法。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function log(x, y) {\n  y = y || 'World';\n  console.log(x, y);\n}\n\nlog('Hello') // Hello World\nlog('Hello', 'China') // Hello China\nlog('Hello', '') // Hello World\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[s._v("上面代码检查函数"),a("code",[s._v("log()")]),s._v("的参数"),a("code",[s._v("y")]),s._v("有没有赋值，如果没有，则指定默认值为"),a("code",[s._v("World")]),s._v("。这种写法的缺点在于，如果参数"),a("code",[s._v("y")]),s._v("赋值了，但是对应的布尔值为"),a("code",[s._v("false")]),s._v("，则该赋值不起作用。就像上面代码的最后一行，参数"),a("code",[s._v("y")]),s._v("等于空字符，结果被改为默认值。")]),s._v(" "),a("p",[s._v("为了避免这个问题，通常需要先判断一下参数"),a("code",[s._v("y")]),s._v("是否被赋值，如果没有，再等于默认值。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("if (typeof y === 'undefined') {\n  y = 'World';\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("ES6 允许为函数的参数设置默认值，即直接写在参数定义的后面。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function log(x, y = 'World') {\n  console.log(x, y);\n}\n\nlog('Hello') // Hello World\nlog('Hello', 'China') // Hello China\nlog('Hello', '') // Hello\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("可以看到，ES6 的写法比 ES5 简洁许多，而且非常自然。下面是另一个例子。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function Point(x = 0, y = 0) {\n  this.x = x;\n  this.y = y;\n}\n\nconst p = new Point();\np // { x: 0, y: 0 }\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("除了简洁，ES6 的写法还有两个好处：首先，阅读代码的人，可以立刻意识到哪些参数是可以省略的，不用查看函数体或文档；其次，有利于将来的代码优化，即使未来的版本在对外接口中，彻底拿掉这个参数，也不会导致以前的代码无法运行。")]),s._v(" "),a("p",[s._v("参数变量是默认声明的，所以不能用"),a("code",[s._v("let")]),s._v("或"),a("code",[s._v("const")]),s._v("再次声明。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function foo(x = 5) {\n  let x = 1; // error\n  const x = 2; // error\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("上面代码中，参数变量"),a("code",[s._v("x")]),s._v("是默认声明的，在函数体中，不能用"),a("code",[s._v("let")]),s._v("或"),a("code",[s._v("const")]),s._v("再次声明，否则会报错。")]),s._v(" "),a("p",[s._v("使用参数默认值时，函数不能有同名参数。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// 不报错\nfunction foo(x, x, y) {\n  // ...\n}\n\n// 报错\nfunction foo(x, x, y = 1) {\n  // ...\n}\n// SyntaxError: Duplicate parameter name not allowed in this context\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("p",[s._v("另外，一个容易忽略的地方是，参数默认值不是传值的，而是每次都重新计算默认值表达式的值。也就是说，参数默认值是惰性求值的。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("let x = 99;\nfunction foo(p = x + 1) {\n  console.log(p);\n}\n\nfoo() // 100\n\nx = 100;\nfoo() // 101\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[s._v("上面代码中，参数"),a("code",[s._v("p")]),s._v("的默认值是"),a("code",[s._v("x + 1")]),s._v("。这时，每次调用函数"),a("code",[s._v("foo()")]),s._v("，都会重新计算"),a("code",[s._v("x + 1")]),s._v("，而不是默认"),a("code",[s._v("p")]),s._v("等于 100。")]),s._v(" "),a("h3",{attrs:{id:"与解构赋值默认值结合使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#与解构赋值默认值结合使用"}},[s._v("#")]),s._v(" 与解构赋值默认值结合使用")]),s._v(" "),a("p",[s._v("参数默认值可以与解构赋值的默认值，结合起来使用。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function foo({x, y = 5}) {\n  console.log(x, y);\n}\n\nfoo({}) // undefined 5\nfoo({x: 1}) // 1 5\nfoo({x: 1, y: 2}) // 1 2\nfoo() // TypeError: Cannot read property 'x' of undefined\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[s._v("上面代码只使用了对象的解构赋值默认值，没有使用函数参数的默认值。只有当函数"),a("code",[s._v("foo()")]),s._v("的参数是一个对象时，变量"),a("code",[s._v("x")]),s._v("和"),a("code",[s._v("y")]),s._v("才会通过解构赋值生成。如果函数"),a("code",[s._v("foo()")]),s._v("调用时没提供参数，变量"),a("code",[s._v("x")]),s._v("和"),a("code",[s._v("y")]),s._v("就不会生成，从而报错。通过提供函数参数的默认值，就可以避免这种情况。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function foo({x, y = 5} = {}) {\n  console.log(x, y);\n}\n\nfoo() // undefined 5\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("上面代码指定，如果没有提供参数，函数"),a("code",[s._v("foo")]),s._v("的参数默认为一个空对象。")]),s._v(" "),a("p",[s._v("下面是另一个解构赋值默认值的例子。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function fetch(url, { body = '', method = 'GET', headers = {} }) {\n  console.log(method);\n}\n\nfetch('http://example.com', {})\n// \"GET\"\n\nfetch('http://example.com')\n// 报错\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[s._v("上面代码中，如果函数"),a("code",[s._v("fetch()")]),s._v("的第二个参数是一个对象，就可以为它的三个属性设置默认值。这种写法不能省略第二个参数，如果结合函数参数的默认值，就可以省略第二个参数。这时，就出现了双重默认值。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function fetch(url, { body = '', method = 'GET', headers = {} } = {}) {\n  console.log(method);\n}\n\nfetch('http://example.com')\n// \"GET\"\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("上面代码中，函数"),a("code",[s._v("fetch")]),s._v("没有第二个参数时，函数参数的默认值就会生效，然后才是解构赋值的默认值生效，变量"),a("code",[s._v("method")]),s._v("才会取到默认值"),a("code",[s._v("GET")]),s._v("。")]),s._v(" "),a("p",[s._v("注意，函数参数的默认值生效以后，参数解构赋值依然会进行。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function f({ a, b = 'world' } = { a: 'hello' }) {\n  console.log(b);\n}\n\nf() // world\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("上面示例中，函数"),a("code",[s._v("f()")]),s._v("调用时没有参数，所以参数默认值"),a("code",[s._v("{ a: 'hello' }")]),s._v("生效，然后再对这个默认值进行解构赋值，从而触发参数变量"),a("code",[s._v("b")]),s._v("的默认值生效。")]),s._v(" "),a("p",[s._v("作为练习，大家可以思考一下，下面两种函数写法有什么差别？")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// 写法一\nfunction m1({x = 0, y = 0} = {}) {\n  return [x, y];\n}\n\n// 写法二\nfunction m2({x, y} = { x: 0, y: 0 }) {\n  return [x, y];\n}\n\n// 函数没有参数的情况\nm1() // [0, 0]\nm2() // [0, 0]\n\n// x 和 y 都有值的情况\nm1({x: 3, y: 8}) // [3, 8]\nm2({x: 3, y: 8}) // [3, 8]\n\n// x 有值，y 无值的情况\nm1({x: 3}) // [3, 0]\nm2({x: 3}) // [3, undefined]\n\n// x 和 y 都无值的情况\nm1({}) // [0, 0];\nm2({}) // [undefined, undefined]\n\nm1({z: 3}) // [0, 0]\nm2({z: 3}) // [undefined, undefined]\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br")])]),a("h3",{attrs:{id:"参数默认值的位置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参数默认值的位置"}},[s._v("#")]),s._v(" 参数默认值的位置")]),s._v(" "),a("p",[s._v("通常情况下，定义了默认值的参数，应该是函数的尾参数。因为这样比较容易看出来，到底省略了哪些参数。如果非尾部的参数设置默认值，实际上这个参数是没法省略的。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// 例一\nfunction f(x = 1, y) {\n  return [x, y];\n}\n\nf() // [1, undefined]\nf(2) // [2, undefined]\nf(, 1) // 报错\nf(undefined, 1) // [1, 1]\n\n// 例二\nfunction f(x, y = 5, z) {\n  return [x, y, z];\n}\n\nf() // [undefined, 5, undefined]\nf(1) // [1, 5, undefined]\nf(1, ,2) // 报错\nf(1, undefined, 2) // [1, 5, 2]\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br")])]),a("p",[s._v("上面代码中，有默认值的参数都不是尾参数。这时，无法只省略该参数，而不省略它后面的参数，除非显式输入"),a("code",[s._v("undefined")]),s._v("。")]),s._v(" "),a("p",[s._v("如果传入"),a("code",[s._v("undefined")]),s._v("，将触发该参数等于默认值，"),a("code",[s._v("null")]),s._v("则没有这个效果。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function foo(x = 5, y = 6) {\n  console.log(x, y);\n}\n\nfoo(undefined, null)\n// 5 null\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("上面代码中，"),a("code",[s._v("x")]),s._v("参数对应"),a("code",[s._v("undefined")]),s._v("，结果触发了默认值，"),a("code",[s._v("y")]),s._v("参数等于"),a("code",[s._v("null")]),s._v("，就没有触发默认值。")]),s._v(" "),a("h3",{attrs:{id:"函数的-length-属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数的-length-属性"}},[s._v("#")]),s._v(" 函数的 length 属性")]),s._v(" "),a("p",[s._v("指定了默认值以后，函数的"),a("code",[s._v("length")]),s._v("属性，将返回没有指定默认值的参数个数。也就是说，指定了默认值后，"),a("code",[s._v("length")]),s._v("属性将失真。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("(function (a) {}).length // 1\n(function (a = 5) {}).length // 0\n(function (a, b, c = 5) {}).length // 2\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("上面代码中，"),a("code",[s._v("length")]),s._v("属性的返回值，等于函数的参数个数减去指定了默认值的参数个数。比如，上面最后一个函数，定义了 3 个参数，其中有一个参数"),a("code",[s._v("c")]),s._v("指定了默认值，因此"),a("code",[s._v("length")]),s._v("属性等于"),a("code",[s._v("3")]),s._v("减去"),a("code",[s._v("1")]),s._v("，最后得到"),a("code",[s._v("2")]),s._v("。")]),s._v(" "),a("p",[s._v("这是因为"),a("code",[s._v("length")]),s._v("属性的含义是，该函数预期传入的参数个数。某个参数指定默认值以后，预期传入的参数个数就不包括这个参数了。同理，后文的 rest 参数也不会计入"),a("code",[s._v("length")]),s._v("属性。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("(function(...args) {}).length // 0\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("如果设置了默认值的参数不是尾参数，那么"),a("code",[s._v("length")]),s._v("属性也不再计入后面的参数了。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("(function (a = 0, b, c) {}).length // 0\n(function (a, b = 1, c) {}).length // 1\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("h3",{attrs:{id:"作用域"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#作用域"}},[s._v("#")]),s._v(" 作用域")]),s._v(" "),a("p",[s._v("一旦设置了参数的默认值，函数进行声明初始化时，参数会形成一个单独的作用域（context）。等到初始化结束，这个作用域就会消失。这种语法行为，在不设置参数默认值时，是不会出现的。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("var x = 1;\n\nfunction f(x, y = x) {\n  console.log(y);\n}\n\nf(2) // 2\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("上面代码中，参数"),a("code",[s._v("y")]),s._v("的默认值等于变量"),a("code",[s._v("x")]),s._v("。调用函数"),a("code",[s._v("f")]),s._v("时，参数形成一个单独的作用域。在这个作用域里面，默认值变量"),a("code",[s._v("x")]),s._v("指向第一个参数"),a("code",[s._v("x")]),s._v("，而不是全局变量"),a("code",[s._v("x")]),s._v("，所以输出是"),a("code",[s._v("2")]),s._v("。")]),s._v(" "),a("p",[s._v("再看下面的例子。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("let x = 1;\n\nfunction f(y = x) {\n  let x = 2;\n  console.log(y);\n}\n\nf() // 1\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[s._v("上面代码中，函数"),a("code",[s._v("f")]),s._v("调用时，参数"),a("code",[s._v("y = x")]),s._v("形成一个单独的作用域。这个作用域里面，变量"),a("code",[s._v("x")]),s._v("本身没有定义，所以指向外层的全局变量"),a("code",[s._v("x")]),s._v("。函数调用时，函数体内部的局部变量"),a("code",[s._v("x")]),s._v("影响不到默认值变量"),a("code",[s._v("x")]),s._v("。")]),s._v(" "),a("p",[s._v("如果此时，全局变量"),a("code",[s._v("x")]),s._v("不存在，就会报错。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function f(y = x) {\n  let x = 2;\n  console.log(y);\n}\n\nf() // ReferenceError: x is not defined\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("下面这样写，也会报错。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("var x = 1;\n\nfunction foo(x = x) {\n  // ...\n}\n\nfoo() // ReferenceError: Cannot access 'x' before initialization\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("上面代码中，参数"),a("code",[s._v("x = x")]),s._v("形成一个单独作用域。实际执行的是"),a("code",[s._v("let x = x")]),s._v("，由于暂时性死区的原因，这行代码会报错。")]),s._v(" "),a("p",[s._v("如果参数的默认值是一个函数，该函数的作用域也遵守这个规则。请看下面的例子。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("let foo = 'outer';\n\nfunction bar(func = () => foo) {\n  let foo = 'inner';\n  console.log(func());\n}\n\nbar(); // outer\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[s._v("上面代码中，函数"),a("code",[s._v("bar")]),s._v("的参数"),a("code",[s._v("func")]),s._v("的默认值是一个匿名函数，返回值为变量"),a("code",[s._v("foo")]),s._v("。函数参数形成的单独作用域里面，并没有定义变量"),a("code",[s._v("foo")]),s._v("，所以"),a("code",[s._v("foo")]),s._v("指向外层的全局变量"),a("code",[s._v("foo")]),s._v("，因此输出"),a("code",[s._v("outer")]),s._v("。")]),s._v(" "),a("p",[s._v("如果写成下面这样，就会报错。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function bar(func = () => foo) {\n  let foo = 'inner';\n  console.log(func());\n}\n\nbar() // ReferenceError: foo is not defined\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("上面代码中，匿名函数里面的"),a("code",[s._v("foo")]),s._v("指向函数外层，但是函数外层并没有声明变量"),a("code",[s._v("foo")]),s._v("，所以就报错了。")]),s._v(" "),a("p",[s._v("下面是一个更复杂的例子。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("var x = 1;\nfunction foo(x, y = function() { x = 2; }) {\n  var x = 3;\n  y();\n  console.log(x);\n}\n\nfoo() // 3\nx // 1\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[s._v("上面代码中，函数"),a("code",[s._v("foo")]),s._v("的参数形成一个单独作用域。这个作用域里面，首先声明了变量"),a("code",[s._v("x")]),s._v("，然后声明了变量"),a("code",[s._v("y")]),s._v("，"),a("code",[s._v("y")]),s._v("的默认值是一个匿名函数。这个匿名函数内部的变量"),a("code",[s._v("x")]),s._v("，指向同一个作用域的第一个参数"),a("code",[s._v("x")]),s._v("。函数"),a("code",[s._v("foo")]),s._v("内部又声明了一个内部变量"),a("code",[s._v("x")]),s._v("，该变量与第一个参数"),a("code",[s._v("x")]),s._v("由于不是同一个作用域，所以不是同一个变量，因此执行"),a("code",[s._v("y")]),s._v("后，内部变量"),a("code",[s._v("x")]),s._v("和外部全局变量"),a("code",[s._v("x")]),s._v("的值都没变。")]),s._v(" "),a("p",[s._v("如果将"),a("code",[s._v("var x = 3")]),s._v("的"),a("code",[s._v("var")]),s._v("去除，函数"),a("code",[s._v("foo")]),s._v("的内部变量"),a("code",[s._v("x")]),s._v("就指向第一个参数"),a("code",[s._v("x")]),s._v("，与匿名函数内部的"),a("code",[s._v("x")]),s._v("是一致的，所以最后输出的就是"),a("code",[s._v("2")]),s._v("，而外层的全局变量"),a("code",[s._v("x")]),s._v("依然不受影响。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("var x = 1;\nfunction foo(x, y = function() { x = 2; }) {\n  x = 3;\n  y();\n  console.log(x);\n}\n\nfoo() // 2\nx // 1\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("h3",{attrs:{id:"应用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#应用"}},[s._v("#")]),s._v(" 应用")]),s._v(" "),a("p",[s._v("利用参数默认值，可以指定某一个参数不得省略，如果省略就抛出一个错误。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function throwIfMissing() {\n  throw new Error('Missing parameter');\n}\n\nfunction foo(mustBeProvided = throwIfMissing()) {\n  return mustBeProvided;\n}\n\nfoo()\n// Error: Missing parameter\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("p",[s._v("上面代码的"),a("code",[s._v("foo")]),s._v("函数，如果调用的时候没有参数，就会调用默认值"),a("code",[s._v("throwIfMissing")]),s._v("函数，从而抛出一个错误。")]),s._v(" "),a("p",[s._v("从上面代码还可以看到，参数"),a("code",[s._v("mustBeProvided")]),s._v("的默认值等于"),a("code",[s._v("throwIfMissing")]),s._v("函数的运行结果（注意函数名"),a("code",[s._v("throwIfMissing")]),s._v("之后有一对圆括号），这表明参数的默认值不是在定义时执行，而是在运行时执行。如果参数已经赋值，默认值中的函数就不会运行。")]),s._v(" "),a("p",[s._v("另外，可以将参数默认值设为"),a("code",[s._v("undefined")]),s._v("，表明这个参数是可以省略的。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function foo(optional = undefined) { ··· }\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h2",{attrs:{id:"rest-参数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rest-参数"}},[s._v("#")]),s._v(" rest 参数")]),s._v(" "),a("p",[s._v("ES6 引入 rest 参数（形式为"),a("code",[s._v("...变量名")]),s._v("），用于获取函数的多余参数，这样就不需要使用"),a("code",[s._v("arguments")]),s._v("对象了。rest 参数搭配的变量是一个数组，该变量将多余的参数放入数组中。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function add(...values) {\n  let sum = 0;\n\n  for (var val of values) {\n    sum += val;\n  }\n\n  return sum;\n}\n\nadd(2, 5, 3) // 10\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("p",[s._v("上面代码的"),a("code",[s._v("add")]),s._v("函数是一个求和函数，利用 rest 参数，可以向该函数传入任意数目的参数。")]),s._v(" "),a("p",[s._v("下面是一个 rest 参数代替"),a("code",[s._v("arguments")]),s._v("变量的例子。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// arguments变量的写法\nfunction sortNumbers() {\n  return Array.from(arguments).sort();\n}\n\n// rest参数的写法\nconst sortNumbers = (...numbers) => numbers.sort();\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("上面代码的两种写法，比较后可以发现，rest 参数的写法更自然也更简洁。")]),s._v(" "),a("p",[a("code",[s._v("arguments")]),s._v("对象不是数组，而是一个类似数组的对象。所以为了使用数组的方法，必须使用"),a("code",[s._v("Array.from")]),s._v("先将其转为数组。rest 参数就不存在这个问题，它就是一个真正的数组，数组特有的方法都可以使用。下面是一个利用 rest 参数改写数组"),a("code",[s._v("push")]),s._v("方法的例子。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function push(array, ...items) {\n  items.forEach(function(item) {\n    array.push(item);\n    console.log(item);\n  });\n}\n\nvar a = [];\npush(a, 1, 2, 3)\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[s._v("注意，rest 参数之后不能再有其他参数（即只能是最后一个参数），否则会报错。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// 报错\nfunction f(a, ...b, c) {\n  // ...\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("函数的"),a("code",[s._v("length")]),s._v("属性，不包括 rest 参数。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("(function(a) {}).length  // 1\n(function(...a) {}).length  // 0\n(function(a, ...b) {}).length  // 1\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("h2",{attrs:{id:"严格模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#严格模式"}},[s._v("#")]),s._v(" 严格模式")]),s._v(" "),a("p",[s._v("从 ES5 开始，函数内部可以设定为严格模式。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function doSomething(a, b) {\n  'use strict';\n  // code\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("ES2016 做了一点修改，规定只要函数参数使用了默认值、解构赋值、或者扩展运算符，那么函数内部就不能显式设定为严格模式，否则会报错。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// 报错\nfunction doSomething(a, b = a) {\n  'use strict';\n  // code\n}\n\n// 报错\nconst doSomething = function ({a, b}) {\n  'use strict';\n  // code\n};\n\n// 报错\nconst doSomething = (...a) => {\n  'use strict';\n  // code\n};\n\nconst obj = {\n  // 报错\n  doSomething({a, b}) {\n    'use strict';\n    // code\n  }\n};\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br")])]),a("p",[s._v("这样规定的原因是，函数内部的严格模式，同时适用于函数体和函数参数。但是，函数执行的时候，先执行函数参数，然后再执行函数体。这样就有一个不合理的地方，只有从函数体之中，才能知道参数是否应该以严格模式执行，但是参数却应该先于函数体执行。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// 报错\nfunction doSomething(value = 070) {\n  'use strict';\n  return value;\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("上面代码中，参数"),a("code",[s._v("value")]),s._v("的默认值是八进制数"),a("code",[s._v("070")]),s._v("，但是严格模式下不能用前缀"),a("code",[s._v("0")]),s._v("表示八进制，所以应该报错。但是实际上，JavaScript 引擎会先成功执行"),a("code",[s._v("value = 070")]),s._v("，然后进入函数体内部，发现需要用严格模式执行，这时才会报错。")]),s._v(" "),a("p",[s._v("虽然可以先解析函数体代码，再执行参数代码，但是这样无疑就增加了复杂性。因此，标准索性禁止了这种用法，只要参数使用了默认值、解构赋值、或者扩展运算符，就不能显式指定严格模式。")]),s._v(" "),a("p",[s._v("两种方法可以规避这种限制。第一种是设定全局性的严格模式，这是合法的。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("'use strict';\n\nfunction doSomething(a, b = a) {\n  // code\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("第二种是把函数包在一个无参数的立即执行函数里面。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("const doSomething = (function () {\n  'use strict';\n  return function(value = 42) {\n    return value;\n  };\n}());\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("h2",{attrs:{id:"name-属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#name-属性"}},[s._v("#")]),s._v(" name 属性")]),s._v(" "),a("p",[s._v("函数的"),a("code",[s._v("name")]),s._v("属性，返回该函数的函数名。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('function foo() {}\nfoo.name // "foo"\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("这个属性早就被浏览器广泛支持，但是直到 ES6，才将其写入了标准。")]),s._v(" "),a("p",[s._v("需要注意的是，ES6 对这个属性的行为做出了一些修改。如果将一个匿名函数赋值给一个变量，ES5 的"),a("code",[s._v("name")]),s._v("属性，会返回空字符串，而 ES6 的"),a("code",[s._v("name")]),s._v("属性会返回实际的函数名。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('var f = function () {};\n\n// ES5\nf.name // ""\n\n// ES6\nf.name // "f"\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("上面代码中，变量"),a("code",[s._v("f")]),s._v("等于一个匿名函数，ES5 和 ES6 的"),a("code",[s._v("name")]),s._v("属性返回的值不一样。")]),s._v(" "),a("p",[s._v("如果将一个具名函数赋值给一个变量，则 ES5 和 ES6 的"),a("code",[s._v("name")]),s._v("属性都返回这个具名函数原本的名字。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('const bar = function baz() {};\n\n// ES5\nbar.name // "baz"\n\n// ES6\nbar.name // "baz"\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[a("code",[s._v("Function")]),s._v("构造函数返回的函数实例，"),a("code",[s._v("name")]),s._v("属性的值为"),a("code",[s._v("anonymous")]),s._v("。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('(new Function).name // "anonymous"\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[a("code",[s._v("bind")]),s._v("返回的函数，"),a("code",[s._v("name")]),s._v("属性值会加上"),a("code",[s._v("bound")]),s._v("前缀。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('function foo() {};\nfoo.bind({}).name // "bound foo"\n\n(function(){}).bind({}).name // "bound "\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("h2",{attrs:{id:"箭头函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#箭头函数"}},[s._v("#")]),s._v(" 箭头函数")]),s._v(" "),a("h3",{attrs:{id:"基本用法-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基本用法-2"}},[s._v("#")]),s._v(" 基本用法")]),s._v(" "),a("p",[s._v("ES6 允许使用“箭头”（"),a("code",[s._v("=>")]),s._v("）定义函数。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("var f = v => v;\n\n// 等同于\nvar f = function (v) {\n  return v;\n};\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("如果箭头函数不需要参数或需要多个参数，就使用一个圆括号代表参数部分。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("var f = () => 5;\n// 等同于\nvar f = function () { return 5 };\n\nvar sum = (num1, num2) => num1 + num2;\n// 等同于\nvar sum = function(num1, num2) {\n  return num1 + num2;\n};\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[s._v("如果箭头函数的代码块部分多于一条语句，就要使用大括号将它们括起来，并且使用"),a("code",[s._v("return")]),s._v("语句返回。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("var sum = (num1, num2) => { return num1 + num2; }\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("由于大括号被解释为代码块，所以如果箭头函数直接返回一个对象，必须在对象外面加上括号，否则会报错。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('// 报错\nlet getTempItem = id => { id: id, name: "Temp" };\n\n// 不报错\nlet getTempItem = id => ({ id: id, name: "Temp" });\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("下面是一种特殊情况，虽然可以运行，但会得到错误的结果。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("let foo = () => { a: 1 };\nfoo() // undefined\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("上面代码中，原始意图是返回一个对象"),a("code",[s._v("{ a: 1 }")]),s._v("，但是由于引擎认为大括号是代码块，所以执行了一行语句"),a("code",[s._v("a: 1")]),s._v("。这时，"),a("code",[s._v("a")]),s._v("可以被解释为语句的标签，因此实际执行的语句是"),a("code",[s._v("1;")]),s._v("，然后函数就结束了，没有返回值。")]),s._v(" "),a("p",[s._v("如果箭头函数只有一行语句，且不需要返回值，可以采用下面的写法，就不用写大括号了。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("let fn = () => void doesNotReturn();\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("箭头函数可以与变量解构结合使用。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("const full = ({ first, last }) => first + ' ' + last;\n\n// 等同于\nfunction full(person) {\n  return person.first + ' ' + person.last;\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("箭头函数使得表达更加简洁。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("const isEven = n => n % 2 === 0;\nconst square = n => n * n;\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("上面代码只用了两行，就定义了两个简单的工具函数。如果不用箭头函数，可能就要占用多行，而且还不如现在这样写醒目。")]),s._v(" "),a("p",[s._v("箭头函数的一个用处是简化回调函数。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// 普通函数写法\n[1,2,3].map(function (x) {\n  return x * x;\n});\n\n// 箭头函数写法\n[1,2,3].map(x => x * x);\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("另一个例子是")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// 普通函数写法\nvar result = values.sort(function (a, b) {\n  return a - b;\n});\n\n// 箭头函数写法\nvar result = values.sort((a, b) => a - b);\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("下面是 rest 参数与箭头函数结合的例子。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("const numbers = (...nums) => nums;\n\nnumbers(1, 2, 3, 4, 5)\n// [1,2,3,4,5]\n\nconst headAndTail = (head, ...tail) => [head, tail];\n\nheadAndTail(1, 2, 3, 4, 5)\n// [1,[2,3,4,5]]\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("h3",{attrs:{id:"使用注意点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用注意点"}},[s._v("#")]),s._v(" 使用注意点")]),s._v(" "),a("p",[s._v("箭头函数有几个使用注意点。")]),s._v(" "),a("p",[s._v("（1）箭头函数没有自己的"),a("code",[s._v("this")]),s._v("对象（详见下文）。")]),s._v(" "),a("p",[s._v("（2）不可以当作构造函数，也就是说，不可以对箭头函数使用"),a("code",[s._v("new")]),s._v("命令，否则会抛出一个错误。")]),s._v(" "),a("p",[s._v("（3）不可以使用"),a("code",[s._v("arguments")]),s._v("对象，该对象在函数体内不存在。如果要用，可以用 rest 参数代替。")]),s._v(" "),a("p",[s._v("（4）不可以使用"),a("code",[s._v("yield")]),s._v("命令，因此箭头函数不能用作 Generator 函数。")]),s._v(" "),a("p",[s._v("上面四点中，最重要的是第一点。对于普通函数来说，内部的"),a("code",[s._v("this")]),s._v("指向函数运行时所在的对象，但是这一点对箭头函数不成立。它没有自己的"),a("code",[s._v("this")]),s._v("对象，内部的"),a("code",[s._v("this")]),s._v("就是定义时上层作用域中的"),a("code",[s._v("this")]),s._v("。也就是说，箭头函数内部的"),a("code",[s._v("this")]),s._v("指向是固定的，相比之下，普通函数的"),a("code",[s._v("this")]),s._v("指向是可变的。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function foo() {\n  setTimeout(() => {\n    console.log('id:', this.id);\n  }, 100);\n}\n\nvar id = 21;\n\nfoo.call({ id: 42 });\n// id: 42\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("p",[s._v("上面代码中，"),a("code",[s._v("setTimeout()")]),s._v("的参数是一个箭头函数，这个箭头函数的定义生效是在"),a("code",[s._v("foo")]),s._v("函数生成时，而它的真正执行要等到 100 毫秒后。如果是普通函数，执行时"),a("code",[s._v("this")]),s._v("应该指向全局对象"),a("code",[s._v("window")]),s._v("，这时应该输出"),a("code",[s._v("21")]),s._v("。但是，箭头函数导致"),a("code",[s._v("this")]),s._v("总是指向函数定义生效时所在的对象（本例是"),a("code",[s._v("{id: 42}")]),s._v("），所以打印出来的是"),a("code",[s._v("42")]),s._v("。")]),s._v(" "),a("p",[s._v("下面例子是回调函数分别为箭头函数和普通函数，对比它们内部的"),a("code",[s._v("this")]),s._v("指向。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function Timer() {\n  this.s1 = 0;\n  this.s2 = 0;\n  // 箭头函数\n  setInterval(() => this.s1++, 1000);\n  // 普通函数\n  setInterval(function () {\n    this.s2++;\n  }, 1000);\n}\n\nvar timer = new Timer();\n\nsetTimeout(() => console.log('s1: ', timer.s1), 3100);\nsetTimeout(() => console.log('s2: ', timer.s2), 3100);\n// s1: 3\n// s2: 0\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br")])]),a("p",[s._v("上面代码中，"),a("code",[s._v("Timer")]),s._v("函数内部设置了两个定时器，分别使用了箭头函数和普通函数。前者的"),a("code",[s._v("this")]),s._v("绑定定义时所在的作用域（即"),a("code",[s._v("Timer")]),s._v("函数），后者的"),a("code",[s._v("this")]),s._v("指向运行时所在的作用域（即全局对象）。所以，3100 毫秒之后，"),a("code",[s._v("timer.s1")]),s._v("被更新了 3 次，而"),a("code",[s._v("timer.s2")]),s._v("一次都没更新。")]),s._v(" "),a("p",[s._v("箭头函数实际上可以让"),a("code",[s._v("this")]),s._v("指向固定化，绑定"),a("code",[s._v("this")]),s._v("使得它不再可变，这种特性很有利于封装回调函数。下面是一个例子，DOM 事件的回调函数封装在一个对象里面。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("var handler = {\n  id: '123456',\n\n  init: function() {\n    document.addEventListener('click',\n      event => this.doSomething(event.type), false);\n  },\n\n  doSomething: function(type) {\n    console.log('Handling ' + type  + ' for ' + this.id);\n  }\n};\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("p",[s._v("上面代码的"),a("code",[s._v("init()")]),s._v("方法中，使用了箭头函数，这导致这个箭头函数里面的"),a("code",[s._v("this")]),s._v("，总是指向"),a("code",[s._v("handler")]),s._v("对象。如果回调函数是普通函数，那么运行"),a("code",[s._v("this.doSomething()")]),s._v("这一行会报错，因为此时"),a("code",[s._v("this")]),s._v("指向"),a("code",[s._v("document")]),s._v("对象。")]),s._v(" "),a("p",[s._v("总之，箭头函数根本没有自己的"),a("code",[s._v("this")]),s._v("，导致内部的"),a("code",[s._v("this")]),s._v("就是外层代码块的"),a("code",[s._v("this")]),s._v("。正是因为它没有"),a("code",[s._v("this")]),s._v("，所以也就不能用作构造函数。")]),s._v(" "),a("p",[s._v("下面是 Babel 转箭头函数产生的 ES5 代码，就能清楚地说明"),a("code",[s._v("this")]),s._v("的指向。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// ES6\nfunction foo() {\n  setTimeout(() => {\n    console.log('id:', this.id);\n  }, 100);\n}\n\n// ES5\nfunction foo() {\n  var _this = this;\n\n  setTimeout(function () {\n    console.log('id:', _this.id);\n  }, 100);\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br")])]),a("p",[s._v("上面代码中，转换后的 ES5 版本清楚地说明了，箭头函数里面根本没有自己的"),a("code",[s._v("this")]),s._v("，而是引用外层的"),a("code",[s._v("this")]),s._v("。")]),s._v(" "),a("p",[s._v("请问下面的代码之中，"),a("code",[s._v("this")]),s._v("的指向有几个？")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function foo() {\n  return () => {\n    return () => {\n      return () => {\n        console.log('id:', this.id);\n      };\n    };\n  };\n}\n\nvar f = foo.call({id: 1});\n\nvar t1 = f.call({id: 2})()(); // id: 1\nvar t2 = f().call({id: 3})(); // id: 1\nvar t3 = f()().call({id: 4}); // id: 1\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br")])]),a("p",[s._v("答案是"),a("code",[s._v("this")]),s._v("的指向只有一个，就是函数"),a("code",[s._v("foo")]),s._v("的"),a("code",[s._v("this")]),s._v("，这是因为所有的内层函数都是箭头函数，都没有自己的"),a("code",[s._v("this")]),s._v("，它们的"),a("code",[s._v("this")]),s._v("其实都是最外层"),a("code",[s._v("foo")]),s._v("函数的"),a("code",[s._v("this")]),s._v("。所以不管怎么嵌套，"),a("code",[s._v("t1")]),s._v("、"),a("code",[s._v("t2")]),s._v("、"),a("code",[s._v("t3")]),s._v("都输出同样的结果。如果这个例子的所有内层函数都写成普通函数，那么每个函数的"),a("code",[s._v("this")]),s._v("都指向运行时所在的不同对象。")]),s._v(" "),a("p",[s._v("除了"),a("code",[s._v("this")]),s._v("，以下三个变量在箭头函数之中也是不存在的，指向外层函数的对应变量："),a("code",[s._v("arguments")]),s._v("、"),a("code",[s._v("super")]),s._v("、"),a("code",[s._v("new.target")]),s._v("。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function foo() {\n  setTimeout(() => {\n    console.log('args:', arguments);\n  }, 100);\n}\n\nfoo(2, 4, 6, 8)\n// args: [2, 4, 6, 8]\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[s._v("上面代码中，箭头函数内部的变量"),a("code",[s._v("arguments")]),s._v("，其实是函数"),a("code",[s._v("foo")]),s._v("的"),a("code",[s._v("arguments")]),s._v("变量。")]),s._v(" "),a("p",[s._v("另外，由于箭头函数没有自己的"),a("code",[s._v("this")]),s._v("，所以当然也就不能用"),a("code",[s._v("call()")]),s._v("、"),a("code",[s._v("apply()")]),s._v("、"),a("code",[s._v("bind()")]),s._v("这些方法去改变"),a("code",[s._v("this")]),s._v("的指向。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("(function() {\n  return [\n    (() => this.x).bind({ x: 'inner' })()\n  ];\n}).call({ x: 'outer' });\n// ['outer']\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("上面代码中，箭头函数没有自己的"),a("code",[s._v("this")]),s._v("，所以"),a("code",[s._v("bind")]),s._v("方法无效，内部的"),a("code",[s._v("this")]),s._v("指向外部的"),a("code",[s._v("this")]),s._v("。")]),s._v(" "),a("p",[s._v("长期以来，JavaScript 语言的"),a("code",[s._v("this")]),s._v("对象一直是一个令人头痛的问题，在对象方法中使用"),a("code",[s._v("this")]),s._v("，必须非常小心。箭头函数”绑定”"),a("code",[s._v("this")]),s._v("，很大程度上解决了这个困扰。")]),s._v(" "),a("h3",{attrs:{id:"不适用场合"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#不适用场合"}},[s._v("#")]),s._v(" 不适用场合")]),s._v(" "),a("p",[s._v("由于箭头函数使得"),a("code",[s._v("this")]),s._v("从“动态”变成“静态”，下面两个场合不应该使用箭头函数。")]),s._v(" "),a("p",[s._v("第一个场合是定义对象的方法，且该方法内部包括"),a("code",[s._v("this")]),s._v("。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("const cat = {\n  lives: 9,\n  jumps: () => {\n    this.lives--;\n  }\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("上面代码中，"),a("code",[s._v("cat.jumps()")]),s._v("方法是一个箭头函数，这是错误的。调用"),a("code",[s._v("cat.jumps()")]),s._v("时，如果是普通函数，该方法内部的"),a("code",[s._v("this")]),s._v("指向"),a("code",[s._v("cat")]),s._v("；如果写成上面那样的箭头函数，使得"),a("code",[s._v("this")]),s._v("指向全局对象，因此不会得到预期结果。这是因为对象不构成单独的作用域，导致"),a("code",[s._v("jumps")]),s._v("箭头函数定义时的作用域就是全局作用域。")]),s._v(" "),a("p",[s._v("再看一个例子。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("globalThis.s = 21;\n\nconst obj = {\n  s: 42,\n  m: () => console.log(this.s)\n};\n\nobj.m() // 21\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[s._v("上面例子中，"),a("code",[s._v("obj.m()")]),s._v("使用箭头函数定义。JavaScript 引擎的处理方法是，先在全局空间生成这个箭头函数，然后赋值给"),a("code",[s._v("obj.m")]),s._v("，这导致箭头函数内部的"),a("code",[s._v("this")]),s._v("指向全局对象，所以"),a("code",[s._v("obj.m()")]),s._v("输出的是全局空间的"),a("code",[s._v("21")]),s._v("，而不是对象内部的"),a("code",[s._v("42")]),s._v("。上面的代码实际上等同于下面的代码。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("globalThis.s = 21;\nglobalThis.m = () => console.log(this.s);\n\nconst obj = {\n  s: 42,\n  m: globalThis.m\n};\n\nobj.m() // 21\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[s._v("由于上面这个原因，对象的属性建议使用传统的写法定义，不要用箭头函数定义。")]),s._v(" "),a("p",[s._v("第二个场合是需要动态"),a("code",[s._v("this")]),s._v("的时候，也不应使用箭头函数。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("var button = document.getElementById('press');\nbutton.addEventListener('click', () => {\n  this.classList.toggle('on');\n});\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("上面代码运行时，点击按钮会报错，因为"),a("code",[s._v("button")]),s._v("的监听函数是一个箭头函数，导致里面的"),a("code",[s._v("this")]),s._v("就是全局对象。如果改成普通函数，"),a("code",[s._v("this")]),s._v("就会动态指向被点击的按钮对象。")]),s._v(" "),a("p",[s._v("另外，如果函数体很复杂，有许多行，或者函数内部有大量的读写操作，不单纯是为了计算值，这时也不应该使用箭头函数，而是要使用普通函数，这样可以提高代码可读性。")]),s._v(" "),a("h3",{attrs:{id:"嵌套的箭头函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#嵌套的箭头函数"}},[s._v("#")]),s._v(" 嵌套的箭头函数")]),s._v(" "),a("p",[s._v("箭头函数内部，还可以再使用箭头函数。下面是一个 ES5 语法的多重嵌套函数。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function insert(value) {\n  return {into: function (array) {\n    return {after: function (afterValue) {\n      array.splice(array.indexOf(afterValue) + 1, 0, value);\n      return array;\n    }};\n  }};\n}\n\ninsert(2).into([1, 3]).after(1); //[1, 2, 3]\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("p",[s._v("上面这个函数，可以使用箭头函数改写。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("let insert = (value) => ({into: (array) => ({after: (afterValue) => {\n  array.splice(array.indexOf(afterValue) + 1, 0, value);\n  return array;\n}})});\n\ninsert(2).into([1, 3]).after(1); //[1, 2, 3]\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("下面是一个部署管道机制（pipeline）的例子，即前一个函数的输出是后一个函数的输入。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("const pipeline = (...funcs) =>\n  val => funcs.reduce((a, b) => b(a), val);\n\nconst plus1 = a => a + 1;\nconst mult2 = a => a * 2;\nconst addThenMult = pipeline(plus1, mult2);\n\naddThenMult(5)\n// 12\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[s._v("如果觉得上面的写法可读性比较差，也可以采用下面的写法。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("const plus1 = a => a + 1;\nconst mult2 = a => a * 2;\n\nmult2(plus1(5))\n// 12\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("箭头函数还有一个功能，就是可以很方便地改写 λ 演算。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// λ演算的写法\nfix = λf.(λx.f(λv.x(x)(v)))(λx.f(λv.x(x)(v)))\n\n// ES6的写法\nvar fix = f => (x => f(v => x(x)(v)))\n               (x => f(v => x(x)(v)));\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("上面两种写法，几乎是一一对应的。由于 λ 演算对于计算机科学非常重要，这使得我们可以用 ES6 作为替代工具，探索计算机科学。")]),s._v(" "),a("h2",{attrs:{id:"尾调用优化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#尾调用优化"}},[s._v("#")]),s._v(" 尾调用优化")]),s._v(" "),a("h3",{attrs:{id:"什么是尾调用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是尾调用"}},[s._v("#")]),s._v(" 什么是尾调用？")]),s._v(" "),a("p",[s._v("尾调用（Tail Call）是函数式编程的一个重要概念，本身非常简单，一句话就能说清楚，就是指某个函数的最后一步是调用另一个函数。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function f(x){\n  return g(x);\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("上面代码中，函数"),a("code",[s._v("f")]),s._v("的最后一步是调用函数"),a("code",[s._v("g")]),s._v("，这就叫尾调用。")]),s._v(" "),a("p",[s._v("以下三种情况，都不属于尾调用。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// 情况一\nfunction f(x){\n  let y = g(x);\n  return y;\n}\n\n// 情况二\nfunction f(x){\n  return g(x) + 1;\n}\n\n// 情况三\nfunction f(x){\n  g(x);\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br")])]),a("p",[s._v("上面代码中，情况一是调用函数"),a("code",[s._v("g")]),s._v("之后，还有赋值操作，所以不属于尾调用，即使语义完全一样。情况二也属于调用后还有操作，即使写在一行内。情况三等同于下面的代码。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function f(x){\n  g(x);\n  return undefined;\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("尾调用不一定出现在函数尾部，只要是最后一步操作即可。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function f(x) {\n  if (x > 0) {\n    return m(x)\n  }\n  return n(x);\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("上面代码中，函数"),a("code",[s._v("m")]),s._v("和"),a("code",[s._v("n")]),s._v("都属于尾调用，因为它们都是函数"),a("code",[s._v("f")]),s._v("的最后一步操作。")]),s._v(" "),a("h3",{attrs:{id:"尾调用优化-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#尾调用优化-2"}},[s._v("#")]),s._v(" 尾调用优化")]),s._v(" "),a("p",[s._v("尾调用之所以与其他调用不同，就在于它的特殊的调用位置。")]),s._v(" "),a("p",[s._v("我们知道，函数调用会在内存形成一个“调用记录”，又称“调用帧”（call frame），保存调用位置和内部变量等信息。如果在函数"),a("code",[s._v("A")]),s._v("的内部调用函数"),a("code",[s._v("B")]),s._v("，那么在"),a("code",[s._v("A")]),s._v("的调用帧上方，还会形成一个"),a("code",[s._v("B")]),s._v("的调用帧。等到"),a("code",[s._v("B")]),s._v("运行结束，将结果返回到"),a("code",[s._v("A")]),s._v("，"),a("code",[s._v("B")]),s._v("的调用帧才会消失。如果函数"),a("code",[s._v("B")]),s._v("内部还调用函数"),a("code",[s._v("C")]),s._v("，那就还有一个"),a("code",[s._v("C")]),s._v("的调用帧，以此类推。所有的调用帧，就形成一个“调用栈”（call stack）。")]),s._v(" "),a("p",[s._v("尾调用由于是函数的最后一步操作，所以不需要保留外层函数的调用帧，因为调用位置、内部变量等信息都不会再用到了，只要直接用内层函数的调用帧，取代外层函数的调用帧就可以了。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function f() {\n  let m = 1;\n  let n = 2;\n  return g(m + n);\n}\nf();\n\n// 等同于\nfunction f() {\n  return g(3);\n}\nf();\n\n// 等同于\ng(3);\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br")])]),a("p",[s._v("上面代码中，如果函数"),a("code",[s._v("g")]),s._v("不是尾调用，函数"),a("code",[s._v("f")]),s._v("就需要保存内部变量"),a("code",[s._v("m")]),s._v("和"),a("code",[s._v("n")]),s._v("的值、"),a("code",[s._v("g")]),s._v("的调用位置等信息。但由于调用"),a("code",[s._v("g")]),s._v("之后，函数"),a("code",[s._v("f")]),s._v("就结束了，所以执行到最后一步，完全可以删除"),a("code",[s._v("f(x)")]),s._v("的调用帧，只保留"),a("code",[s._v("g(3)")]),s._v("的调用帧。")]),s._v(" "),a("p",[s._v("这就叫做“尾调用优化”（Tail call optimization），即只保留内层函数的调用帧。如果所有函数都是尾调用，那么完全可以做到每次执行时，调用帧只有一项，这将大大节省内存。这就是“尾调用优化”的意义。")]),s._v(" "),a("p",[s._v("注意，只有不再用到外层函数的内部变量，内层函数的调用帧才会取代外层函数的调用帧，否则就无法进行“尾调用优化”。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function addOne(a){\n  var one = 1;\n  function inner(b){\n    return b + one;\n  }\n  return inner(a);\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("上面的函数不会进行尾调用优化，因为内层函数"),a("code",[s._v("inner")]),s._v("用到了外层函数"),a("code",[s._v("addOne")]),s._v("的内部变量"),a("code",[s._v("one")]),s._v("。")]),s._v(" "),a("p",[s._v("注意，目前只有 Safari 浏览器支持尾调用优化，Chrome 和 Firefox 都不支持。")]),s._v(" "),a("h3",{attrs:{id:"尾递归"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#尾递归"}},[s._v("#")]),s._v(" 尾递归")]),s._v(" "),a("p",[s._v("函数调用自身，称为递归。如果尾调用自身，就称为尾递归。")]),s._v(" "),a("p",[s._v("递归非常耗费内存，因为需要同时保存成千上百个调用帧，很容易发生“栈溢出”错误（stack overflow）。但对于尾递归来说，由于只存在一个调用帧，所以永远不会发生“栈溢出”错误。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function factorial(n) {\n  if (n === 1) return 1;\n  return n * factorial(n - 1);\n}\n\nfactorial(5) // 120\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("上面代码是一个阶乘函数，计算"),a("code",[s._v("n")]),s._v("的阶乘，最多需要保存"),a("code",[s._v("n")]),s._v("个调用记录，复杂度 O(n) 。")]),s._v(" "),a("p",[s._v("如果改写成尾递归，只保留一个调用记录，复杂度 O(1) 。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function factorial(n, total) {\n  if (n === 1) return total;\n  return factorial(n - 1, n * total);\n}\n\nfactorial(5, 1) // 120\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("还有一个比较著名的例子，就是计算 Fibonacci 数列，也能充分说明尾递归优化的重要性。")]),s._v(" "),a("p",[s._v("非尾递归的 Fibonacci 数列实现如下。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function Fibonacci (n) {\n  if ( n <= 1 ) {return 1};\n\n  return Fibonacci(n - 1) + Fibonacci(n - 2);\n}\n\nFibonacci(10) // 89\nFibonacci(100) // 超时\nFibonacci(500) // 超时\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[s._v("尾递归优化过的 Fibonacci 数列实现如下。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function Fibonacci2 (n , ac1 = 1 , ac2 = 1) {\n  if( n <= 1 ) {return ac2};\n\n  return Fibonacci2 (n - 1, ac2, ac1 + ac2);\n}\n\nFibonacci2(100) // 573147844013817200000\nFibonacci2(1000) // 7.0330367711422765e+208\nFibonacci2(10000) // Infinity\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[s._v("由此可见，“尾调用优化”对递归操作意义重大，所以一些函数式编程语言将其写入了语言规格。ES6 亦是如此，第一次明确规定，所有 ECMAScript 的实现，都必须部署“尾调用优化”。这就是说，ES6 中只要使用尾递归，就不会发生栈溢出（或者层层递归造成的超时），相对节省内存。")]),s._v(" "),a("h3",{attrs:{id:"递归函数的改写"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#递归函数的改写"}},[s._v("#")]),s._v(" 递归函数的改写")]),s._v(" "),a("p",[s._v("尾递归的实现，往往需要改写递归函数，确保最后一步只调用自身。做到这一点的方法，就是把所有用到的内部变量改写成函数的参数。比如上面的例子，阶乘函数 factorial 需要用到一个中间变量"),a("code",[s._v("total")]),s._v("，那就把这个中间变量改写成函数的参数。这样做的缺点就是不太直观，第一眼很难看出来，为什么计算"),a("code",[s._v("5")]),s._v("的阶乘，需要传入两个参数"),a("code",[s._v("5")]),s._v("和"),a("code",[s._v("1")]),s._v("？")]),s._v(" "),a("p",[s._v("两个方法可以解决这个问题。方法一是在尾递归函数之外，再提供一个正常形式的函数。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function tailFactorial(n, total) {\n  if (n === 1) return total;\n  return tailFactorial(n - 1, n * total);\n}\n\nfunction factorial(n) {\n  return tailFactorial(n, 1);\n}\n\nfactorial(5) // 120\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("p",[s._v("上面代码通过一个正常形式的阶乘函数"),a("code",[s._v("factorial")]),s._v("，调用尾递归函数"),a("code",[s._v("tailFactorial")]),s._v("，看起来就正常多了。")]),s._v(" "),a("p",[s._v("函数式编程有一个概念，叫做柯里化（currying），意思是将多参数的函数转换成单参数的形式。这里也可以使用柯里化。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function currying(fn, n) {\n  return function (m) {\n    return fn.call(this, m, n);\n  };\n}\n\nfunction tailFactorial(n, total) {\n  if (n === 1) return total;\n  return tailFactorial(n - 1, n * total);\n}\n\nconst factorial = currying(tailFactorial, 1);\n\nfactorial(5) // 120\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br")])]),a("p",[s._v("上面代码通过柯里化，将尾递归函数"),a("code",[s._v("tailFactorial")]),s._v("变为只接受一个参数的"),a("code",[s._v("factorial")]),s._v("。")]),s._v(" "),a("p",[s._v("第二种方法就简单多了，就是采用 ES6 的函数默认值。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function factorial(n, total = 1) {\n  if (n === 1) return total;\n  return factorial(n - 1, n * total);\n}\n\nfactorial(5) // 120\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("上面代码中，参数"),a("code",[s._v("total")]),s._v("有默认值"),a("code",[s._v("1")]),s._v("，所以调用时不用提供这个值。")]),s._v(" "),a("p",[s._v("总结一下，递归本质上是一种循环操作。纯粹的函数式编程语言没有循环操作命令，所有的循环都用递归实现，这就是为什么尾递归对这些语言极其重要。对于其他支持“尾调用优化”的语言（比如 Lua，ES6），只需要知道循环可以用递归代替，而一旦使用递归，就最好使用尾递归。")]),s._v(" "),a("h3",{attrs:{id:"严格模式-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#严格模式-2"}},[s._v("#")]),s._v(" 严格模式")]),s._v(" "),a("p",[s._v("ES6 的尾调用优化只在严格模式下开启，正常模式是无效的。")]),s._v(" "),a("p",[s._v("这是因为在正常模式下，函数内部有两个变量，可以跟踪函数的调用栈。")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("func.arguments")]),s._v("：返回调用时函数的参数。")]),s._v(" "),a("li",[a("code",[s._v("func.caller")]),s._v("：返回调用当前函数的那个函数。")])]),s._v(" "),a("p",[s._v("尾调用优化发生时，函数的调用栈会改写，因此上面两个变量就会失真。严格模式禁用这两个变量，所以尾调用模式仅在严格模式下生效。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function restricted() {\n  'use strict';\n  restricted.caller;    // 报错\n  restricted.arguments; // 报错\n}\nrestricted();\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("h3",{attrs:{id:"尾递归优化的实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#尾递归优化的实现"}},[s._v("#")]),s._v(" 尾递归优化的实现")]),s._v(" "),a("p",[s._v("尾递归优化只在严格模式下生效，那么正常模式下，或者那些不支持该功能的环境中，有没有办法也使用尾递归优化呢？回答是可以的，就是自己实现尾递归优化。")]),s._v(" "),a("p",[s._v("它的原理非常简单。尾递归之所以需要优化，原因是调用栈太多，造成溢出，那么只要减少调用栈，就不会溢出。怎么做可以减少调用栈呢？就是采用“循环”换掉“递归”。")]),s._v(" "),a("p",[s._v("下面是一个正常的递归函数。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function sum(x, y) {\n  if (y > 0) {\n    return sum(x + 1, y - 1);\n  } else {\n    return x;\n  }\n}\n\nsum(1, 100000)\n// Uncaught RangeError: Maximum call stack size exceeded(…)\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("p",[s._v("上面代码中，"),a("code",[s._v("sum")]),s._v("是一个递归函数，参数"),a("code",[s._v("x")]),s._v("是需要累加的值，参数"),a("code",[s._v("y")]),s._v("控制递归次数。一旦指定"),a("code",[s._v("sum")]),s._v("递归 100000 次，就会报错，提示超出调用栈的最大次数。")]),s._v(" "),a("p",[s._v("蹦床函数（trampoline）可以将递归执行转为循环执行。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function trampoline(f) {\n  while (f && f instanceof Function) {\n    f = f();\n  }\n  return f;\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("上面就是蹦床函数的一个实现，它接受一个函数"),a("code",[s._v("f")]),s._v("作为参数。只要"),a("code",[s._v("f")]),s._v("执行后返回一个函数，就继续执行。注意，这里是返回一个函数，然后执行该函数，而不是函数里面调用函数，这样就避免了递归执行，从而就消除了调用栈过大的问题。")]),s._v(" "),a("p",[s._v("然后，要做的就是将原来的递归函数，改写为每一步返回另一个函数。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function sum(x, y) {\n  if (y > 0) {\n    return sum.bind(null, x + 1, y - 1);\n  } else {\n    return x;\n  }\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("上面代码中，"),a("code",[s._v("sum")]),s._v("函数的每次执行，都会返回自身的另一个版本。")]),s._v(" "),a("p",[s._v("现在，使用蹦床函数执行"),a("code",[s._v("sum")]),s._v("，就不会发生调用栈溢出。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("trampoline(sum(1, 100000))\n// 100001\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("蹦床函数并不是真正的尾递归优化，下面的实现才是。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function tco(f) {\n  var value;\n  var active = false;\n  var accumulated = [];\n\n  return function accumulator() {\n    accumulated.push(arguments);\n    if (!active) {\n      active = true;\n      while (accumulated.length) {\n        value = f.apply(this, accumulated.shift());\n      }\n      active = false;\n      return value;\n    }\n  };\n}\n\nvar sum = tco(function(x, y) {\n  if (y > 0) {\n    return sum(x + 1, y - 1)\n  }\n  else {\n    return x\n  }\n});\n\nsum(1, 100000)\n// 100001\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br")])]),a("p",[s._v("上面代码中，"),a("code",[s._v("tco")]),s._v("函数是尾递归优化的实现，它的奥妙就在于状态变量"),a("code",[s._v("active")]),s._v("。默认情况下，这个变量是不激活的。一旦进入尾递归优化的过程，这个变量就激活了。然后，每一轮递归"),a("code",[s._v("sum")]),s._v("返回的都是"),a("code",[s._v("undefined")]),s._v("，所以就避免了递归执行；而"),a("code",[s._v("accumulated")]),s._v("数组存放每一轮"),a("code",[s._v("sum")]),s._v("执行的参数，总是有值的，这就保证了"),a("code",[s._v("accumulator")]),s._v("函数内部的"),a("code",[s._v("while")]),s._v("循环总是会执行。这样就很巧妙地将“递归”改成了“循环”，而后一轮的参数会取代前一轮的参数，保证了调用栈只有一层。")]),s._v(" "),a("h2",{attrs:{id:"函数参数的尾逗号"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数参数的尾逗号"}},[s._v("#")]),s._v(" 函数参数的尾逗号")]),s._v(" "),a("p",[s._v("ES2017 "),a("a",{attrs:{href:"https://github.com/jeffmo/es-trailing-function-commas",target:"_blank",rel:"noopener noreferrer"}},[s._v("允许"),a("OutboundLink")],1),s._v("函数的最后一个参数有尾逗号（trailing comma）。")]),s._v(" "),a("p",[s._v("此前，函数定义和调用时，都不允许最后一个参数后面出现逗号。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function clownsEverywhere(\n  param1,\n  param2\n) { /* ... */ }\n\nclownsEverywhere(\n  'foo',\n  'bar'\n);\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[s._v("上面代码中，如果在"),a("code",[s._v("param2")]),s._v("或"),a("code",[s._v("bar")]),s._v("后面加一个逗号，就会报错。")]),s._v(" "),a("p",[s._v("如果像上面这样，将参数写成多行（即每个参数占据一行），以后修改代码的时候，想为函数"),a("code",[s._v("clownsEverywhere")]),s._v("添加第三个参数，或者调整参数的次序，就势必要在原来最后一个参数后面添加一个逗号。这对于版本管理系统来说，就会显示添加逗号的那一行也发生了变动。这看上去有点冗余，因此新的语法允许定义和调用时，尾部直接有一个逗号。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function clownsEverywhere(\n  param1,\n  param2,\n) { /* ... */ }\n\nclownsEverywhere(\n  'foo',\n  'bar',\n);\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[s._v("这样的规定也使得，函数参数与数组和对象的尾逗号规则，保持一致了。")]),s._v(" "),a("h2",{attrs:{id:"function-prototype-tostring"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#function-prototype-tostring"}},[s._v("#")]),s._v(" Function.prototype.toString()")]),s._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/tc39/Function-prototype-toString-revision",target:"_blank",rel:"noopener noreferrer"}},[s._v("ES2019"),a("OutboundLink")],1),s._v(" 对函数实例的"),a("code",[s._v("toString()")]),s._v("方法做出了修改。")]),s._v(" "),a("p",[a("code",[s._v("toString()")]),s._v("方法返回函数代码本身，以前会省略注释和空格。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function /* foo comment */ foo () {}\n\nfoo.toString()\n// function foo() {}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("上面代码中，函数"),a("code",[s._v("foo")]),s._v("的原始代码包含注释，函数名"),a("code",[s._v("foo")]),s._v("和圆括号之间有空格，但是"),a("code",[s._v("toString()")]),s._v("方法都把它们省略了。")]),s._v(" "),a("p",[s._v("修改后的"),a("code",[s._v("toString()")]),s._v("方法，明确要求返回一模一样的原始代码。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('function /* foo comment */ foo () {}\n\nfoo.toString()\n// "function /* foo comment */ foo () {}"\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("h2",{attrs:{id:"catch-命令的参数省略"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#catch-命令的参数省略"}},[s._v("#")]),s._v(" catch 命令的参数省略")]),s._v(" "),a("p",[s._v("JavaScript 语言的"),a("code",[s._v("try...catch")]),s._v("结构，以前明确要求"),a("code",[s._v("catch")]),s._v("命令后面必须跟参数，接受"),a("code",[s._v("try")]),s._v("代码块抛出的错误对象。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("try {\n  // ...\n} catch (err) {\n  // 处理错误\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("上面代码中，"),a("code",[s._v("catch")]),s._v("命令后面带有参数"),a("code",[s._v("err")]),s._v("。")]),s._v(" "),a("p",[s._v("很多时候，"),a("code",[s._v("catch")]),s._v("代码块可能用不到这个参数。但是，为了保证语法正确，还是必须写。"),a("a",{attrs:{href:"https://github.com/tc39/proposal-optional-catch-binding",target:"_blank",rel:"noopener noreferrer"}},[s._v("ES2019"),a("OutboundLink")],1),s._v(" 做出了改变，允许"),a("code",[s._v("catch")]),s._v("语句省略参数。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("try {\n  // ...\n} catch {\n  // ...\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("h3",{attrs:{id:"留言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#留言"}},[s._v("#")]),s._v(" 留言")])])}),[],!1,null,null,null);n.default=t.exports}}]);