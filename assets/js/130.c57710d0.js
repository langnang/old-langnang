(window.webpackJsonp=window.webpackJsonp||[]).push([[130],{597:function(e,r,n){"use strict";n.r(r);var s=n(18),t=Object(s.a)({},(function(){var e=this,r=e.$createElement,n=e._self._c||r;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"child-process-子进程-node-js-api-文档"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#child-process-子进程-node-js-api-文档"}},[e._v("#")]),e._v(" child_process 子进程 | Node.js API 文档")]),e._v(" "),n("blockquote",[n("h2",{attrs:{id:"excerpt"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#excerpt"}},[e._v("#")]),e._v(" Excerpt")]),e._v(" "),n("p",[e._v("中英对照")])]),e._v(" "),n("hr"),e._v(" "),n("p",[n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process/child_process.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("中英对照"),n("OutboundLink")],1)]),e._v(" "),n("p",[n("strong",[e._v("源代码:")]),e._v(" "),n("a",{attrs:{href:"https://github.com/nodejs/node/blob/v12.22.12/lib/child_process.js",target:"_blank",rel:"noopener noreferrer"}},[e._v("lib/child_process.js"),n("OutboundLink")],1)]),e._v(" "),n("p",[e._v("此功能主要由 "),n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process.html#child_process_child_process_spawn_command_args_options",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("child_process.spawn()")]),n("OutboundLink")],1),e._v(" 函数提供：")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const { spawn } = require('child_process');\nconst ls = spawn('ls', ['-lh', '/usr']);\n\nls.stdout.on('data', (data) => {\n  console.log(`stdout: ${data}`);\n});\n\nls.stderr.on('data', (data) => {\n  console.error(`stderr: ${data}`);\n});\n\nls.on('close', (code) => {\n  console.log(`child process exited with code ${code}`);\n});\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br")])]),n("p",[e._v("这些管道的容量有限（且特定于平台）。")]),e._v(" "),n("p",[e._v("这与 shell 中管道的行为相同。 如果不消费输出，则使用 "),n("code",[e._v("{ stdio: 'ignore' }")]),e._v(" 选项。")]),e._v(" "),n("p",[n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process.html#child_process_child_process_spawn_command_args_options",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("child_process.spawn()")]),n("OutboundLink")],1),e._v(" 方法异步衍生子进程，不会阻塞 Node.js 事件循环。 "),n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process.html#child_process_child_process_spawnsync_command_args_options",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("child_process.spawnSync()")]),n("OutboundLink")],1),e._v(" 函数以同步方式提供等效的功能，其会阻塞事件循环，直到衍生的进程退出或终止。")]),e._v(" "),n("p",[e._v("为方便起见，"),n("code",[e._v("child_process")]),e._v(" 模块提供了一些同步和异步方法替代 "),n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process.html#child_process_child_process_spawn_command_args_options",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("child_process.spawn()")]),n("OutboundLink")],1),e._v(" 和 "),n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process.html#child_process_child_process_spawnsync_command_args_options",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("child_process.spawnSync()")]),n("OutboundLink")],1),e._v("。 这些替代方法中的每一个都是基于 "),n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process.html#child_process_child_process_spawn_command_args_options",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("child_process.spawn()")]),n("OutboundLink")],1),e._v(" 或 "),n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process.html#child_process_child_process_spawnsync_command_args_options",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("child_process.spawnSync()")]),n("OutboundLink")],1),e._v(" 实现。")]),e._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process.html#child_process_child_process_exec_command_options_callback",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("child_process.exec()")]),n("OutboundLink")],1),e._v(": 衍生 shell 并在该 shell 中运行命令，完成后将 "),n("code",[e._v("stdout")]),e._v(" 和 "),n("code",[e._v("stderr")]),e._v(" 传给回调函数。")]),e._v(" "),n("li",[n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process.html#child_process_child_process_execfile_file_args_options_callback",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("child_process.execFile()")]),n("OutboundLink")],1),e._v(": 与 "),n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process.html#child_process_child_process_exec_command_options_callback",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("child_process.exec()")]),n("OutboundLink")],1),e._v(" 类似，不同之处在于，默认情况下，它直接衍生命令，而不先衍生 shell。")]),e._v(" "),n("li",[n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process.html#child_process_child_process_fork_modulepath_args_options",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("child_process.fork()")]),n("OutboundLink")],1),e._v(": 衍生新的 Node.js 进程并使用建立的 IPC 通信通道（其允许在父子进程之间发送消息）调用指定的模块。")]),e._v(" "),n("li",[n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process.html#child_process_child_process_execsync_command_options",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("child_process.execSync()")]),n("OutboundLink")],1),e._v(": "),n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process.html#child_process_child_process_exec_command_options_callback",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("child_process.exec()")]),n("OutboundLink")],1),e._v(" 的同步版本，其将阻塞 Node.js 事件循环。")]),e._v(" "),n("li",[n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process.html#child_process_child_process_execfilesync_file_args_options",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("child_process.execFileSync()")]),n("OutboundLink")],1),e._v(": "),n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process.html#child_process_child_process_execfile_file_args_options_callback",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("child_process.execFile()")]),n("OutboundLink")],1),e._v(" 的同步版本，其将阻塞 Node.js 事件循环。")])]),e._v(" "),n("p",[e._v("对于某些情况，例如自动化 shell 脚本，"),n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process.html#child_process_synchronous_process_creation",target:"_blank",rel:"noopener noreferrer"}},[e._v("同步的方法"),n("OutboundLink")],1),e._v("可能更方便。 但是，在许多情况下，由于在衍生的进程完成前会停止事件循环，同步方法会对性能产生重大影响。")]),e._v(" "),n("h3",{attrs:{id:"异步进程的创建"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#异步进程的创建"}},[e._v("#")]),e._v(" 异步进程的创建"),n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process.html#asynchronous-process-creation",target:"_blank",rel:"noopener noreferrer"}},[e._v("#"),n("OutboundLink")],1)]),e._v(" "),n("p",[n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process/asynchronous_process_creation.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("中英对照"),n("OutboundLink")],1)]),e._v(" "),n("p",[n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process.html#child_process_child_process_spawn_command_args_options",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("child_process.spawn()")]),n("OutboundLink")],1),e._v("、"),n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process.html#child_process_child_process_fork_modulepath_args_options",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("child_process.fork()")]),n("OutboundLink")],1),e._v("、"),n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process.html#child_process_child_process_exec_command_options_callback",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("child_process.exec()")]),n("OutboundLink")],1),e._v(" 和 "),n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process.html#child_process_child_process_execfile_file_args_options_callback",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("child_process.execFile()")]),n("OutboundLink")],1),e._v(" 方法都遵循其他 Node.js API 典型的惯用异步编程模式。")]),e._v(" "),n("p",[e._v("每个方法都返回 "),n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process.html#child_process_child_process",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("ChildProcess")]),n("OutboundLink")],1),e._v(" 实例。 这些对象实现了 Node.js "),n("a",{attrs:{href:"http://nodejs.cn/api-v12/events.html#events_class_eventemitter",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("EventEmitter")]),n("OutboundLink")],1),e._v(" API，允许父进程注册在子进程的生命周期中发生某些事件时调用的监听器函数。")]),e._v(" "),n("p",[n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process.html#child_process_child_process_exec_command_options_callback",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("child_process.exec()")]),n("OutboundLink")],1),e._v(" 和 "),n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process.html#child_process_child_process_execfile_file_args_options_callback",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("child_process.execFile()")]),n("OutboundLink")],1),e._v(" 方法还允许指定可选的 "),n("code",[e._v("callback")]),e._v(" 函数，其在子进程终止时调用。")]),e._v(" "),n("h4",{attrs:{id:"在-windows-上衍生-bat-和-cmd-文件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#在-windows-上衍生-bat-和-cmd-文件"}},[e._v("#")]),e._v(" 在 Windows 上衍生 .bat 和 .cmd 文件"),n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process.html#spawning-bat-and-cmd-files-on-windows",target:"_blank",rel:"noopener noreferrer"}},[e._v("#"),n("OutboundLink")],1)]),e._v(" "),n("p",[n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process/spawning_bat_and_cmd_files_on_windows.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("中英对照"),n("OutboundLink")],1)]),e._v(" "),n("p",[n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process.html#child_process_child_process_exec_command_options_callback",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("child_process.exec()")]),n("OutboundLink")],1),e._v(" 和 "),n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process.html#child_process_child_process_execfile_file_args_options_callback",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("child_process.execFile()")]),n("OutboundLink")],1),e._v(" 之间区别的重要性可能因平台而异。 在 Unix 类型的操作系统（Unix、Linux、macOS）上，"),n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process.html#child_process_child_process_execfile_file_args_options_callback",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("child_process.execFile()")]),n("OutboundLink")],1),e._v(" 可以更高效，因为它默认不衍生 shell。 但是，在 Windows 上，"),n("code",[e._v(".bat")]),e._v(" 和 "),n("code",[e._v(".cmd")]),e._v(" 文件在没有终端的情况下无法自行执行，因此无法使用 "),n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process.html#child_process_child_process_execfile_file_args_options_callback",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("child_process.execFile()")]),n("OutboundLink")],1),e._v(" 启动。 在 Windows 上运行时，"),n("code",[e._v(".bat")]),e._v(" 和 "),n("code",[e._v(".cmd")]),e._v(" 文件可以使用具有 "),n("code",[e._v("shell")]),e._v(" 选项集的 "),n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process.html#child_process_child_process_spawn_command_args_options",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("child_process.spawn()")]),n("OutboundLink")],1),e._v("、使用 "),n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process.html#child_process_child_process_exec_command_options_callback",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("child_process.exec()")]),n("OutboundLink")],1),e._v("、或通过衍生 "),n("code",[e._v("cmd.exe")]),e._v(" 并将 "),n("code",[e._v(".bat")]),e._v(" 或 "),n("code",[e._v(".cmd")]),e._v(" 文件作为参数传入（这也是 "),n("code",[e._v("shell")]),e._v(" 选项和 "),n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process.html#child_process_child_process_exec_command_options_callback",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("child_process.exec()")]),n("OutboundLink")],1),e._v(" 所做的）来调用。 在任何情况下，如果脚本文件名包含空格，则需要加上引号。")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// 仅在 Windows 上...\nconst { spawn } = require('child_process');\nconst bat = spawn('cmd.exe', ['/c', 'my.bat']);\n\nbat.stdout.on('data', (data) => {\n  console.log(data.toString());\n});\n\nbat.stderr.on('data', (data) => {\n  console.error(data.toString());\n});\n\nbat.on('exit', (code) => {\n  console.log(`Child exited with code ${code}`);\n});\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br")])]),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// 或者...\nconst { exec, spawn } = require('child_process');\nexec('my.bat', (err, stdout, stderr) => {\n  if (err) {\n    console.error(err);\n    return;\n  }\n  console.log(stdout);\n});\n\n// 文件名中带有空格的脚本：\nconst bat = spawn('\"my script.cmd\"', ['a', 'b'], { shell: true });\n// 或者：\nexec('\"my script.cmd\" a b', (err, stdout, stderr) => {\n  // ...\n});\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br")])]),n("h4",{attrs:{id:"child-process-exec-command-options-callback"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#child-process-exec-command-options-callback"}},[e._v("#")]),e._v(" "),n("code",[e._v("child_process.exec(command[, options][, callback])")]),n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process.html#child_processexeccommand-options-callback",target:"_blank",rel:"noopener noreferrer"}},[e._v("#"),n("OutboundLink")],1)]),e._v(" "),n("p",[n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process/child_process_exec_command_options_callback.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("中英对照"),n("OutboundLink")],1)]),e._v(" "),n("ul",[n("li",[n("code",[e._v("command")]),e._v(" "),n("a",{attrs:{href:"http://url.nodejs.cn/9Tw2bK",target:"_blank",rel:"noopener noreferrer"}},[n("string",[n("OutboundLink")],1)],1),e._v(" 要运行的命令，参数以空格分隔。")]),e._v(" "),n("li",[n("code",[e._v("options")]),e._v(" "),n("a",{attrs:{href:"http://url.nodejs.cn/jzn6Ao",target:"_blank",rel:"noopener noreferrer"}},[n("Object",[n("OutboundLink")],1)],1),e._v(" "),n("ul",[n("li",[n("code",[e._v("cwd")]),e._v(" "),n("a",{attrs:{href:"http://url.nodejs.cn/9Tw2bK",target:"_blank",rel:"noopener noreferrer"}},[n("string",[n("OutboundLink")],1)],1),e._v(" 子进程的当前工作目录。 "),n("strong",[e._v("默认值:")]),e._v(" "),n("code",[e._v("null")]),e._v("。")]),e._v(" "),n("li",[n("code",[e._v("env")]),e._v(" "),n("a",{attrs:{href:"http://url.nodejs.cn/jzn6Ao",target:"_blank",rel:"noopener noreferrer"}},[n("Object",[n("OutboundLink")],1)],1),e._v(" 环境变量键值对。 "),n("strong",[e._v("默认值:")]),e._v(" "),n("code",[e._v("process.env")]),e._v("。")]),e._v(" "),n("li",[n("code",[e._v("encoding")]),e._v(" "),n("a",{attrs:{href:"http://url.nodejs.cn/9Tw2bK",target:"_blank",rel:"noopener noreferrer"}},[n("string",[n("OutboundLink")],1)],1),e._v(" "),n("strong",[e._v("默认值:")]),e._v(" "),n("code",[e._v("'utf8'")])]),e._v(" "),n("li",[n("code",[e._v("shell")]),e._v(" "),n("a",{attrs:{href:"http://url.nodejs.cn/9Tw2bK",target:"_blank",rel:"noopener noreferrer"}},[n("string",[n("OutboundLink")],1)],1),e._v(" 用于执行命令的 shell。 请参阅 "),n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process.html#child_process_shell_requirements",target:"_blank",rel:"noopener noreferrer"}},[e._v("shell 的要求"),n("OutboundLink")],1),e._v("和"),n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process.html#child_process_default_windows_shell",target:"_blank",rel:"noopener noreferrer"}},[e._v("默认的 Windows shell"),n("OutboundLink")],1),e._v("。 "),n("strong",[e._v("默认值:")]),e._v(" Unix 上是 "),n("code",[e._v("'/bin/sh'")]),e._v("，Windows 上是 "),n("code",[e._v("process.env.ComSpec")]),e._v("。")]),e._v(" "),n("li",[n("code",[e._v("timeout")]),e._v(" "),n("a",{attrs:{href:"http://url.nodejs.cn/SXbo1v",target:"_blank",rel:"noopener noreferrer"}},[n("number",[n("OutboundLink")],1)],1),e._v(" "),n("strong",[e._v("默认值:")]),e._v(" "),n("code",[e._v("0")])]),e._v(" "),n("li",[n("code",[e._v("maxBuffer")]),e._v(" "),n("a",{attrs:{href:"http://url.nodejs.cn/SXbo1v",target:"_blank",rel:"noopener noreferrer"}},[n("number",[n("OutboundLink")],1)],1),e._v(" 标准输出或标准错误上允许的最大数据量（以字节为单位）。 如果超过，则子进程将终止并截断任何输出。 请参阅 "),n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process.html#child_process_maxbuffer_and_unicode",target:"_blank",rel:"noopener noreferrer"}},[e._v("maxBuffer 和 Unicode"),n("OutboundLink")],1),e._v(" 的注意事项。 "),n("strong",[e._v("默认值:")]),e._v(" "),n("code",[e._v("1024 * 1024")]),e._v("。")]),e._v(" "),n("li",[n("code",[e._v("killSignal")]),e._v(" "),n("a",{attrs:{href:"http://url.nodejs.cn/9Tw2bK",target:"_blank",rel:"noopener noreferrer"}},[n("string",[n("OutboundLink")],1)],1),e._v(" | "),n("a",{attrs:{href:"http://url.nodejs.cn/SXbo1v",target:"_blank",rel:"noopener noreferrer"}},[n("integer",[n("OutboundLink")],1)],1),e._v(" "),n("strong",[e._v("默认值:")]),e._v(" "),n("code",[e._v("'SIGTERM'")])]),e._v(" "),n("li",[n("code",[e._v("uid")]),e._v(" "),n("a",{attrs:{href:"http://url.nodejs.cn/SXbo1v",target:"_blank",rel:"noopener noreferrer"}},[n("number",[n("OutboundLink")],1)],1),e._v(" 设置进程的用户标识（参见 "),n("a",{attrs:{href:"http://url.nodejs.cn/bUGgha",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("setuid(2)")]),n("OutboundLink")],1),e._v("）。")]),e._v(" "),n("li",[n("code",[e._v("gid")]),e._v(" "),n("a",{attrs:{href:"http://url.nodejs.cn/SXbo1v",target:"_blank",rel:"noopener noreferrer"}},[n("number",[n("OutboundLink")],1)],1),e._v(" 设置进程的群组标识（参见 "),n("a",{attrs:{href:"http://url.nodejs.cn/64HRVx",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("setgid(2)")]),n("OutboundLink")],1),e._v("）。")]),e._v(" "),n("li",[n("code",[e._v("windowsHide")]),e._v(" "),n("a",{attrs:{href:"http://url.nodejs.cn/jFbvuT",target:"_blank",rel:"noopener noreferrer"}},[n("boolean",[n("OutboundLink")],1)],1),e._v(" 隐藏通常在 Windows 系统上创建的子进程控制台窗口。 "),n("strong",[e._v("默认值:")]),e._v(" "),n("code",[e._v("false")]),e._v("。")])])]),e._v(" "),n("li",[n("code",[e._v("callback")]),e._v(" "),n("a",{attrs:{href:"http://url.nodejs.cn/ceTQa6",target:"_blank",rel:"noopener noreferrer"}},[n("Function",[n("OutboundLink")],1)],1),e._v(" 当进程终止时使用输出调用。\n"),n("ul",[n("li",[n("code",[e._v("error")]),e._v(" "),n("a",{attrs:{href:"http://url.nodejs.cn/qZ873x",target:"_blank",rel:"noopener noreferrer"}},[n("Error",[n("OutboundLink")],1)],1)]),e._v(" "),n("li",[n("code",[e._v("stdout")]),e._v(" "),n("a",{attrs:{href:"http://url.nodejs.cn/9Tw2bK",target:"_blank",rel:"noopener noreferrer"}},[n("string",[n("OutboundLink")],1)],1),e._v(" | "),n("a",{attrs:{href:"http://nodejs.cn/api/buffer.html#class-buffer",target:"_blank",rel:"noopener noreferrer"}},[n("Buffer",[n("OutboundLink")],1)],1)]),e._v(" "),n("li",[n("code",[e._v("stderr")]),e._v(" "),n("a",{attrs:{href:"http://url.nodejs.cn/9Tw2bK",target:"_blank",rel:"noopener noreferrer"}},[n("string",[n("OutboundLink")],1)],1),e._v(" | "),n("a",{attrs:{href:"http://nodejs.cn/api/buffer.html#class-buffer",target:"_blank",rel:"noopener noreferrer"}},[n("Buffer",[n("OutboundLink")],1)],1)])])]),e._v(" "),n("li",[e._v("返回: "),n("a",{attrs:{href:"http://nodejs.cn/api/child_process.html#class-childprocess",target:"_blank",rel:"noopener noreferrer"}},[n("ChildProcess",[n("OutboundLink")],1)],1)])]),e._v(" "),n("p",[e._v("衍生 shell，然后在该 shell 中执行 "),n("code",[e._v("command")]),e._v("，缓冲任何生成的输出。 传给执行函数的 "),n("code",[e._v("command")]),e._v(" 字符串由 shell 直接处理，特殊字符（因 "),n("a",{attrs:{href:"http://url.nodejs.cn/eUHhwc",target:"_blank",rel:"noopener noreferrer"}},[e._v("shell"),n("OutboundLink")],1),e._v(" 而异）需要进行相应处理：")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("exec('\"/path/to/test file/test.sh\" arg1 arg2');\n// 使用双引号，这样路径中的空格就不会被解释为多个参数的分隔符。\n\nexec('echo \"The \\\\$HOME variable is $HOME\"');\n// $HOME 变量在第一个实例中被转义，但在第二个实例中没有。\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br")])]),n("p",[n("strong",[e._v("切勿将未经处理的用户输入传给此函数。 任何包含 shell 元字符的输入都可用于触发任意命令执行。")])]),e._v(" "),n("p",[e._v("如果提供了 "),n("code",[e._v("callback")]),e._v(" 函数，则使用参数 "),n("code",[e._v("(error, stdout, stderr)")]),e._v(" 调用它。 成功后，"),n("code",[e._v("error")]),e._v(" 将是 "),n("code",[e._v("null")]),e._v("。 出错时，"),n("code",[e._v("error")]),e._v(" 将是 "),n("a",{attrs:{href:"http://nodejs.cn/api-v12/errors.html#errors_class_error",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("Error")]),n("OutboundLink")],1),e._v(" 的实例。 "),n("code",[e._v("error.code")]),e._v(" 属性将是进程的退出码。 按照惯例，除 "),n("code",[e._v("0")]),e._v(" 之外的任何退出码都表示错误。 "),n("code",[e._v("error.signal")]),e._v(" 将是终止进程的信号。")]),e._v(" "),n("p",[e._v("传给回调的 "),n("code",[e._v("stdout")]),e._v(" 和 "),n("code",[e._v("stderr")]),e._v(" 参数将包含子进程的标准输出和标准错误的输出。 默认情况下，Node.js 会将输出解码为 UTF-8 并将字符串传给回调。 "),n("code",[e._v("encoding")]),e._v(" 选项可用于指定用于解码标准输出和标准错误的输出的字符编码。 如果 "),n("code",[e._v("encoding")]),e._v(" 是 "),n("code",[e._v("'buffer'")]),e._v(" 或无法识别的字符编码，则 "),n("code",[e._v("Buffer")]),e._v(" 对象将被传给回调。")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const { exec } = require('child_process');\nexec('cat *.js missing_file | wc -l', (error, stdout, stderr) => {\n  if (error) {\n    console.error(`exec error: ${error}`);\n    return;\n  }\n  console.log(`stdout: ${stdout}`);\n  console.error(`stderr: ${stderr}`);\n});\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br")])]),n("p",[e._v("如果 "),n("code",[e._v("timeout")]),e._v(" 大于 "),n("code",[e._v("0")]),e._v("，则如果子进程运行时间超过 "),n("code",[e._v("timeout")]),e._v(" 毫秒，父进程将发送由 "),n("code",[e._v("killSignal")]),e._v(" 属性（默认为 "),n("code",[e._v("'SIGTERM'")]),e._v("）标识的信号。")]),e._v(" "),n("p",[e._v("与 "),n("a",{attrs:{href:"http://url.nodejs.cn/rVeqwf",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("exec(3)")]),n("OutboundLink")],1),e._v(" POSIX 系统调用不同，"),n("code",[e._v("child_process.exec()")]),e._v(" 不替换现有进程，而是使用 shell 来执行命令。")]),e._v(" "),n("p",[e._v("如果此方法作为其 "),n("a",{attrs:{href:"http://nodejs.cn/api-v12/util.html#util_util_promisify_original",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("util.promisify()")]),n("OutboundLink")],1),e._v(" 版本被调用，则其将为具有 "),n("code",[e._v("stdout")]),e._v(" 和 "),n("code",[e._v("stderr")]),e._v(" 属性的 "),n("code",[e._v("Object")]),e._v(" 返回 "),n("code",[e._v("Promise")]),e._v("。 返回的 "),n("code",[e._v("ChildProcess")]),e._v(" 实例作为 "),n("code",[e._v("child")]),e._v(" 属性附加到 "),n("code",[e._v("Promise")]),e._v("。 如果出现错误（包括任何导致退出码不是 0 的错误），则将返回被拒绝的 promise，其具有与回调中给定相同的 "),n("code",[e._v("error")]),e._v(" 对象，但有两个额外的属性 "),n("code",[e._v("stdout")]),e._v(" 和 "),n("code",[e._v("stderr")]),e._v("。")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const util = require('util');\nconst exec = util.promisify(require('child_process').exec);\n\nasync function lsExample() {\n  const { stdout, stderr } = await exec('ls');\n  console.log('stdout:', stdout);\n  console.error('stderr:', stderr);\n}\nlsExample();\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br")])]),n("h4",{attrs:{id:"child-process-execfile-file-args-options-callback"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#child-process-execfile-file-args-options-callback"}},[e._v("#")]),e._v(" "),n("code",[e._v("child_process.execFile(file[, args][, options][, callback])")]),n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process.html#child_processexecfilefile-args-options-callback",target:"_blank",rel:"noopener noreferrer"}},[e._v("#"),n("OutboundLink")],1)]),e._v(" "),n("p",[n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process/child_process_execfile_file_args_options_callback.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("中英对照"),n("OutboundLink")],1)]),e._v(" "),n("ul",[n("li",[n("code",[e._v("file")]),e._v(" "),n("a",{attrs:{href:"http://url.nodejs.cn/9Tw2bK",target:"_blank",rel:"noopener noreferrer"}},[n("string",[n("OutboundLink")],1)],1),e._v(" 要运行的可执行文件的名称或路径。")]),e._v(" "),n("li",[n("code",[e._v("args")]),e._v(" "),n("a",{attrs:{href:"http://url.nodejs.cn/9Tw2bK",target:"_blank",rel:"noopener noreferrer"}},[e._v("<string[]>"),n("OutboundLink")],1),e._v(" 字符串参数列表。")]),e._v(" "),n("li",[n("code",[e._v("options")]),e._v(" "),n("a",{attrs:{href:"http://url.nodejs.cn/jzn6Ao",target:"_blank",rel:"noopener noreferrer"}},[n("Object",[n("OutboundLink")],1)],1),e._v(" "),n("ul",[n("li",[n("code",[e._v("cwd")]),e._v(" "),n("a",{attrs:{href:"http://url.nodejs.cn/9Tw2bK",target:"_blank",rel:"noopener noreferrer"}},[n("string",[n("OutboundLink")],1)],1),e._v(" 子进程的当前工作目录。")]),e._v(" "),n("li",[n("code",[e._v("env")]),e._v(" "),n("a",{attrs:{href:"http://url.nodejs.cn/jzn6Ao",target:"_blank",rel:"noopener noreferrer"}},[n("Object",[n("OutboundLink")],1)],1),e._v(" 环境变量键值对。 "),n("strong",[e._v("默认值:")]),e._v(" "),n("code",[e._v("process.env")]),e._v("。")]),e._v(" "),n("li",[n("code",[e._v("encoding")]),e._v(" "),n("a",{attrs:{href:"http://url.nodejs.cn/9Tw2bK",target:"_blank",rel:"noopener noreferrer"}},[n("string",[n("OutboundLink")],1)],1),e._v(" "),n("strong",[e._v("默认值:")]),e._v(" "),n("code",[e._v("'utf8'")])]),e._v(" "),n("li",[n("code",[e._v("timeout")]),e._v(" "),n("a",{attrs:{href:"http://url.nodejs.cn/SXbo1v",target:"_blank",rel:"noopener noreferrer"}},[n("number",[n("OutboundLink")],1)],1),e._v(" "),n("strong",[e._v("默认值:")]),e._v(" "),n("code",[e._v("0")])]),e._v(" "),n("li",[n("code",[e._v("maxBuffer")]),e._v(" "),n("a",{attrs:{href:"http://url.nodejs.cn/SXbo1v",target:"_blank",rel:"noopener noreferrer"}},[n("number",[n("OutboundLink")],1)],1),e._v(" 标准输出或标准错误上允许的最大数据量（以字节为单位）。 如果超过，则子进程将终止并截断任何输出。 请参阅 "),n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process.html#child_process_maxbuffer_and_unicode",target:"_blank",rel:"noopener noreferrer"}},[e._v("maxBuffer 和 Unicode"),n("OutboundLink")],1),e._v(" 的注意事项。 "),n("strong",[e._v("默认值:")]),e._v(" "),n("code",[e._v("1024 * 1024")]),e._v("。")]),e._v(" "),n("li",[n("code",[e._v("killSignal")]),e._v(" "),n("a",{attrs:{href:"http://url.nodejs.cn/9Tw2bK",target:"_blank",rel:"noopener noreferrer"}},[n("string",[n("OutboundLink")],1)],1),e._v(" | "),n("a",{attrs:{href:"http://url.nodejs.cn/SXbo1v",target:"_blank",rel:"noopener noreferrer"}},[n("integer",[n("OutboundLink")],1)],1),e._v(" "),n("strong",[e._v("默认值:")]),e._v(" "),n("code",[e._v("'SIGTERM'")])]),e._v(" "),n("li",[n("code",[e._v("uid")]),e._v(" "),n("a",{attrs:{href:"http://url.nodejs.cn/SXbo1v",target:"_blank",rel:"noopener noreferrer"}},[n("number",[n("OutboundLink")],1)],1),e._v(" 设置进程的用户标识（参见 "),n("a",{attrs:{href:"http://url.nodejs.cn/bUGgha",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("setuid(2)")]),n("OutboundLink")],1),e._v("）。")]),e._v(" "),n("li",[n("code",[e._v("gid")]),e._v(" "),n("a",{attrs:{href:"http://url.nodejs.cn/SXbo1v",target:"_blank",rel:"noopener noreferrer"}},[n("number",[n("OutboundLink")],1)],1),e._v(" 设置进程的群组标识（参见 "),n("a",{attrs:{href:"http://url.nodejs.cn/64HRVx",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("setgid(2)")]),n("OutboundLink")],1),e._v("）。")]),e._v(" "),n("li",[n("code",[e._v("windowsHide")]),e._v(" "),n("a",{attrs:{href:"http://url.nodejs.cn/jFbvuT",target:"_blank",rel:"noopener noreferrer"}},[n("boolean",[n("OutboundLink")],1)],1),e._v(" 隐藏通常在 Windows 系统上创建的子进程控制台窗口。 "),n("strong",[e._v("默认值:")]),e._v(" "),n("code",[e._v("false")]),e._v("。")]),e._v(" "),n("li",[n("code",[e._v("windowsVerbatimArguments")]),e._v(" "),n("a",{attrs:{href:"http://url.nodejs.cn/jFbvuT",target:"_blank",rel:"noopener noreferrer"}},[n("boolean",[n("OutboundLink")],1)],1),e._v(" 在 Windows 上不为参数加上引号或转义。 在 Unix 上被忽略。 "),n("strong",[e._v("默认值:")]),e._v(" "),n("code",[e._v("false")]),e._v("。")]),e._v(" "),n("li",[n("code",[e._v("shell")]),e._v(" "),n("a",{attrs:{href:"http://url.nodejs.cn/jFbvuT",target:"_blank",rel:"noopener noreferrer"}},[n("boolean",[n("OutboundLink")],1)],1),e._v(" | "),n("a",{attrs:{href:"http://url.nodejs.cn/9Tw2bK",target:"_blank",rel:"noopener noreferrer"}},[n("string",[n("OutboundLink")],1)],1),e._v(" 如果是 "),n("code",[e._v("true")]),e._v("，则在 shell 内运行 "),n("code",[e._v("command")]),e._v("。 在 Unix 上使用 "),n("code",[e._v("'/bin/sh'")]),e._v("，在 Windows 上使用 "),n("code",[e._v("process.env.ComSpec")]),e._v("。 可以将不同的 shell 指定为字符串。 请参阅 "),n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process.html#child_process_shell_requirements",target:"_blank",rel:"noopener noreferrer"}},[e._v("shell 的要求"),n("OutboundLink")],1),e._v("和"),n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process.html#child_process_default_windows_shell",target:"_blank",rel:"noopener noreferrer"}},[e._v("默认的 Windows shell"),n("OutboundLink")],1),e._v("。 "),n("strong",[e._v("默认值:")]),e._v(" "),n("code",[e._v("false")]),e._v(" （没有 shell）")])])]),e._v(" "),n("li",[n("code",[e._v("callback")]),e._v(" "),n("a",{attrs:{href:"http://url.nodejs.cn/ceTQa6",target:"_blank",rel:"noopener noreferrer"}},[n("Function",[n("OutboundLink")],1)],1),e._v(" 进程终止时使用输出调用。\n"),n("ul",[n("li",[n("code",[e._v("error")]),e._v(" "),n("a",{attrs:{href:"http://url.nodejs.cn/qZ873x",target:"_blank",rel:"noopener noreferrer"}},[n("Error",[n("OutboundLink")],1)],1)]),e._v(" "),n("li",[n("code",[e._v("stdout")]),e._v(" "),n("a",{attrs:{href:"http://url.nodejs.cn/9Tw2bK",target:"_blank",rel:"noopener noreferrer"}},[n("string",[n("OutboundLink")],1)],1),e._v(" | "),n("a",{attrs:{href:"http://nodejs.cn/api/buffer.html#class-buffer",target:"_blank",rel:"noopener noreferrer"}},[n("Buffer",[n("OutboundLink")],1)],1)]),e._v(" "),n("li",[n("code",[e._v("stderr")]),e._v(" "),n("a",{attrs:{href:"http://url.nodejs.cn/9Tw2bK",target:"_blank",rel:"noopener noreferrer"}},[n("string",[n("OutboundLink")],1)],1),e._v(" | "),n("a",{attrs:{href:"http://nodejs.cn/api/buffer.html#class-buffer",target:"_blank",rel:"noopener noreferrer"}},[n("Buffer",[n("OutboundLink")],1)],1)])])]),e._v(" "),n("li",[e._v("返回: "),n("a",{attrs:{href:"http://nodejs.cn/api/child_process.html#class-childprocess",target:"_blank",rel:"noopener noreferrer"}},[n("ChildProcess",[n("OutboundLink")],1)],1)])]),e._v(" "),n("p",[n("code",[e._v("child_process.execFile()")]),e._v(" 函数与 "),n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process.html#child_process_child_process_exec_command_options_callback",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("child_process.exec()")]),n("OutboundLink")],1),e._v(" 类似，不同之处在于它默认不衍生 shell。 而是，指定的可执行文件 "),n("code",[e._v("file")]),e._v(" 直接作为新进程衍生，使其比 "),n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process.html#child_process_child_process_exec_command_options_callback",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("child_process.exec()")]),n("OutboundLink")],1),e._v(" 略有效率。")]),e._v(" "),n("p",[e._v("支持与 "),n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process.html#child_process_child_process_exec_command_options_callback",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("child_process.exec()")]),n("OutboundLink")],1),e._v(" 相同的选项。 由于未衍生 shell，因此不支持 I/O 重定向和文件通配等行为。")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const { execFile } = require('child_process');\nconst child = execFile('node', ['--version'], (error, stdout, stderr) => {\n  if (error) {\n    throw error;\n  }\n  console.log(stdout);\n});\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br")])]),n("p",[e._v("传给回调的 "),n("code",[e._v("stdout")]),e._v(" 和 "),n("code",[e._v("stderr")]),e._v(" 参数将包含子进程的标准输出和标准错误的输出。 默认情况下，Node.js 会将输出解码为 UTF-8 并将字符串传给回调。 "),n("code",[e._v("encoding")]),e._v(" 选项可用于指定用于解码标准输出和标准错误的输出的字符编码。 如果 "),n("code",[e._v("encoding")]),e._v(" 是 "),n("code",[e._v("'buffer'")]),e._v(" 或无法识别的字符编码，则 "),n("code",[e._v("Buffer")]),e._v(" 对象将被传给回调。")]),e._v(" "),n("p",[e._v("如果此方法作为其 "),n("a",{attrs:{href:"http://nodejs.cn/api-v12/util.html#util_util_promisify_original",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("util.promisify()")]),n("OutboundLink")],1),e._v(" 版本被调用，则其将为具有 "),n("code",[e._v("stdout")]),e._v(" 和 "),n("code",[e._v("stderr")]),e._v(" 属性的 "),n("code",[e._v("Object")]),e._v(" 返回 "),n("code",[e._v("Promise")]),e._v("。 返回的 "),n("code",[e._v("ChildProcess")]),e._v(" 实例作为 "),n("code",[e._v("child")]),e._v(" 属性附加到 "),n("code",[e._v("Promise")]),e._v("。 如果出现错误（包括任何导致退出码不是 0 的错误），则将返回被拒绝的 promise，其具有与回调中给定相同的 "),n("code",[e._v("error")]),e._v(" 对象，但有两个额外的属性 "),n("code",[e._v("stdout")]),e._v(" 和 "),n("code",[e._v("stderr")]),e._v("。")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const util = require('util');\nconst execFile = util.promisify(require('child_process').execFile);\nasync function getVersion() {\n  const { stdout } = await execFile('node', ['--version']);\n  console.log(stdout);\n}\ngetVersion();\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br")])]),n("p",[n("strong",[e._v("如果启用了 "),n("code",[e._v("shell")]),e._v(" 选项，则请勿将未经处理的用户输入传递给此函数。 任何包含 shell 元字符的输入都可用于触发任意命令执行。")])]),e._v(" "),n("h4",{attrs:{id:"child-process-fork-modulepath-args-options"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#child-process-fork-modulepath-args-options"}},[e._v("#")]),e._v(" "),n("code",[e._v("child_process.fork(modulePath[, args][, options])")]),n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process.html#child_processforkmodulepath-args-options",target:"_blank",rel:"noopener noreferrer"}},[e._v("#"),n("OutboundLink")],1)]),e._v(" "),n("p",[n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process/child_process_fork_modulepath_args_options.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("中英对照"),n("OutboundLink")],1)]),e._v(" "),n("ul",[n("li",[n("code",[e._v("modulePath")]),e._v(" "),n("a",{attrs:{href:"http://url.nodejs.cn/9Tw2bK",target:"_blank",rel:"noopener noreferrer"}},[n("string",[n("OutboundLink")],1)],1),e._v(" 要在子进程中运行的模块。")]),e._v(" "),n("li",[n("code",[e._v("args")]),e._v(" "),n("a",{attrs:{href:"http://url.nodejs.cn/9Tw2bK",target:"_blank",rel:"noopener noreferrer"}},[e._v("<string[]>"),n("OutboundLink")],1),e._v(" 字符串参数列表。")]),e._v(" "),n("li",[n("code",[e._v("options")]),e._v(" "),n("a",{attrs:{href:"http://url.nodejs.cn/jzn6Ao",target:"_blank",rel:"noopener noreferrer"}},[n("Object",[n("OutboundLink")],1)],1),e._v(" "),n("ul",[n("li",[n("code",[e._v("cwd")]),e._v(" "),n("a",{attrs:{href:"http://url.nodejs.cn/9Tw2bK",target:"_blank",rel:"noopener noreferrer"}},[n("string",[n("OutboundLink")],1)],1),e._v(" 子进程的当前工作目录。")]),e._v(" "),n("li",[n("code",[e._v("detached")]),e._v(" "),n("a",{attrs:{href:"http://url.nodejs.cn/jFbvuT",target:"_blank",rel:"noopener noreferrer"}},[n("boolean",[n("OutboundLink")],1)],1),e._v(" 准备子进程独立于其父进程运行。 具体行为取决于平台，参见 "),n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process.html#child_process_options_detached",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("options.detached")]),n("OutboundLink")],1),e._v("。")]),e._v(" "),n("li",[n("code",[e._v("env")]),e._v(" "),n("a",{attrs:{href:"http://url.nodejs.cn/jzn6Ao",target:"_blank",rel:"noopener noreferrer"}},[n("Object",[n("OutboundLink")],1)],1),e._v(" 环境变量键值对。 "),n("strong",[e._v("默认值:")]),e._v(" "),n("code",[e._v("process.env")]),e._v("。")]),e._v(" "),n("li",[n("code",[e._v("execPath")]),e._v(" "),n("a",{attrs:{href:"http://url.nodejs.cn/9Tw2bK",target:"_blank",rel:"noopener noreferrer"}},[n("string",[n("OutboundLink")],1)],1),e._v(" 用于创建子进程的可执行文件。")]),e._v(" "),n("li",[n("code",[e._v("execArgv")]),e._v(" "),n("a",{attrs:{href:"http://url.nodejs.cn/9Tw2bK",target:"_blank",rel:"noopener noreferrer"}},[e._v("<string[]>"),n("OutboundLink")],1),e._v(" 传给可执行文件的字符串参数列表。 "),n("strong",[e._v("默认值:")]),e._v(" "),n("code",[e._v("process.execArgv")]),e._v("。")]),e._v(" "),n("li",[n("code",[e._v("serialization")]),e._v(" "),n("a",{attrs:{href:"http://url.nodejs.cn/9Tw2bK",target:"_blank",rel:"noopener noreferrer"}},[n("string",[n("OutboundLink")],1)],1),e._v(" 指定用于在进程之间发送消息的序列化类型。 可能的值为 "),n("code",[e._v("'json'")]),e._v(" 和 "),n("code",[e._v("'advanced'")]),e._v("。 有关更多详细信息，请参阅"),n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process.html#child_process_advanced_serialization",target:"_blank",rel:"noopener noreferrer"}},[e._v("高级序列化"),n("OutboundLink")],1),e._v("。 "),n("strong",[e._v("默认值:")]),e._v(" "),n("code",[e._v("'json'")]),e._v("。")]),e._v(" "),n("li",[n("code",[e._v("silent")]),e._v(" "),n("a",{attrs:{href:"http://url.nodejs.cn/jFbvuT",target:"_blank",rel:"noopener noreferrer"}},[n("boolean",[n("OutboundLink")],1)],1),e._v(" 如果为 "),n("code",[e._v("true")]),e._v("，则子进程的标准输入、标准输出和标准错误将通过管道传输到父进程，否则它们将从父进程继承，有关详细信息，请参阅 "),n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process.html#child_process_child_process_spawn_command_args_options",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("child_process.spawn()")]),n("OutboundLink")],1),e._v(" 的 "),n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process.html#child_process_options_stdio",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("stdio")]),n("OutboundLink")],1),e._v(" 的 "),n("code",[e._v("'pipe'")]),e._v(" 和 "),n("code",[e._v("'inherit'")]),e._v(" 选项。 "),n("strong",[e._v("默认值:")]),e._v(" "),n("code",[e._v("false")]),e._v("。")]),e._v(" "),n("li",[n("code",[e._v("stdio")]),e._v(" "),n("a",{attrs:{href:"http://url.nodejs.cn/ZJSz23",target:"_blank",rel:"noopener noreferrer"}},[n("Array",[n("OutboundLink")],1)],1),e._v(" | "),n("a",{attrs:{href:"http://url.nodejs.cn/9Tw2bK",target:"_blank",rel:"noopener noreferrer"}},[n("string",[n("OutboundLink")],1)],1),e._v(" 参见 "),n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process.html#child_process_child_process_spawn_command_args_options",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("child_process.spawn()")]),n("OutboundLink")],1),e._v(" 的 "),n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process.html#child_process_options_stdio",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("stdio")]),n("OutboundLink")],1),e._v("。 提供此选项时，它会覆盖 "),n("code",[e._v("silent")]),e._v("。 如果使用数组变体，则它必须恰好包含一个值为 "),n("code",[e._v("'ipc'")]),e._v(" 的条目，否则将抛出错误。 例如 "),n("code",[e._v("[0, 1, 2, 'ipc']")]),e._v("。")]),e._v(" "),n("li",[n("code",[e._v("windowsVerbatimArguments")]),e._v(" "),n("a",{attrs:{href:"http://url.nodejs.cn/jFbvuT",target:"_blank",rel:"noopener noreferrer"}},[n("boolean",[n("OutboundLink")],1)],1),e._v(" 在 Windows 上不为参数加上引号或转义。 在 Unix 上被忽略。 "),n("strong",[e._v("默认值:")]),e._v(" "),n("code",[e._v("false")]),e._v("。")]),e._v(" "),n("li",[n("code",[e._v("uid")]),e._v(" "),n("a",{attrs:{href:"http://url.nodejs.cn/SXbo1v",target:"_blank",rel:"noopener noreferrer"}},[n("number",[n("OutboundLink")],1)],1),e._v(" 设置进程的用户标识（参见 "),n("a",{attrs:{href:"http://url.nodejs.cn/bUGgha",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("setuid(2)")]),n("OutboundLink")],1),e._v("）。")]),e._v(" "),n("li",[n("code",[e._v("gid")]),e._v(" "),n("a",{attrs:{href:"http://url.nodejs.cn/SXbo1v",target:"_blank",rel:"noopener noreferrer"}},[n("number",[n("OutboundLink")],1)],1),e._v(" 设置进程的群组标识（参见 "),n("a",{attrs:{href:"http://url.nodejs.cn/64HRVx",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("setgid(2)")]),n("OutboundLink")],1),e._v("）。")])])]),e._v(" "),n("li",[e._v("返回: "),n("a",{attrs:{href:"http://nodejs.cn/api/child_process.html#class-childprocess",target:"_blank",rel:"noopener noreferrer"}},[n("ChildProcess",[n("OutboundLink")],1)],1)])]),e._v(" "),n("p",[n("code",[e._v("child_process.fork()")]),e._v(" 方法是 "),n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process.html#child_process_child_process_spawn_command_args_options",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("child_process.spawn()")]),n("OutboundLink")],1),e._v(" 的特例，专门用于衍生新的 Node.js 进程。 与 "),n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process.html#child_process_child_process_spawn_command_args_options",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("child_process.spawn()")]),n("OutboundLink")],1),e._v(" 一样，返回 "),n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process.html#child_process_child_process",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("ChildProcess")]),n("OutboundLink")],1),e._v(" 对象。 返回的 "),n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process.html#child_process_child_process",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("ChildProcess")]),n("OutboundLink")],1),e._v(" 将有额外的内置通信通道，允许消息在父进程和子进程之间来回传递。 详见 "),n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process.html#child_process_subprocess_send_message_sendhandle_options_callback",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("subprocess.send()")]),n("OutboundLink")],1),e._v("。")]),e._v(" "),n("p",[e._v("请记住，衍生的 Node.js 子进程独立于父进程，除了两者之间建立的 IPC 通信通道。 每个进程都有自己的内存，具有自己的 V8 实例。 由于需要额外的资源分配，不建议衍生大量子 Node.js 进程。")]),e._v(" "),n("p",[e._v("默认情况下，"),n("code",[e._v("child_process.fork()")]),e._v(" 将使用父进程的 "),n("a",{attrs:{href:"http://nodejs.cn/api-v12/process.html#process_process_execpath",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("process.execPath")]),n("OutboundLink")],1),e._v(" 衍生新的 Node.js 实例。 "),n("code",[e._v("options")]),e._v(" 对象中的 "),n("code",[e._v("execPath")]),e._v(" 属性允许使用替代的执行路径。")]),e._v(" "),n("p",[e._v("使用自定义 "),n("code",[e._v("execPath")]),e._v(" 启动的 Node.js 进程将使用在子进程上使用环境变量 "),n("code",[e._v("NODE_CHANNEL_FD")]),e._v(" 标识的文件描述符与父进程通信。")]),e._v(" "),n("p",[e._v("与 "),n("a",{attrs:{href:"http://url.nodejs.cn/mbvoBz",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("fork(2)")]),n("OutboundLink")],1),e._v(" POSIX 系统调用不同，"),n("code",[e._v("child_process.fork()")]),e._v(" 不克隆当前进程。")]),e._v(" "),n("p",[n("code",[e._v("child_process.fork()")]),e._v(" 不支持 "),n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process.html#child_process_child_process_spawn_command_args_options",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("child_process.spawn()")]),n("OutboundLink")],1),e._v(" 中可用的 "),n("code",[e._v("shell")]),e._v(" 选项，如果设置将被忽略。")]),e._v(" "),n("h4",{attrs:{id:"child-process-spawn-command-args-options"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#child-process-spawn-command-args-options"}},[e._v("#")]),e._v(" "),n("code",[e._v("child_process.spawn(command[, args][, options])")]),n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process.html#child_processspawncommand-args-options",target:"_blank",rel:"noopener noreferrer"}},[e._v("#"),n("OutboundLink")],1)]),e._v(" "),n("p",[n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process/child_process_spawn_command_args_options.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("中英对照"),n("OutboundLink")],1)]),e._v(" "),n("ul",[n("li",[n("code",[e._v("command")]),e._v(" "),n("a",{attrs:{href:"http://url.nodejs.cn/9Tw2bK",target:"_blank",rel:"noopener noreferrer"}},[n("string",[n("OutboundLink")],1)],1),e._v(" 要运行的命令。")]),e._v(" "),n("li",[n("code",[e._v("args")]),e._v(" "),n("a",{attrs:{href:"http://url.nodejs.cn/9Tw2bK",target:"_blank",rel:"noopener noreferrer"}},[e._v("<string[]>"),n("OutboundLink")],1),e._v(" 字符串参数列表。")]),e._v(" "),n("li",[n("code",[e._v("options")]),e._v(" "),n("a",{attrs:{href:"http://url.nodejs.cn/jzn6Ao",target:"_blank",rel:"noopener noreferrer"}},[n("Object",[n("OutboundLink")],1)],1),e._v(" "),n("ul",[n("li",[n("code",[e._v("cwd")]),e._v(" "),n("a",{attrs:{href:"http://url.nodejs.cn/9Tw2bK",target:"_blank",rel:"noopener noreferrer"}},[n("string",[n("OutboundLink")],1)],1),e._v(" 子进程的当前工作目录。")]),e._v(" "),n("li",[n("code",[e._v("env")]),e._v(" "),n("a",{attrs:{href:"http://url.nodejs.cn/jzn6Ao",target:"_blank",rel:"noopener noreferrer"}},[n("Object",[n("OutboundLink")],1)],1),e._v(" 环境变量键值对。 "),n("strong",[e._v("默认值:")]),e._v(" "),n("code",[e._v("process.env")]),e._v("。")]),e._v(" "),n("li",[n("code",[e._v("argv0")]),e._v(" "),n("a",{attrs:{href:"http://url.nodejs.cn/9Tw2bK",target:"_blank",rel:"noopener noreferrer"}},[n("string",[n("OutboundLink")],1)],1),e._v(" 显式设置发送给子进程的 "),n("code",[e._v("argv[0]")]),e._v(" 的值。 如果未指定，这将设置为 "),n("code",[e._v("command")]),e._v("。")]),e._v(" "),n("li",[n("code",[e._v("stdio")]),e._v(" "),n("a",{attrs:{href:"http://url.nodejs.cn/ZJSz23",target:"_blank",rel:"noopener noreferrer"}},[n("Array",[n("OutboundLink")],1)],1),e._v(" | "),n("a",{attrs:{href:"http://url.nodejs.cn/9Tw2bK",target:"_blank",rel:"noopener noreferrer"}},[n("string",[n("OutboundLink")],1)],1),e._v(" 子进程的标准输入输出配置（参见 "),n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process.html#child_process_options_stdio",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("options.stdio")]),n("OutboundLink")],1),e._v("）。")]),e._v(" "),n("li",[n("code",[e._v("detached")]),e._v(" "),n("a",{attrs:{href:"http://url.nodejs.cn/jFbvuT",target:"_blank",rel:"noopener noreferrer"}},[n("boolean",[n("OutboundLink")],1)],1),e._v(" 准备子进程独立于其父进程运行。 具体行为取决于平台，参见 "),n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process.html#child_process_options_detached",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("options.detached")]),n("OutboundLink")],1),e._v("。")]),e._v(" "),n("li",[n("code",[e._v("uid")]),e._v(" "),n("a",{attrs:{href:"http://url.nodejs.cn/SXbo1v",target:"_blank",rel:"noopener noreferrer"}},[n("number",[n("OutboundLink")],1)],1),e._v(" 设置进程的用户标识（参见 "),n("a",{attrs:{href:"http://url.nodejs.cn/bUGgha",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("setuid(2)")]),n("OutboundLink")],1),e._v("）。")]),e._v(" "),n("li",[n("code",[e._v("gid")]),e._v(" "),n("a",{attrs:{href:"http://url.nodejs.cn/SXbo1v",target:"_blank",rel:"noopener noreferrer"}},[n("number",[n("OutboundLink")],1)],1),e._v(" 设置进程的群组标识（参见 "),n("a",{attrs:{href:"http://url.nodejs.cn/64HRVx",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("setgid(2)")]),n("OutboundLink")],1),e._v("）。")]),e._v(" "),n("li",[n("code",[e._v("serialization")]),e._v(" "),n("a",{attrs:{href:"http://url.nodejs.cn/9Tw2bK",target:"_blank",rel:"noopener noreferrer"}},[n("string",[n("OutboundLink")],1)],1),e._v(" 指定用于在进程之间发送消息的序列化类型。 可能的值为 "),n("code",[e._v("'json'")]),e._v(" 和 "),n("code",[e._v("'advanced'")]),e._v("。 有关更多详细信息，请参阅"),n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process.html#child_process_advanced_serialization",target:"_blank",rel:"noopener noreferrer"}},[e._v("高级序列化"),n("OutboundLink")],1),e._v("。 "),n("strong",[e._v("默认值:")]),e._v(" "),n("code",[e._v("'json'")]),e._v("。")]),e._v(" "),n("li",[n("code",[e._v("shell")]),e._v(" "),n("a",{attrs:{href:"http://url.nodejs.cn/jFbvuT",target:"_blank",rel:"noopener noreferrer"}},[n("boolean",[n("OutboundLink")],1)],1),e._v(" | "),n("a",{attrs:{href:"http://url.nodejs.cn/9Tw2bK",target:"_blank",rel:"noopener noreferrer"}},[n("string",[n("OutboundLink")],1)],1),e._v(" 如果是 "),n("code",[e._v("true")]),e._v("，则在 shell 内运行 "),n("code",[e._v("command")]),e._v("。 在 Unix 上使用 "),n("code",[e._v("'/bin/sh'")]),e._v("，在 Windows 上使用 "),n("code",[e._v("process.env.ComSpec")]),e._v("。 可以将不同的 shell 指定为字符串。 请参阅 "),n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process.html#child_process_shell_requirements",target:"_blank",rel:"noopener noreferrer"}},[e._v("shell 的要求"),n("OutboundLink")],1),e._v("和"),n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process.html#child_process_default_windows_shell",target:"_blank",rel:"noopener noreferrer"}},[e._v("默认的 Windows shell"),n("OutboundLink")],1),e._v("。 "),n("strong",[e._v("默认值:")]),e._v(" "),n("code",[e._v("false")]),e._v(" （没有 shell）")]),e._v(" "),n("li",[n("code",[e._v("windowsVerbatimArguments")]),e._v(" "),n("a",{attrs:{href:"http://url.nodejs.cn/jFbvuT",target:"_blank",rel:"noopener noreferrer"}},[n("boolean",[n("OutboundLink")],1)],1),e._v(" 在 Windows 上不为参数加上引号或转义。 在 Unix 上被忽略。 当指定了 "),n("code",[e._v("shell")]),e._v(" 并且是 CMD 时，则自动设置为 "),n("code",[e._v("true")]),e._v("。 "),n("strong",[e._v("默认值:")]),e._v(" "),n("code",[e._v("false")]),e._v("。")]),e._v(" "),n("li",[n("code",[e._v("windowsHide")]),e._v(" "),n("a",{attrs:{href:"http://url.nodejs.cn/jFbvuT",target:"_blank",rel:"noopener noreferrer"}},[n("boolean",[n("OutboundLink")],1)],1),e._v(" 隐藏通常在 Windows 系统上创建的子进程控制台窗口。 "),n("strong",[e._v("默认值:")]),e._v(" "),n("code",[e._v("false")]),e._v("。")])])]),e._v(" "),n("li",[e._v("返回: "),n("a",{attrs:{href:"http://nodejs.cn/api/child_process.html#class-childprocess",target:"_blank",rel:"noopener noreferrer"}},[n("ChildProcess",[n("OutboundLink")],1)],1)])]),e._v(" "),n("p",[e._v("如果省略，"),n("code",[e._v("args")]),e._v(" 默认为空数组。")]),e._v(" "),n("p",[n("strong",[e._v("如果启用了 "),n("code",[e._v("shell")]),e._v(" 选项，则请勿将未经处理的用户输入传递给此函数。 任何包含 shell 元字符的输入都可用于触发任意命令执行。")])]),e._v(" "),n("p",[e._v("第三个参数可用于指定其他选项，具有以下默认值：")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const defaults = {\n  cwd: undefined,\n  env: process.env\n};\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br")])]),n("p",[e._v("使用 "),n("code",[e._v("cwd")]),e._v(" 指定从中衍生进程的工作目录。 如果没有给定，则默认是继承当前工作目录。")]),e._v(" "),n("p",[e._v("使用 "),n("code",[e._v("env")]),e._v(" 指定对新进程可见的环境变量，默认为 "),n("a",{attrs:{href:"http://nodejs.cn/api-v12/process.html#process_process_env",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("process.env")]),n("OutboundLink")],1),e._v("。")]),e._v(" "),n("p",[n("code",[e._v("env")]),e._v(" 中的 "),n("code",[e._v("undefined")]),e._v(" 值将被忽略。")]),e._v(" "),n("p",[e._v("运行 "),n("code",[e._v("ls -lh /usr")]),e._v("、捕获 "),n("code",[e._v("stdout")]),e._v("、"),n("code",[e._v("stderr")]),e._v(" 和退出码的示例：")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const { spawn } = require('child_process');\nconst ls = spawn('ls', ['-lh', '/usr']);\n\nls.stdout.on('data', (data) => {\n  console.log(`stdout: ${data}`);\n});\n\nls.stderr.on('data', (data) => {\n  console.error(`stderr: ${data}`);\n});\n\nls.on('close', (code) => {\n  console.log(`child process exited with code ${code}`);\n});\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br")])]),n("p",[e._v("示例：一种非常精细的运行 "),n("code",[e._v("ps ax | grep ssh")]),e._v(" 的方式")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const { spawn } = require('child_process');\nconst ps = spawn('ps', ['ax']);\nconst grep = spawn('grep', ['ssh']);\n\nps.stdout.on('data', (data) => {\n  grep.stdin.write(data);\n});\n\nps.stderr.on('data', (data) => {\n  console.error(`ps stderr: ${data}`);\n});\n\nps.on('close', (code) => {\n  if (code !== 0) {\n    console.log(`ps process exited with code ${code}`);\n  }\n  grep.stdin.end();\n});\n\ngrep.stdout.on('data', (data) => {\n  console.log(data.toString());\n});\n\ngrep.stderr.on('data', (data) => {\n  console.error(`grep stderr: ${data}`);\n});\n\ngrep.on('close', (code) => {\n  if (code !== 0) {\n    console.log(`grep process exited with code ${code}`);\n  }\n});\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br"),n("span",{staticClass:"line-number"},[e._v("17")]),n("br"),n("span",{staticClass:"line-number"},[e._v("18")]),n("br"),n("span",{staticClass:"line-number"},[e._v("19")]),n("br"),n("span",{staticClass:"line-number"},[e._v("20")]),n("br"),n("span",{staticClass:"line-number"},[e._v("21")]),n("br"),n("span",{staticClass:"line-number"},[e._v("22")]),n("br"),n("span",{staticClass:"line-number"},[e._v("23")]),n("br"),n("span",{staticClass:"line-number"},[e._v("24")]),n("br"),n("span",{staticClass:"line-number"},[e._v("25")]),n("br"),n("span",{staticClass:"line-number"},[e._v("26")]),n("br"),n("span",{staticClass:"line-number"},[e._v("27")]),n("br"),n("span",{staticClass:"line-number"},[e._v("28")]),n("br"),n("span",{staticClass:"line-number"},[e._v("29")]),n("br"),n("span",{staticClass:"line-number"},[e._v("30")]),n("br"),n("span",{staticClass:"line-number"},[e._v("31")]),n("br"),n("span",{staticClass:"line-number"},[e._v("32")]),n("br")])]),n("p",[e._v("检查失败 "),n("code",[e._v("spawn")]),e._v(" 的示例：")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const { spawn } = require('child_process');\nconst subprocess = spawn('bad_command');\n\nsubprocess.on('error', (err) => {\n  console.error('Failed to start subprocess.');\n});\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br")])]),n("p",[e._v("某些平台（macOS、Linux）将使用 "),n("code",[e._v("argv[0]")]),e._v(" 的值作为进程标题，而其他平台（Windows、SunOS）将使用 "),n("code",[e._v("command")]),e._v("。")]),e._v(" "),n("p",[e._v("Node.js 当前在启动时用 "),n("code",[e._v("process.execPath")]),e._v(" 覆盖 "),n("code",[e._v("argv[0]")]),e._v("，因此 Node.js 子进程中的 "),n("code",[e._v("process.argv[0]")]),e._v(" 将不匹配从父进程传给 "),n("code",[e._v("spawn")]),e._v(" 的 "),n("code",[e._v("argv0")]),e._v(" 参数，而是使用 "),n("code",[e._v("process.argv0")]),e._v(" 属性检索它。")]),e._v(" "),n("h5",{attrs:{id:"options-detached"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#options-detached"}},[e._v("#")]),e._v(" "),n("code",[e._v("options.detached")]),n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process.html#optionsdetached",target:"_blank",rel:"noopener noreferrer"}},[e._v("#"),n("OutboundLink")],1)]),e._v(" "),n("p",[n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process/options_detached.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("中英对照"),n("OutboundLink")],1)]),e._v(" "),n("p",[e._v("新增于: v0.7.10")]),e._v(" "),n("p",[e._v("在 Windows 上，将 "),n("code",[e._v("options.detached")]),e._v(" 设置为 "),n("code",[e._v("true")]),e._v(" 可以让子进程在父进程退出后继续运行。 子进程将有自己的控制台窗口。 一旦为子进程启用，则它就不能被禁用。")]),e._v(" "),n("p",[e._v("在非 Windows 平台上，如果 "),n("code",[e._v("options.detached")]),e._v(" 设置为 "),n("code",[e._v("true")]),e._v("，则子进程将成为新进程组和会话的领导者。 子进程可以在父进程退出后继续运行，不管它们是否分离。 有关详细信息，请参阅 "),n("a",{attrs:{href:"http://url.nodejs.cn/sJk7DY",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("setsid(2)")]),n("OutboundLink")],1),e._v("。")]),e._v(" "),n("p",[e._v("默认情况下，父进程将等待分离的子进程退出。 为了防止父进程等待给定的 "),n("code",[e._v("subprocess")]),e._v(" 退出，则使用 "),n("code",[e._v("subprocess.unref()")]),e._v(" 方法。 这样做会使父进程的事件循环不将子进程包括在其引用计数中，从而允许父进程独立于子进程退出，除非在子进程和父进程之间建立了 IPC 通道。")]),e._v(" "),n("p",[e._v("当使用 "),n("code",[e._v("detached")]),e._v(" 选项启动长时间运行的进程时，进程在父进程退出后不会一直在后台运行，除非提供了未连接到父进程的 "),n("code",[e._v("stdio")]),e._v(" 配置。 如果继承了父进程的 "),n("code",[e._v("stdio")]),e._v("，则子进程将保持与控制终端的连接。")]),e._v(" "),n("p",[e._v("长时间运行的进程的示例，通过分离并忽略其父进程的 "),n("code",[e._v("stdio")]),e._v(" 文件描述符，以忽略父进程的终止：")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const { spawn } = require('child_process');\n\nconst subprocess = spawn(process.argv[0], ['child_program.js'], {\n  detached: true,\n  stdio: 'ignore'\n});\n\nsubprocess.unref();\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br")])]),n("p",[e._v("或者，可以将子进程的输出重定向到文件中：")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const fs = require('fs');\nconst { spawn } = require('child_process');\nconst out = fs.openSync('./out.log', 'a');\nconst err = fs.openSync('./out.log', 'a');\n\nconst subprocess = spawn('prg', [], {\n  detached: true,\n  stdio: [ 'ignore', out, err ]\n});\n\nsubprocess.unref();\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br")])]),n("h5",{attrs:{id:"options-stdio"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#options-stdio"}},[e._v("#")]),e._v(" "),n("code",[e._v("options.stdio")]),n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process.html#optionsstdio",target:"_blank",rel:"noopener noreferrer"}},[e._v("#"),n("OutboundLink")],1)]),e._v(" "),n("p",[n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process/options_stdio.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("中英对照"),n("OutboundLink")],1)]),e._v(" "),n("p",[n("code",[e._v("options.stdio")]),e._v(" 选项用于配置在父进程和子进程之间建立的管道。 默认情况下，子进程的标准输入、标准输出和标准错误被重定向到 "),n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process.html#child_process_child_process",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("ChildProcess")]),n("OutboundLink")],1),e._v(" 对象上相应的 "),n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process.html#child_process_subprocess_stdin",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("subprocess.stdin")]),n("OutboundLink")],1),e._v("、"),n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process.html#child_process_subprocess_stdout",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("subprocess.stdout")]),n("OutboundLink")],1),e._v(" 和 "),n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process.html#child_process_subprocess_stderr",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("subprocess.stderr")]),n("OutboundLink")],1),e._v(" 流。 这相当于将 "),n("code",[e._v("options.stdio")]),e._v(" 设置为等于 "),n("code",[e._v("['pipe', 'pipe', 'pipe']")]),e._v("。")]),e._v(" "),n("p",[e._v("为方便起见，"),n("code",[e._v("options.stdio")]),e._v(" 可能是以下字符串之一：")]),e._v(" "),n("ul",[n("li",[n("code",[e._v("'pipe'")]),e._v(": 相当于 "),n("code",[e._v("['pipe', 'pipe', 'pipe']")]),e._v("（默认）")]),e._v(" "),n("li",[n("code",[e._v("'ignore'")]),e._v(": 相当于 "),n("code",[e._v("['ignore', 'ignore', 'ignore']")])]),e._v(" "),n("li",[n("code",[e._v("'inherit'")]),e._v(": 相当于 "),n("code",[e._v("['inherit', 'inherit', 'inherit']")]),e._v(" 或 "),n("code",[e._v("[0, 1, 2]")])])]),e._v(" "),n("p",[e._v("否则，"),n("code",[e._v("options.stdio")]),e._v(" 的值是一个数组，其中每个索引对应于子进程中的文件描述符。 文件描述符 0、1 和 2 分别对应于标准输入、标准输出和标准错误。 可以指定额外的文件描述符以在父进程和子进程之间创建额外的管道。 该值是以下之一：")]),e._v(" "),n("ol",[n("li",[n("p",[n("code",[e._v("'pipe'")]),e._v("：在子进程和父进程之间创建管道。 管道的父端作为 "),n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process.html#child_process_subprocess_stdio",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("subprocess.stdio[fd]")]),n("OutboundLink")],1),e._v(" 的 "),n("code",[e._v("child_process")]),e._v(" 对象的属性暴露给父进程。 为文件描述符 0、1 和 2 创建的管道也可分别用作 "),n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process.html#child_process_subprocess_stdin",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("subprocess.stdin")]),n("OutboundLink")],1),e._v("、"),n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process.html#child_process_subprocess_stdout",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("subprocess.stdout")]),n("OutboundLink")],1),e._v(" 和 "),n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process.html#child_process_subprocess_stderr",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("subprocess.stderr")]),n("OutboundLink")],1),e._v("。")])]),e._v(" "),n("li",[n("p",[n("code",[e._v("'ipc'")]),e._v("：创建 IPC 通道，用于在父子进程之间传递消息/文件描述符。 一个 "),n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process.html#child_process_child_process",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("ChildProcess")]),n("OutboundLink")],1),e._v(" 最多可以有一个 IPC 标准输入输出文件描述符。 设置此选项将启用 "),n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process.html#child_process_subprocess_send_message_sendhandle_options_callback",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("subprocess.send()")]),n("OutboundLink")],1),e._v(" 方法。 如果子进程是 Node.js 进程，则 IPC 通道的存在将启用 "),n("a",{attrs:{href:"http://nodejs.cn/api-v12/process.html#process_process_send_message_sendhandle_options_callback",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("process.send()")]),n("OutboundLink")],1),e._v(" 和 "),n("a",{attrs:{href:"http://nodejs.cn/api-v12/process.html#process_process_disconnect",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("process.disconnect()")]),n("OutboundLink")],1),e._v(" 方法，以及子进程中的 "),n("a",{attrs:{href:"http://nodejs.cn/api-v12/process.html#process_event_disconnect",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("'disconnect'")]),n("OutboundLink")],1),e._v(" 和 "),n("a",{attrs:{href:"http://nodejs.cn/api-v12/process.html#process_event_message",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("'message'")]),n("OutboundLink")],1),e._v(" 事件。")]),e._v(" "),n("p",[e._v("不支持以 "),n("a",{attrs:{href:"http://nodejs.cn/api-v12/process.html#process_process_send_message_sendhandle_options_callback",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("process.send()")]),n("OutboundLink")],1),e._v(" 以外的任何方式访问 IPC 通道文件描述符、或者将 IPC 通道与非 Node.js 实例的子进程一起使用。")])]),e._v(" "),n("li",[n("p",[n("code",[e._v("'ignore'")]),e._v("：指示 Node.js 忽略子进程中的文件描述符。 虽然 Node.js 将始终为其衍生的进程打开文件描述符 0、1 和 2，但将文件描述符设置为 "),n("code",[e._v("'ignore'")]),e._v(" 将导致 Node.js 打开 "),n("code",[e._v("/dev/null")]),e._v(" 并将其附加到子进程的文件描述符。")])]),e._v(" "),n("li",[n("p",[n("code",[e._v("'inherit'")]),e._v("：通过相应的标准输入输出流传入/传出父进程。 在前三个位置，这分别相当于 "),n("code",[e._v("process.stdin")]),e._v("、"),n("code",[e._v("process.stdout")]),e._v(" 和 "),n("code",[e._v("process.stderr")]),e._v("。 在任何其他位置，相当于 "),n("code",[e._v("'ignore'")]),e._v("。")])]),e._v(" "),n("li",[n("p",[n("a",{attrs:{href:"http://nodejs.cn/api/stream.html#stream",target:"_blank",rel:"noopener noreferrer"}},[n("Stream",[n("OutboundLink")],1)],1),e._v(" 对象：与子进程共享引用终端、文件、套接字或管道的可读或可写流。 流的底层文件描述符在子进程中复制到对应于 "),n("code",[e._v("stdio")]),e._v(" 数组中的索引的文件描述符。 流必须有底层描述符（文件流在 "),n("code",[e._v("'open'")]),e._v(" 事件发生之前没有）。")])]),e._v(" "),n("li",[n("p",[e._v("正整数：该整数值被解释为当前在父进程中打开的文件描述符。 它与子进程共享，类似于共享 "),n("a",{attrs:{href:"http://nodejs.cn/api/stream.html#stream",target:"_blank",rel:"noopener noreferrer"}},[n("Stream",[n("OutboundLink")],1)],1),e._v(" 对象的方式。 Windows 不支持传入套接字。")])]),e._v(" "),n("li",[n("p",[n("code",[e._v("null")]),e._v("、"),n("code",[e._v("undefined")]),e._v("：使用默认值。 对于标准输入输出文件描述符 0、1 和 2（换句话说，标准输入、标准输出和标准错误），创建管道。 对于文件描述符 3 及以上，默认值为 "),n("code",[e._v("'ignore'")]),e._v("。")])])]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const { spawn } = require('child_process');\n\n// 子进程将使用父进程的标准输入输出。\nspawn('prg', [], { stdio: 'inherit' });\n\n// 衍生仅共享标准错误的子进程。\nspawn('prg', [], { stdio: ['pipe', 'pipe', process.stderr] });\n\n// 打开额外的文件描述符=4，以与呈现 startd 风格界面的程序进行交互。\nspawn('prg', [], { stdio: ['pipe', null, null, null, 'pipe'] });\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br")])]),n("p",[n("em",[e._v("值得注意的是，当父子进程之间建立了 IPC 通道，并且子进程是 Node.js 进程时，则子进程会在未引用 IPC 通道的情况下启动（使用 "),n("code",[e._v("unref()")]),e._v(" ），直到子进程为 "),n("a",{attrs:{href:"http://nodejs.cn/api-v12/process.html#process_event_disconnect",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("'disconnect'")]),n("OutboundLink")],1),e._v(" 事件或 "),n("a",{attrs:{href:"http://nodejs.cn/api-v12/process.html#process_event_message",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("'message'")]),n("OutboundLink")],1),e._v(" 事件注册事件句柄。 这允许子进程正常退出，而进程不会被打开的 IPC 通道保持打开状态。")])]),e._v(" "),n("p",[e._v("在类 Unix 操作系统上，"),n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process.html#child_process_child_process_spawn_command_args_options",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("child_process.spawn()")]),n("OutboundLink")],1),e._v(" 方法在将事件循环与子进程分离之前同步执行内存操作。 具有大量内存占用的应用程序可能会发现频繁的 "),n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process.html#child_process_child_process_spawn_command_args_options",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("child_process.spawn()")]),n("OutboundLink")],1),e._v(" 调用是一个瓶颈。 有关更多信息，请参阅 "),n("a",{attrs:{href:"http://url.nodejs.cn/p8ZCVp",target:"_blank",rel:"noopener noreferrer"}},[e._v("V8 问题 7381"),n("OutboundLink")],1),e._v("。")]),e._v(" "),n("p",[e._v("另见："),n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process.html#child_process_child_process_exec_command_options_callback",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("child_process.exec()")]),n("OutboundLink")],1),e._v(" 和 "),n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process.html#child_process_child_process_fork_modulepath_args_options",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("child_process.fork()")]),n("OutboundLink")],1),e._v("。")]),e._v(" "),n("h3",{attrs:{id:"同步进程的创建"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#同步进程的创建"}},[e._v("#")]),e._v(" 同步进程的创建"),n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process.html#synchronous-process-creation",target:"_blank",rel:"noopener noreferrer"}},[e._v("#"),n("OutboundLink")],1)]),e._v(" "),n("p",[n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process/synchronous_process_creation.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("中英对照"),n("OutboundLink")],1)]),e._v(" "),n("p",[n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process.html#child_process_child_process_spawnsync_command_args_options",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("child_process.spawnSync()")]),n("OutboundLink")],1),e._v("、"),n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process.html#child_process_child_process_execsync_command_options",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("child_process.execSync()")]),n("OutboundLink")],1),e._v(" 和 "),n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process.html#child_process_child_process_execfilesync_file_args_options",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("child_process.execFileSync()")]),n("OutboundLink")],1),e._v(" 方法是同步的，将阻塞 Node.js 事件循环，暂停任何其他代码的执行，直到衍生的进程退出。")]),e._v(" "),n("p",[e._v("像这样的阻塞调用对于简化通用脚本任务和在启动时简化应用程序配置的加载/处理非常有用。")]),e._v(" "),n("h4",{attrs:{id:"child-process-execfilesync-file-args-options"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#child-process-execfilesync-file-args-options"}},[e._v("#")]),e._v(" "),n("code",[e._v("child_process.execFileSync(file[, args][, options])")]),n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process.html#child_processexecfilesyncfile-args-options",target:"_blank",rel:"noopener noreferrer"}},[e._v("#"),n("OutboundLink")],1)]),e._v(" "),n("p",[n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process/child_process_execfilesync_file_args_options.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("中英对照"),n("OutboundLink")],1)]),e._v(" "),n("ul",[n("li",[n("code",[e._v("file")]),e._v(" "),n("a",{attrs:{href:"http://url.nodejs.cn/9Tw2bK",target:"_blank",rel:"noopener noreferrer"}},[n("string",[n("OutboundLink")],1)],1),e._v(" 要运行的可执行文件的名称或路径。")]),e._v(" "),n("li",[n("code",[e._v("args")]),e._v(" "),n("a",{attrs:{href:"http://url.nodejs.cn/9Tw2bK",target:"_blank",rel:"noopener noreferrer"}},[e._v("<string[]>"),n("OutboundLink")],1),e._v(" 字符串参数列表。")]),e._v(" "),n("li",[n("code",[e._v("options")]),e._v(" "),n("a",{attrs:{href:"http://url.nodejs.cn/jzn6Ao",target:"_blank",rel:"noopener noreferrer"}},[n("Object",[n("OutboundLink")],1)],1),e._v(" "),n("ul",[n("li",[n("code",[e._v("cwd")]),e._v(" "),n("a",{attrs:{href:"http://url.nodejs.cn/9Tw2bK",target:"_blank",rel:"noopener noreferrer"}},[n("string",[n("OutboundLink")],1)],1),e._v(" 子进程的当前工作目录。")]),e._v(" "),n("li",[n("code",[e._v("input")]),e._v(" "),n("a",{attrs:{href:"http://url.nodejs.cn/9Tw2bK",target:"_blank",rel:"noopener noreferrer"}},[n("string",[n("OutboundLink")],1)],1),e._v(" | "),n("a",{attrs:{href:"http://nodejs.cn/api/buffer.html#class-buffer",target:"_blank",rel:"noopener noreferrer"}},[n("Buffer",[n("OutboundLink")],1)],1),e._v(" | "),n("a",{attrs:{href:"http://url.nodejs.cn/oh3CkV",target:"_blank",rel:"noopener noreferrer"}},[n("TypedArray",[n("OutboundLink")],1)],1),e._v(" | "),n("a",{attrs:{href:"http://url.nodejs.cn/yCdVkD",target:"_blank",rel:"noopener noreferrer"}},[n("DataView",[n("OutboundLink")],1)],1),e._v(" 将作为标准输入传给衍生进程的值。 提供此值将覆盖 "),n("code",[e._v("stdio[0]")]),e._v("。")]),e._v(" "),n("li",[n("code",[e._v("stdio")]),e._v(" "),n("a",{attrs:{href:"http://url.nodejs.cn/9Tw2bK",target:"_blank",rel:"noopener noreferrer"}},[n("string",[n("OutboundLink")],1)],1),e._v(" | "),n("a",{attrs:{href:"http://url.nodejs.cn/ZJSz23",target:"_blank",rel:"noopener noreferrer"}},[n("Array",[n("OutboundLink")],1)],1),e._v(" 子进程的标准输入输出配置。 除非指定 "),n("code",[e._v("stdio")]),e._v("，否则默认情况下 "),n("code",[e._v("stderr")]),e._v(" 将输出到父进程的标准错误。 "),n("strong",[e._v("默认值:")]),e._v(" "),n("code",[e._v("'pipe'")]),e._v("。")]),e._v(" "),n("li",[n("code",[e._v("env")]),e._v(" "),n("a",{attrs:{href:"http://url.nodejs.cn/jzn6Ao",target:"_blank",rel:"noopener noreferrer"}},[n("Object",[n("OutboundLink")],1)],1),e._v(" 环境变量键值对。 "),n("strong",[e._v("默认值:")]),e._v(" "),n("code",[e._v("process.env")]),e._v("。")]),e._v(" "),n("li",[n("code",[e._v("uid")]),e._v(" "),n("a",{attrs:{href:"http://url.nodejs.cn/SXbo1v",target:"_blank",rel:"noopener noreferrer"}},[n("number",[n("OutboundLink")],1)],1),e._v(" 设置进程的用户标识（参见 "),n("a",{attrs:{href:"http://url.nodejs.cn/bUGgha",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("setuid(2)")]),n("OutboundLink")],1),e._v("）。")]),e._v(" "),n("li",[n("code",[e._v("gid")]),e._v(" "),n("a",{attrs:{href:"http://url.nodejs.cn/SXbo1v",target:"_blank",rel:"noopener noreferrer"}},[n("number",[n("OutboundLink")],1)],1),e._v(" 设置进程的群组标识（参见 "),n("a",{attrs:{href:"http://url.nodejs.cn/64HRVx",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("setgid(2)")]),n("OutboundLink")],1),e._v("）。")]),e._v(" "),n("li",[n("code",[e._v("timeout")]),e._v(" "),n("a",{attrs:{href:"http://url.nodejs.cn/SXbo1v",target:"_blank",rel:"noopener noreferrer"}},[n("number",[n("OutboundLink")],1)],1),e._v(" 允许进程运行的最长时间（以毫秒为单位）。 "),n("strong",[e._v("默认值:")]),e._v(" "),n("code",[e._v("undefined")]),e._v("。")]),e._v(" "),n("li",[n("code",[e._v("killSignal")]),e._v(" "),n("a",{attrs:{href:"http://url.nodejs.cn/9Tw2bK",target:"_blank",rel:"noopener noreferrer"}},[n("string",[n("OutboundLink")],1)],1),e._v(" | "),n("a",{attrs:{href:"http://url.nodejs.cn/SXbo1v",target:"_blank",rel:"noopener noreferrer"}},[n("integer",[n("OutboundLink")],1)],1),e._v(" 衍生的进程将被终止时要使用的信号值。 "),n("strong",[e._v("默认值:")]),e._v(" "),n("code",[e._v("'SIGTERM'")]),e._v("。")]),e._v(" "),n("li",[n("code",[e._v("maxBuffer")]),e._v(" "),n("a",{attrs:{href:"http://url.nodejs.cn/SXbo1v",target:"_blank",rel:"noopener noreferrer"}},[n("number",[n("OutboundLink")],1)],1),e._v(" 标准输出或标准错误上允许的最大数据量（以字节为单位）。 如果超过，则终止子进程。 请参阅 "),n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process.html#child_process_maxbuffer_and_unicode",target:"_blank",rel:"noopener noreferrer"}},[e._v("maxBuffer 和 Unicode"),n("OutboundLink")],1),e._v(" 的注意事项。 "),n("strong",[e._v("默认值:")]),e._v(" "),n("code",[e._v("1024 * 1024")]),e._v("。")]),e._v(" "),n("li",[n("code",[e._v("encoding")]),e._v(" "),n("a",{attrs:{href:"http://url.nodejs.cn/9Tw2bK",target:"_blank",rel:"noopener noreferrer"}},[n("string",[n("OutboundLink")],1)],1),e._v(" 用于所有标准输入输出的输入和输出的编码。 "),n("strong",[e._v("默认值:")]),e._v(" "),n("code",[e._v("'buffer'")]),e._v("。")]),e._v(" "),n("li",[n("code",[e._v("windowsHide")]),e._v(" "),n("a",{attrs:{href:"http://url.nodejs.cn/jFbvuT",target:"_blank",rel:"noopener noreferrer"}},[n("boolean",[n("OutboundLink")],1)],1),e._v(" 隐藏通常在 Windows 系统上创建的子进程控制台窗口。 "),n("strong",[e._v("默认值:")]),e._v(" "),n("code",[e._v("false")]),e._v("。")]),e._v(" "),n("li",[n("code",[e._v("shell")]),e._v(" "),n("a",{attrs:{href:"http://url.nodejs.cn/jFbvuT",target:"_blank",rel:"noopener noreferrer"}},[n("boolean",[n("OutboundLink")],1)],1),e._v(" | "),n("a",{attrs:{href:"http://url.nodejs.cn/9Tw2bK",target:"_blank",rel:"noopener noreferrer"}},[n("string",[n("OutboundLink")],1)],1),e._v(" 如果是 "),n("code",[e._v("true")]),e._v("，则在 shell 内运行 "),n("code",[e._v("command")]),e._v("。 在 Unix 上使用 "),n("code",[e._v("'/bin/sh'")]),e._v("，在 Windows 上使用 "),n("code",[e._v("process.env.ComSpec")]),e._v("。 可以将不同的 shell 指定为字符串。 请参阅 "),n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process.html#child_process_shell_requirements",target:"_blank",rel:"noopener noreferrer"}},[e._v("shell 的要求"),n("OutboundLink")],1),e._v("和"),n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process.html#child_process_default_windows_shell",target:"_blank",rel:"noopener noreferrer"}},[e._v("默认的 Windows shell"),n("OutboundLink")],1),e._v("。 "),n("strong",[e._v("默认值:")]),e._v(" "),n("code",[e._v("false")]),e._v(" （没有 shell）")])])]),e._v(" "),n("li",[e._v("返回: "),n("a",{attrs:{href:"http://nodejs.cn/api/buffer.html#class-buffer",target:"_blank",rel:"noopener noreferrer"}},[n("Buffer",[n("OutboundLink")],1)],1),e._v(" | "),n("a",{attrs:{href:"http://url.nodejs.cn/9Tw2bK",target:"_blank",rel:"noopener noreferrer"}},[n("string",[n("OutboundLink")],1)],1),e._v(" 命令的标准输出。")])]),e._v(" "),n("p",[n("code",[e._v("child_process.execFileSync()")]),e._v(" 方法通常与 "),n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process.html#child_process_child_process_execfile_file_args_options_callback",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("child_process.execFile()")]),n("OutboundLink")],1),e._v(" 相同，不同之处在于该方法在子进程完全关闭之前不会返回。 当遇到超时并发送 "),n("code",[e._v("killSignal")]),e._v(" 时，该方法在进程完全退出之前不会返回。")]),e._v(" "),n("p",[e._v("如果子进程拦截并处理了 "),n("code",[e._v("SIGTERM")]),e._v(" 信号且没有退出，则父进程仍然会等待，直到子进程退出。")]),e._v(" "),n("p",[e._v("如果进程超时或具有非零退出码，则此方法将抛出 "),n("a",{attrs:{href:"http://nodejs.cn/api-v12/errors.html#errors_class_error",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("Error")]),n("OutboundLink")],1),e._v("，其中包含底层 "),n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process.html#child_process_child_process_spawnsync_command_args_options",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("child_process.spawnSync()")]),n("OutboundLink")],1),e._v(" 的完整结果。")]),e._v(" "),n("p",[n("strong",[e._v("如果启用了 "),n("code",[e._v("shell")]),e._v(" 选项，则请勿将未经处理的用户输入传递给此函数。 任何包含 shell 元字符的输入都可用于触发任意命令执行。")])]),e._v(" "),n("h4",{attrs:{id:"child-process-execsync-command-options"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#child-process-execsync-command-options"}},[e._v("#")]),e._v(" "),n("code",[e._v("child_process.execSync(command[, options])")]),n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process.html#child_processexecsynccommand-options",target:"_blank",rel:"noopener noreferrer"}},[e._v("#"),n("OutboundLink")],1)]),e._v(" "),n("p",[n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process/child_process_execsync_command_options.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("中英对照"),n("OutboundLink")],1)]),e._v(" "),n("ul",[n("li",[n("code",[e._v("command")]),e._v(" "),n("a",{attrs:{href:"http://url.nodejs.cn/9Tw2bK",target:"_blank",rel:"noopener noreferrer"}},[n("string",[n("OutboundLink")],1)],1),e._v(" 要运行的命令。")]),e._v(" "),n("li",[n("code",[e._v("options")]),e._v(" "),n("a",{attrs:{href:"http://url.nodejs.cn/jzn6Ao",target:"_blank",rel:"noopener noreferrer"}},[n("Object",[n("OutboundLink")],1)],1),e._v(" "),n("ul",[n("li",[n("code",[e._v("cwd")]),e._v(" "),n("a",{attrs:{href:"http://url.nodejs.cn/9Tw2bK",target:"_blank",rel:"noopener noreferrer"}},[n("string",[n("OutboundLink")],1)],1),e._v(" 子进程的当前工作目录。")]),e._v(" "),n("li",[n("code",[e._v("input")]),e._v(" "),n("a",{attrs:{href:"http://url.nodejs.cn/9Tw2bK",target:"_blank",rel:"noopener noreferrer"}},[n("string",[n("OutboundLink")],1)],1),e._v(" | "),n("a",{attrs:{href:"http://nodejs.cn/api/buffer.html#class-buffer",target:"_blank",rel:"noopener noreferrer"}},[n("Buffer",[n("OutboundLink")],1)],1),e._v(" | "),n("a",{attrs:{href:"http://url.nodejs.cn/oh3CkV",target:"_blank",rel:"noopener noreferrer"}},[n("TypedArray",[n("OutboundLink")],1)],1),e._v(" | "),n("a",{attrs:{href:"http://url.nodejs.cn/yCdVkD",target:"_blank",rel:"noopener noreferrer"}},[n("DataView",[n("OutboundLink")],1)],1),e._v(" 将作为标准输入传给衍生进程的值。 提供此值将覆盖 "),n("code",[e._v("stdio[0]")]),e._v("。")]),e._v(" "),n("li",[n("code",[e._v("stdio")]),e._v(" "),n("a",{attrs:{href:"http://url.nodejs.cn/9Tw2bK",target:"_blank",rel:"noopener noreferrer"}},[n("string",[n("OutboundLink")],1)],1),e._v(" | "),n("a",{attrs:{href:"http://url.nodejs.cn/ZJSz23",target:"_blank",rel:"noopener noreferrer"}},[n("Array",[n("OutboundLink")],1)],1),e._v(" 子进程的标准输入输出配置。 除非指定 "),n("code",[e._v("stdio")]),e._v("，否则默认情况下 "),n("code",[e._v("stderr")]),e._v(" 将输出到父进程的标准错误。 "),n("strong",[e._v("默认值:")]),e._v(" "),n("code",[e._v("'pipe'")]),e._v("。")]),e._v(" "),n("li",[n("code",[e._v("env")]),e._v(" "),n("a",{attrs:{href:"http://url.nodejs.cn/jzn6Ao",target:"_blank",rel:"noopener noreferrer"}},[n("Object",[n("OutboundLink")],1)],1),e._v(" 环境变量键值对。 "),n("strong",[e._v("默认值:")]),e._v(" "),n("code",[e._v("process.env")]),e._v("。")]),e._v(" "),n("li",[n("code",[e._v("shell")]),e._v(" "),n("a",{attrs:{href:"http://url.nodejs.cn/9Tw2bK",target:"_blank",rel:"noopener noreferrer"}},[n("string",[n("OutboundLink")],1)],1),e._v(" 用于执行命令的 shell。 请参阅 "),n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process.html#child_process_shell_requirements",target:"_blank",rel:"noopener noreferrer"}},[e._v("shell 的要求"),n("OutboundLink")],1),e._v("和"),n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process.html#child_process_default_windows_shell",target:"_blank",rel:"noopener noreferrer"}},[e._v("默认的 Windows shell"),n("OutboundLink")],1),e._v("。 "),n("strong",[e._v("默认值:")]),e._v(" Unix 上是 "),n("code",[e._v("'/bin/sh'")]),e._v("，Windows 上是 "),n("code",[e._v("process.env.ComSpec")]),e._v("。")]),e._v(" "),n("li",[n("code",[e._v("uid")]),e._v(" "),n("a",{attrs:{href:"http://url.nodejs.cn/SXbo1v",target:"_blank",rel:"noopener noreferrer"}},[n("number",[n("OutboundLink")],1)],1),e._v(" 设置进程的用户标识。 （参见 "),n("a",{attrs:{href:"http://url.nodejs.cn/bUGgha",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("setuid(2)")]),n("OutboundLink")],1),e._v("）。")]),e._v(" "),n("li",[n("code",[e._v("gid")]),e._v(" "),n("a",{attrs:{href:"http://url.nodejs.cn/SXbo1v",target:"_blank",rel:"noopener noreferrer"}},[n("number",[n("OutboundLink")],1)],1),e._v(" 设置进程的群组标识。 （参见 "),n("a",{attrs:{href:"http://url.nodejs.cn/64HRVx",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("setgid(2)")]),n("OutboundLink")],1),e._v("）。")]),e._v(" "),n("li",[n("code",[e._v("timeout")]),e._v(" "),n("a",{attrs:{href:"http://url.nodejs.cn/SXbo1v",target:"_blank",rel:"noopener noreferrer"}},[n("number",[n("OutboundLink")],1)],1),e._v(" 允许进程运行的最长时间（以毫秒为单位）。 "),n("strong",[e._v("默认值:")]),e._v(" "),n("code",[e._v("undefined")]),e._v("。")]),e._v(" "),n("li",[n("code",[e._v("killSignal")]),e._v(" "),n("a",{attrs:{href:"http://url.nodejs.cn/9Tw2bK",target:"_blank",rel:"noopener noreferrer"}},[n("string",[n("OutboundLink")],1)],1),e._v(" | "),n("a",{attrs:{href:"http://url.nodejs.cn/SXbo1v",target:"_blank",rel:"noopener noreferrer"}},[n("integer",[n("OutboundLink")],1)],1),e._v(" 衍生的进程将被终止时要使用的信号值。 "),n("strong",[e._v("默认值:")]),e._v(" "),n("code",[e._v("'SIGTERM'")]),e._v("。")]),e._v(" "),n("li",[n("code",[e._v("maxBuffer")]),e._v(" "),n("a",{attrs:{href:"http://url.nodejs.cn/SXbo1v",target:"_blank",rel:"noopener noreferrer"}},[n("number",[n("OutboundLink")],1)],1),e._v(" 标准输出或标准错误上允许的最大数据量（以字节为单位）。 如果超过，则子进程将终止并截断任何输出。 请参阅 "),n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process.html#child_process_maxbuffer_and_unicode",target:"_blank",rel:"noopener noreferrer"}},[e._v("maxBuffer 和 Unicode"),n("OutboundLink")],1),e._v(" 的注意事项。 "),n("strong",[e._v("默认值:")]),e._v(" "),n("code",[e._v("1024 * 1024")]),e._v("。")]),e._v(" "),n("li",[n("code",[e._v("encoding")]),e._v(" "),n("a",{attrs:{href:"http://url.nodejs.cn/9Tw2bK",target:"_blank",rel:"noopener noreferrer"}},[n("string",[n("OutboundLink")],1)],1),e._v(" 用于所有标准输入输出的输入和输出的编码。 "),n("strong",[e._v("默认值:")]),e._v(" "),n("code",[e._v("'buffer'")]),e._v("。")]),e._v(" "),n("li",[n("code",[e._v("windowsHide")]),e._v(" "),n("a",{attrs:{href:"http://url.nodejs.cn/jFbvuT",target:"_blank",rel:"noopener noreferrer"}},[n("boolean",[n("OutboundLink")],1)],1),e._v(" 隐藏通常在 Windows 系统上创建的子进程控制台窗口。 "),n("strong",[e._v("默认值:")]),e._v(" "),n("code",[e._v("false")]),e._v("。")])])]),e._v(" "),n("li",[e._v("返回: "),n("a",{attrs:{href:"http://nodejs.cn/api/buffer.html#class-buffer",target:"_blank",rel:"noopener noreferrer"}},[n("Buffer",[n("OutboundLink")],1)],1),e._v(" | "),n("a",{attrs:{href:"http://url.nodejs.cn/9Tw2bK",target:"_blank",rel:"noopener noreferrer"}},[n("string",[n("OutboundLink")],1)],1),e._v(" 命令的标准输出。")])]),e._v(" "),n("p",[n("code",[e._v("child_process.execSync()")]),e._v(" 方法通常与 "),n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process.html#child_process_child_process_exec_command_options_callback",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("child_process.exec()")]),n("OutboundLink")],1),e._v(" 相同，不同之处在于该方法在子进程完全关闭之前不会返回。 当遇到超时并发送 "),n("code",[e._v("killSignal")]),e._v(" 时，该方法在进程完全退出之前不会返回。 如果子进程拦截并处理了 "),n("code",[e._v("SIGTERM")]),e._v(" 信号且没有退出，则父进程会一直等到子进程退出。")]),e._v(" "),n("p",[e._v("如果进程超时或具有非零退出码，则此方法将抛出错误。 "),n("a",{attrs:{href:"http://nodejs.cn/api-v12/errors.html#errors_class_error",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("Error")]),n("OutboundLink")],1),e._v(" 对象将包含 "),n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process.html#child_process_child_process_spawnsync_command_args_options",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("child_process.spawnSync()")]),n("OutboundLink")],1),e._v(" 的整个结果。")]),e._v(" "),n("p",[n("strong",[e._v("切勿将未经处理的用户输入传给此函数。 任何包含 shell 元字符的输入都可用于触发任意命令执行。")])]),e._v(" "),n("h4",{attrs:{id:"child-process-spawnsync-command-args-options"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#child-process-spawnsync-command-args-options"}},[e._v("#")]),e._v(" "),n("code",[e._v("child_process.spawnSync(command[, args][, options])")]),n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process.html#child_processspawnsynccommand-args-options",target:"_blank",rel:"noopener noreferrer"}},[e._v("#"),n("OutboundLink")],1)]),e._v(" "),n("p",[n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process/child_process_spawnsync_command_args_options.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("中英对照"),n("OutboundLink")],1)]),e._v(" "),n("ul",[n("li",[n("code",[e._v("command")]),e._v(" "),n("a",{attrs:{href:"http://url.nodejs.cn/9Tw2bK",target:"_blank",rel:"noopener noreferrer"}},[n("string",[n("OutboundLink")],1)],1),e._v(" 要运行的命令。")]),e._v(" "),n("li",[n("code",[e._v("args")]),e._v(" "),n("a",{attrs:{href:"http://url.nodejs.cn/9Tw2bK",target:"_blank",rel:"noopener noreferrer"}},[e._v("<string[]>"),n("OutboundLink")],1),e._v(" 字符串参数列表。")]),e._v(" "),n("li",[n("code",[e._v("options")]),e._v(" "),n("a",{attrs:{href:"http://url.nodejs.cn/jzn6Ao",target:"_blank",rel:"noopener noreferrer"}},[n("Object",[n("OutboundLink")],1)],1),e._v(" "),n("ul",[n("li",[n("code",[e._v("cwd")]),e._v(" "),n("a",{attrs:{href:"http://url.nodejs.cn/9Tw2bK",target:"_blank",rel:"noopener noreferrer"}},[n("string",[n("OutboundLink")],1)],1),e._v(" 子进程的当前工作目录。")]),e._v(" "),n("li",[n("code",[e._v("input")]),e._v(" "),n("a",{attrs:{href:"http://url.nodejs.cn/9Tw2bK",target:"_blank",rel:"noopener noreferrer"}},[n("string",[n("OutboundLink")],1)],1),e._v(" | "),n("a",{attrs:{href:"http://nodejs.cn/api/buffer.html#class-buffer",target:"_blank",rel:"noopener noreferrer"}},[n("Buffer",[n("OutboundLink")],1)],1),e._v(" | "),n("a",{attrs:{href:"http://url.nodejs.cn/oh3CkV",target:"_blank",rel:"noopener noreferrer"}},[n("TypedArray",[n("OutboundLink")],1)],1),e._v(" | "),n("a",{attrs:{href:"http://url.nodejs.cn/yCdVkD",target:"_blank",rel:"noopener noreferrer"}},[n("DataView",[n("OutboundLink")],1)],1),e._v(" 将作为标准输入传给衍生进程的值。 提供此值将覆盖 "),n("code",[e._v("stdio[0]")]),e._v("。")]),e._v(" "),n("li",[n("code",[e._v("argv0")]),e._v(" "),n("a",{attrs:{href:"http://url.nodejs.cn/9Tw2bK",target:"_blank",rel:"noopener noreferrer"}},[n("string",[n("OutboundLink")],1)],1),e._v(" 显式设置发送给子进程的 "),n("code",[e._v("argv[0]")]),e._v(" 的值。 如果未指定，这将设置为 "),n("code",[e._v("command")]),e._v("。")]),e._v(" "),n("li",[n("code",[e._v("stdio")]),e._v(" "),n("a",{attrs:{href:"http://url.nodejs.cn/9Tw2bK",target:"_blank",rel:"noopener noreferrer"}},[n("string",[n("OutboundLink")],1)],1),e._v(" | "),n("a",{attrs:{href:"http://url.nodejs.cn/ZJSz23",target:"_blank",rel:"noopener noreferrer"}},[n("Array",[n("OutboundLink")],1)],1),e._v(" 子进程的标准输入输出配置。")]),e._v(" "),n("li",[n("code",[e._v("env")]),e._v(" "),n("a",{attrs:{href:"http://url.nodejs.cn/jzn6Ao",target:"_blank",rel:"noopener noreferrer"}},[n("Object",[n("OutboundLink")],1)],1),e._v(" 环境变量键值对。 "),n("strong",[e._v("默认值:")]),e._v(" "),n("code",[e._v("process.env")]),e._v("。")]),e._v(" "),n("li",[n("code",[e._v("uid")]),e._v(" "),n("a",{attrs:{href:"http://url.nodejs.cn/SXbo1v",target:"_blank",rel:"noopener noreferrer"}},[n("number",[n("OutboundLink")],1)],1),e._v(" 设置进程的用户标识（参见 "),n("a",{attrs:{href:"http://url.nodejs.cn/bUGgha",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("setuid(2)")]),n("OutboundLink")],1),e._v("）。")]),e._v(" "),n("li",[n("code",[e._v("gid")]),e._v(" "),n("a",{attrs:{href:"http://url.nodejs.cn/SXbo1v",target:"_blank",rel:"noopener noreferrer"}},[n("number",[n("OutboundLink")],1)],1),e._v(" 设置进程的群组标识（参见 "),n("a",{attrs:{href:"http://url.nodejs.cn/64HRVx",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("setgid(2)")]),n("OutboundLink")],1),e._v("）。")]),e._v(" "),n("li",[n("code",[e._v("timeout")]),e._v(" "),n("a",{attrs:{href:"http://url.nodejs.cn/SXbo1v",target:"_blank",rel:"noopener noreferrer"}},[n("number",[n("OutboundLink")],1)],1),e._v(" 允许进程运行的最长时间（以毫秒为单位）。 "),n("strong",[e._v("默认值:")]),e._v(" "),n("code",[e._v("undefined")]),e._v("。")]),e._v(" "),n("li",[n("code",[e._v("killSignal")]),e._v(" "),n("a",{attrs:{href:"http://url.nodejs.cn/9Tw2bK",target:"_blank",rel:"noopener noreferrer"}},[n("string",[n("OutboundLink")],1)],1),e._v(" | "),n("a",{attrs:{href:"http://url.nodejs.cn/SXbo1v",target:"_blank",rel:"noopener noreferrer"}},[n("integer",[n("OutboundLink")],1)],1),e._v(" 衍生的进程将被终止时要使用的信号值。 "),n("strong",[e._v("默认值:")]),e._v(" "),n("code",[e._v("'SIGTERM'")]),e._v("。")]),e._v(" "),n("li",[n("code",[e._v("maxBuffer")]),e._v(" "),n("a",{attrs:{href:"http://url.nodejs.cn/SXbo1v",target:"_blank",rel:"noopener noreferrer"}},[n("number",[n("OutboundLink")],1)],1),e._v(" 标准输出或标准错误上允许的最大数据量（以字节为单位）。 如果超过，则子进程将终止并截断任何输出。 请参阅 "),n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process.html#child_process_maxbuffer_and_unicode",target:"_blank",rel:"noopener noreferrer"}},[e._v("maxBuffer 和 Unicode"),n("OutboundLink")],1),e._v(" 的注意事项。 "),n("strong",[e._v("默认值:")]),e._v(" "),n("code",[e._v("1024 * 1024")]),e._v("。")]),e._v(" "),n("li",[n("code",[e._v("encoding")]),e._v(" "),n("a",{attrs:{href:"http://url.nodejs.cn/9Tw2bK",target:"_blank",rel:"noopener noreferrer"}},[n("string",[n("OutboundLink")],1)],1),e._v(" 用于所有标准输入输出的输入和输出的编码。 "),n("strong",[e._v("默认值:")]),e._v(" "),n("code",[e._v("'buffer'")]),e._v("。")]),e._v(" "),n("li",[n("code",[e._v("shell")]),e._v(" "),n("a",{attrs:{href:"http://url.nodejs.cn/jFbvuT",target:"_blank",rel:"noopener noreferrer"}},[n("boolean",[n("OutboundLink")],1)],1),e._v(" | "),n("a",{attrs:{href:"http://url.nodejs.cn/9Tw2bK",target:"_blank",rel:"noopener noreferrer"}},[n("string",[n("OutboundLink")],1)],1),e._v(" 如果是 "),n("code",[e._v("true")]),e._v("，则在 shell 内运行 "),n("code",[e._v("command")]),e._v("。 在 Unix 上使用 "),n("code",[e._v("'/bin/sh'")]),e._v("，在 Windows 上使用 "),n("code",[e._v("process.env.ComSpec")]),e._v("。 可以将不同的 shell 指定为字符串。 请参阅 "),n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process.html#child_process_shell_requirements",target:"_blank",rel:"noopener noreferrer"}},[e._v("shell 的要求"),n("OutboundLink")],1),e._v("和"),n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process.html#child_process_default_windows_shell",target:"_blank",rel:"noopener noreferrer"}},[e._v("默认的 Windows shell"),n("OutboundLink")],1),e._v("。 "),n("strong",[e._v("默认值:")]),e._v(" "),n("code",[e._v("false")]),e._v(" （没有 shell）")]),e._v(" "),n("li",[n("code",[e._v("windowsVerbatimArguments")]),e._v(" "),n("a",{attrs:{href:"http://url.nodejs.cn/jFbvuT",target:"_blank",rel:"noopener noreferrer"}},[n("boolean",[n("OutboundLink")],1)],1),e._v(" 在 Windows 上不为参数加上引号或转义。 在 Unix 上被忽略。 当指定了 "),n("code",[e._v("shell")]),e._v(" 并且是 CMD 时，则自动设置为 "),n("code",[e._v("true")]),e._v("。 "),n("strong",[e._v("默认值:")]),e._v(" "),n("code",[e._v("false")]),e._v("。")]),e._v(" "),n("li",[n("code",[e._v("windowsHide")]),e._v(" "),n("a",{attrs:{href:"http://url.nodejs.cn/jFbvuT",target:"_blank",rel:"noopener noreferrer"}},[n("boolean",[n("OutboundLink")],1)],1),e._v(" 隐藏通常在 Windows 系统上创建的子进程控制台窗口。 "),n("strong",[e._v("默认值:")]),e._v(" "),n("code",[e._v("false")]),e._v("。")])])]),e._v(" "),n("li",[e._v("返回: "),n("a",{attrs:{href:"http://url.nodejs.cn/jzn6Ao",target:"_blank",rel:"noopener noreferrer"}},[n("Object",[n("OutboundLink")],1)],1),e._v(" "),n("ul",[n("li",[n("code",[e._v("pid")]),e._v(" "),n("a",{attrs:{href:"http://url.nodejs.cn/SXbo1v",target:"_blank",rel:"noopener noreferrer"}},[n("number",[n("OutboundLink")],1)],1),e._v(" 子进程的 pid。")]),e._v(" "),n("li",[n("code",[e._v("output")]),e._v(" "),n("a",{attrs:{href:"http://url.nodejs.cn/ZJSz23",target:"_blank",rel:"noopener noreferrer"}},[n("Array",[n("OutboundLink")],1)],1),e._v(" 来自标准输入输出的输出的结果数组。")]),e._v(" "),n("li",[n("code",[e._v("stdout")]),e._v(" "),n("a",{attrs:{href:"http://nodejs.cn/api/buffer.html#class-buffer",target:"_blank",rel:"noopener noreferrer"}},[n("Buffer",[n("OutboundLink")],1)],1),e._v(" | "),n("a",{attrs:{href:"http://url.nodejs.cn/9Tw2bK",target:"_blank",rel:"noopener noreferrer"}},[n("string",[n("OutboundLink")],1)],1),e._v(" "),n("code",[e._v("output[1]")]),e._v(" 的内容。")]),e._v(" "),n("li",[n("code",[e._v("stderr")]),e._v(" "),n("a",{attrs:{href:"http://nodejs.cn/api/buffer.html#class-buffer",target:"_blank",rel:"noopener noreferrer"}},[n("Buffer",[n("OutboundLink")],1)],1),e._v(" | "),n("a",{attrs:{href:"http://url.nodejs.cn/9Tw2bK",target:"_blank",rel:"noopener noreferrer"}},[n("string",[n("OutboundLink")],1)],1),e._v(" "),n("code",[e._v("output[2]")]),e._v(" 的内容。")]),e._v(" "),n("li",[n("code",[e._v("status")]),e._v(" "),n("a",{attrs:{href:"http://url.nodejs.cn/SXbo1v",target:"_blank",rel:"noopener noreferrer"}},[n("number",[n("OutboundLink")],1)],1),e._v(" | "),n("a",{attrs:{href:"http://url.nodejs.cn/334hvC",target:"_blank",rel:"noopener noreferrer"}},[n("null",[n("OutboundLink")],1)],1),e._v(" 子进程的退出码，如果子进程因信号而终止，则为 "),n("code",[e._v("null")]),e._v("。")]),e._v(" "),n("li",[n("code",[e._v("signal")]),e._v(" "),n("a",{attrs:{href:"http://url.nodejs.cn/9Tw2bK",target:"_blank",rel:"noopener noreferrer"}},[n("string",[n("OutboundLink")],1)],1),e._v(" | "),n("a",{attrs:{href:"http://url.nodejs.cn/334hvC",target:"_blank",rel:"noopener noreferrer"}},[n("null",[n("OutboundLink")],1)],1),e._v(" 用于终止子进程的信号，如果子进程没有因信号而终止，则为 "),n("code",[e._v("null")]),e._v("。")]),e._v(" "),n("li",[n("code",[e._v("error")]),e._v(" "),n("a",{attrs:{href:"http://url.nodejs.cn/qZ873x",target:"_blank",rel:"noopener noreferrer"}},[n("Error",[n("OutboundLink")],1)],1),e._v(" 如果子进程失败或超时，则为错误对象。")])])])]),e._v(" "),n("p",[n("code",[e._v("child_process.spawnSync()")]),e._v(" 方法通常与 "),n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process.html#child_process_child_process_spawn_command_args_options",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("child_process.spawn()")]),n("OutboundLink")],1),e._v(" 相同，不同之处在于该函数在子进程完全关闭之前不会返回。 当遇到超时并发送 "),n("code",[e._v("killSignal")]),e._v(" 时，该方法在进程完全退出之前不会返回。 如果进程拦截并处理了 "),n("code",[e._v("SIGTERM")]),e._v(" 信号并且没有退出，则父进程会一直等到子进程退出。")]),e._v(" "),n("p",[n("strong",[e._v("如果启用了 "),n("code",[e._v("shell")]),e._v(" 选项，则请勿将未经处理的用户输入传递给此函数。 任何包含 shell 元字符的输入都可用于触发任意命令执行。")])]),e._v(" "),n("h3",{attrs:{id:"childprocess-类"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#childprocess-类"}},[e._v("#")]),e._v(" "),n("code",[e._v("ChildProcess")]),e._v(" 类"),n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process.html#class-childprocess",target:"_blank",rel:"noopener noreferrer"}},[e._v("#"),n("OutboundLink")],1)]),e._v(" "),n("p",[n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process/class_childprocess.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("中英对照"),n("OutboundLink")],1)]),e._v(" "),n("p",[e._v("新增于: v2.2.0")]),e._v(" "),n("ul",[n("li",[e._v("继承自: "),n("a",{attrs:{href:"http://nodejs.cn/api/events.html#class-eventemitter",target:"_blank",rel:"noopener noreferrer"}},[n("EventEmitter",[n("OutboundLink")],1)],1)])]),e._v(" "),n("p",[n("code",[e._v("ChildProcess")]),e._v(" 的实例，表示衍生的子进程。")]),e._v(" "),n("p",[n("code",[e._v("ChildProcess")]),e._v(" 的实例不是直接创建的。 而是，使用 "),n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process.html#child_process_child_process_spawn_command_args_options",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("child_process.spawn()")]),n("OutboundLink")],1),e._v("、"),n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process.html#child_process_child_process_exec_command_options_callback",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("child_process.exec()")]),n("OutboundLink")],1),e._v("、"),n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process.html#child_process_child_process_execfile_file_args_options_callback",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("child_process.execFile()")]),n("OutboundLink")],1),e._v(" 或 "),n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process.html#child_process_child_process_fork_modulepath_args_options",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("child_process.fork()")]),n("OutboundLink")],1),e._v(" 方法来创建 "),n("code",[e._v("ChildProcess")]),e._v(" 的实例。")]),e._v(" "),n("h4",{attrs:{id:"close-事件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#close-事件"}},[e._v("#")]),e._v(" "),n("code",[e._v("'close'")]),e._v(" 事件"),n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process.html#event-close",target:"_blank",rel:"noopener noreferrer"}},[e._v("#"),n("OutboundLink")],1)]),e._v(" "),n("p",[n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process/event_close.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("中英对照"),n("OutboundLink")],1)]),e._v(" "),n("p",[e._v("新增于: v0.7.7")]),e._v(" "),n("ul",[n("li",[n("code",[e._v("code")]),e._v(" "),n("a",{attrs:{href:"http://url.nodejs.cn/SXbo1v",target:"_blank",rel:"noopener noreferrer"}},[n("number",[n("OutboundLink")],1)],1),e._v(" 如果子进程自己退出，则为退出码。")]),e._v(" "),n("li",[n("code",[e._v("signal")]),e._v(" "),n("a",{attrs:{href:"http://url.nodejs.cn/9Tw2bK",target:"_blank",rel:"noopener noreferrer"}},[n("string",[n("OutboundLink")],1)],1),e._v(" 终止子进程的信号。")])]),e._v(" "),n("p",[e._v("这与 "),n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process.html#child_process_event_exit",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("'exit'")]),n("OutboundLink")],1),e._v(" 事件不同，因为多个进程可能共享相同的标准输入输出流。")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const { spawn } = require('child_process');\nconst ls = spawn('ls', ['-lh', '/usr']);\n\nls.stdout.on('data', (data) => {\n  console.log(`stdout: ${data}`);\n});\n\nls.on('close', (code) => {\n  console.log(`child process close all stdio with code ${code}`);\n});\n\nls.on('exit', (code) => {\n  console.log(`child process exited with code ${code}`);\n});\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br")])]),n("h4",{attrs:{id:"disconnect-事件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#disconnect-事件"}},[e._v("#")]),e._v(" "),n("code",[e._v("'disconnect'")]),e._v(" 事件"),n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process.html#event-disconnect",target:"_blank",rel:"noopener noreferrer"}},[e._v("#"),n("OutboundLink")],1)]),e._v(" "),n("p",[n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process/event_disconnect.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("中英对照"),n("OutboundLink")],1)]),e._v(" "),n("p",[e._v("新增于: v0.7.2")]),e._v(" "),n("p",[e._v("调用父进程中的 "),n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process.html#child_process_subprocess_disconnect",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("subprocess.disconnect()")]),n("OutboundLink")],1),e._v(" 方法或子进程中的 "),n("a",{attrs:{href:"http://nodejs.cn/api-v12/process.html#process_process_disconnect",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("process.disconnect()")]),n("OutboundLink")],1),e._v(" 方法后会触发 "),n("code",[e._v("'disconnect'")]),e._v(" 事件。 断开连接后就不能再发送或接收消息，且 "),n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process.html#child_process_subprocess_connected",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("subprocess.connected")]),n("OutboundLink")],1),e._v(" 属性为 "),n("code",[e._v("false")]),e._v("。")]),e._v(" "),n("h4",{attrs:{id:"error-事件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#error-事件"}},[e._v("#")]),e._v(" "),n("code",[e._v("'error'")]),e._v(" 事件"),n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process.html#event-error",target:"_blank",rel:"noopener noreferrer"}},[e._v("#"),n("OutboundLink")],1)]),e._v(" "),n("p",[n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process/event_error.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("中英对照"),n("OutboundLink")],1)]),e._v(" "),n("ul",[n("li",[n("code",[e._v("err")]),e._v(" "),n("a",{attrs:{href:"http://url.nodejs.cn/qZ873x",target:"_blank",rel:"noopener noreferrer"}},[n("Error",[n("OutboundLink")],1)],1),e._v(" 错误。")])]),e._v(" "),n("p",[n("code",[e._v("'error'")]),e._v(" 事件在以下情况下触发：")]),e._v(" "),n("ol",[n("li",[e._v("无法衍生该进程，或")]),e._v(" "),n("li",[e._v("进程无法终止，或")]),e._v(" "),n("li",[e._v("向子进程发送消息失败。")])]),e._v(" "),n("p",[e._v("发生错误后，"),n("code",[e._v("'exit'")]),e._v(" 事件可能会也可能不会触发。 在监听 "),n("code",[e._v("'exit'")]),e._v(" 和 "),n("code",[e._v("'error'")]),e._v(" 事件时，防止多次意外调用句柄函数。")]),e._v(" "),n("p",[e._v("另见 "),n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process.html#child_process_subprocess_kill_signal",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("subprocess.kill()")]),n("OutboundLink")],1),e._v(" 和 "),n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process.html#child_process_subprocess_send_message_sendhandle_options_callback",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("subprocess.send()")]),n("OutboundLink")],1),e._v("。")]),e._v(" "),n("h4",{attrs:{id:"exit-事件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#exit-事件"}},[e._v("#")]),e._v(" "),n("code",[e._v("'exit'")]),e._v(" 事件"),n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process.html#event-exit",target:"_blank",rel:"noopener noreferrer"}},[e._v("#"),n("OutboundLink")],1)]),e._v(" "),n("p",[n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process/event_exit.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("中英对照"),n("OutboundLink")],1)]),e._v(" "),n("p",[e._v("新增于: v0.1.90")]),e._v(" "),n("ul",[n("li",[n("code",[e._v("code")]),e._v(" "),n("a",{attrs:{href:"http://url.nodejs.cn/SXbo1v",target:"_blank",rel:"noopener noreferrer"}},[n("number",[n("OutboundLink")],1)],1),e._v(" 如果子进程自己退出，则为退出码。")]),e._v(" "),n("li",[n("code",[e._v("signal")]),e._v(" "),n("a",{attrs:{href:"http://url.nodejs.cn/9Tw2bK",target:"_blank",rel:"noopener noreferrer"}},[n("string",[n("OutboundLink")],1)],1),e._v(" 终止子进程的信号。")])]),e._v(" "),n("p",[n("code",[e._v("'exit'")]),e._v(" 事件在子进程结束后触发。 如果进程退出，则 "),n("code",[e._v("code")]),e._v(" 为最终的进程退出码，否则为 "),n("code",[e._v("null")]),e._v("。 如果进程因收到信号而终止，则 "),n("code",[e._v("signal")]),e._v(" 是信号的字符串名称，否则为 "),n("code",[e._v("null")]),e._v("。 两者之一将始终是非 "),n("code",[e._v("null")]),e._v("。")]),e._v(" "),n("p",[e._v("当 "),n("code",[e._v("'exit'")]),e._v(" 事件被触发时，子进程标准输入输出流可能仍处于打开状态。")]),e._v(" "),n("p",[e._v("Node.js 为 "),n("code",[e._v("SIGINT")]),e._v(" 和 "),n("code",[e._v("SIGTERM")]),e._v(" 建立信号句柄，且 Node.js 进程不会因为收到这些信号而立即终止。 而是，Node.js 将执行一系列清理操作，然后重新触发已处理的信号。")]),e._v(" "),n("p",[e._v("参见 "),n("a",{attrs:{href:"http://url.nodejs.cn/amThCi",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("waitpid(2)")]),n("OutboundLink")],1),e._v("。")]),e._v(" "),n("h4",{attrs:{id:"message-事件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#message-事件"}},[e._v("#")]),e._v(" "),n("code",[e._v("'message'")]),e._v(" 事件"),n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process.html#event-message",target:"_blank",rel:"noopener noreferrer"}},[e._v("#"),n("OutboundLink")],1)]),e._v(" "),n("p",[n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process/event_message.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("中英对照"),n("OutboundLink")],1)]),e._v(" "),n("p",[e._v("新增于: v0.5.9")]),e._v(" "),n("ul",[n("li",[n("code",[e._v("message")]),e._v(" "),n("a",{attrs:{href:"http://url.nodejs.cn/jzn6Ao",target:"_blank",rel:"noopener noreferrer"}},[n("Object",[n("OutboundLink")],1)],1),e._v(" 解析的 JSON 对象或原始值。")]),e._v(" "),n("li",[n("code",[e._v("sendHandle")]),e._v(" "),n("a",{attrs:{href:"http://nodejs.cn/api/net.html#serverlistenhandle-backlog-callback",target:"_blank",rel:"noopener noreferrer"}},[n("Handle",[n("OutboundLink")],1)],1),e._v(" "),n("a",{attrs:{href:"http://nodejs.cn/api-v12/net.html#net_class_net_socket",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("net.Socket")]),n("OutboundLink")],1),e._v(" 或 "),n("a",{attrs:{href:"http://nodejs.cn/api-v12/net.html#net_class_net_server",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("net.Server")]),n("OutboundLink")],1),e._v(" 对象、或未定义。")])]),e._v(" "),n("p",[e._v("当子进程使用 "),n("a",{attrs:{href:"http://nodejs.cn/api-v12/process.html#process_process_send_message_sendhandle_options_callback",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("process.send()")]),n("OutboundLink")],1),e._v(" 发送消息时，则触发 "),n("code",[e._v("'message'")]),e._v(" 事件。")]),e._v(" "),n("p",[e._v("消息经过序列化和解析。 结果消息可能与最初发送的消息不同。")]),e._v(" "),n("p",[e._v("如果在衍生子进程时将 "),n("code",[e._v("serialization")]),e._v(" 选项设置为 "),n("code",[e._v("'advanced'")]),e._v("，则 "),n("code",[e._v("message")]),e._v(" 参数可以包含 JSON 无法表示的数据。 有关更多详细信息，请参阅"),n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process.html#child_process_advanced_serialization",target:"_blank",rel:"noopener noreferrer"}},[e._v("高级序列化"),n("OutboundLink")],1),e._v("。")]),e._v(" "),n("h4",{attrs:{id:"subprocess-channel"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#subprocess-channel"}},[e._v("#")]),e._v(" "),n("code",[e._v("subprocess.channel")]),n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process.html#subprocesschannel",target:"_blank",rel:"noopener noreferrer"}},[e._v("#"),n("OutboundLink")],1)]),e._v(" "),n("p",[n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process/subprocess_channel.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("中英对照"),n("OutboundLink")],1)]),e._v(" "),n("p",[e._v("新增于: v7.1.0")]),e._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"http://url.nodejs.cn/jzn6Ao",target:"_blank",rel:"noopener noreferrer"}},[n("Object",[n("OutboundLink")],1)],1),e._v(" 代表到子进程的 IPC 通道的管道。")])]),e._v(" "),n("p",[n("code",[e._v("subprocess.channel")]),e._v(" 属性是对子进程的 IPC 通道的引用。 如果当前不存在 IPC 通道，则此属性为 "),n("code",[e._v("undefined")]),e._v("。")]),e._v(" "),n("h4",{attrs:{id:"subprocess-connected"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#subprocess-connected"}},[e._v("#")]),e._v(" "),n("code",[e._v("subprocess.connected")]),n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process.html#subprocessconnected",target:"_blank",rel:"noopener noreferrer"}},[e._v("#"),n("OutboundLink")],1)]),e._v(" "),n("p",[n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process/subprocess_connected.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("中英对照"),n("OutboundLink")],1)]),e._v(" "),n("p",[e._v("新增于: v0.7.2")]),e._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"http://url.nodejs.cn/jFbvuT",target:"_blank",rel:"noopener noreferrer"}},[n("boolean",[n("OutboundLink")],1)],1),e._v(" 调用 "),n("code",[e._v("subprocess.disconnect()")]),e._v(" 后设置为 "),n("code",[e._v("false")]),e._v("。")])]),e._v(" "),n("p",[n("code",[e._v("subprocess.connected")]),e._v(" 属性指示是否仍然可以从子进程发送和接收消息。 当 "),n("code",[e._v("subprocess.connected")]),e._v(" 为 "),n("code",[e._v("false")]),e._v(" 时，不再可能发送或接收消息。")]),e._v(" "),n("h4",{attrs:{id:"subprocess-disconnect"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#subprocess-disconnect"}},[e._v("#")]),e._v(" "),n("code",[e._v("subprocess.disconnect()")]),n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process.html#subprocessdisconnect",target:"_blank",rel:"noopener noreferrer"}},[e._v("#"),n("OutboundLink")],1)]),e._v(" "),n("p",[n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process/subprocess_disconnect.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("中英对照"),n("OutboundLink")],1)]),e._v(" "),n("p",[e._v("新增于: v0.7.2")]),e._v(" "),n("p",[e._v("关闭父进程和子进程之间的 IPC 通道，一旦没有其他连接使其保持活动状态，则允许子进程正常退出。 调用此方法后，父子进程中的 "),n("code",[e._v("subprocess.connected")]),e._v(" 和 "),n("code",[e._v("process.connected")]),e._v(" 属性（分别）将设置为 "),n("code",[e._v("false")]),e._v("，进程之间将无法再传递消息。")]),e._v(" "),n("p",[e._v("当接收过程中没有消息时，将触发 "),n("code",[e._v("'disconnect'")]),e._v(" 事件。 这通常会在调用 "),n("code",[e._v("subprocess.disconnect()")]),e._v(" 后立即触发。")]),e._v(" "),n("p",[e._v("当子进程是 Node.js 实例（例如使用 "),n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process.html#child_process_child_process_fork_modulepath_args_options",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("child_process.fork()")]),n("OutboundLink")],1),e._v(" 衍生）时，则可以在子进程中调用 "),n("code",[e._v("process.disconnect()")]),e._v(" 方法来关闭 IPC 通道。")]),e._v(" "),n("h4",{attrs:{id:"subprocess-exitcode"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#subprocess-exitcode"}},[e._v("#")]),e._v(" "),n("code",[e._v("subprocess.exitCode")]),n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process.html#subprocessexitcode",target:"_blank",rel:"noopener noreferrer"}},[e._v("#"),n("OutboundLink")],1)]),e._v(" "),n("p",[n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process/subprocess_exitcode.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("中英对照"),n("OutboundLink")],1)]),e._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"http://url.nodejs.cn/SXbo1v",target:"_blank",rel:"noopener noreferrer"}},[n("integer",[n("OutboundLink")],1)],1)])]),e._v(" "),n("p",[n("code",[e._v("subprocess.exitCode")]),e._v(" 属性表示子进程的退出码。 如果子进程仍在运行，则该字段将为 "),n("code",[e._v("null")]),e._v("。")]),e._v(" "),n("h4",{attrs:{id:"subprocess-kill-signal"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#subprocess-kill-signal"}},[e._v("#")]),e._v(" "),n("code",[e._v("subprocess.kill([signal])")]),n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process.html#subprocesskillsignal",target:"_blank",rel:"noopener noreferrer"}},[e._v("#"),n("OutboundLink")],1)]),e._v(" "),n("p",[n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process/subprocess_kill_signal.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("中英对照"),n("OutboundLink")],1)]),e._v(" "),n("p",[e._v("新增于: v0.1.90")]),e._v(" "),n("ul",[n("li",[n("code",[e._v("signal")]),e._v(" "),n("a",{attrs:{href:"http://url.nodejs.cn/SXbo1v",target:"_blank",rel:"noopener noreferrer"}},[n("number",[n("OutboundLink")],1)],1),e._v(" | "),n("a",{attrs:{href:"http://url.nodejs.cn/9Tw2bK",target:"_blank",rel:"noopener noreferrer"}},[n("string",[n("OutboundLink")],1)],1)]),e._v(" "),n("li",[e._v("返回: "),n("a",{attrs:{href:"http://url.nodejs.cn/jFbvuT",target:"_blank",rel:"noopener noreferrer"}},[n("boolean",[n("OutboundLink")],1)],1)])]),e._v(" "),n("p",[n("code",[e._v("subprocess.kill()")]),e._v(" 方法向子进程发送信号。 如果没有给定参数，则进程将被发送 "),n("code",[e._v("'SIGTERM'")]),e._v(" 信号。 有关可用信号的列表，请参阅 "),n("a",{attrs:{href:"http://url.nodejs.cn/Fj3tfw",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("signal(7)")]),n("OutboundLink")],1),e._v("。 如果 "),n("a",{attrs:{href:"http://url.nodejs.cn/KDV7jD",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("kill(2)")]),n("OutboundLink")],1),e._v(" 成功，则此函数返回 "),n("code",[e._v("true")]),e._v("，否则返回 "),n("code",[e._v("false")]),e._v("。")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const { spawn } = require('child_process');\nconst grep = spawn('grep', ['ssh']);\n\ngrep.on('close', (code, signal) => {\n  console.log(\n    `child process terminated due to receipt of signal ${signal}`);\n});\n\n// 发送 SIGHUP 到进程。\ngrep.kill('SIGHUP');\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br")])]),n("p",[e._v("如果信号无法传达，则 "),n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process.html#child_process_child_process",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("ChildProcess")]),n("OutboundLink")],1),e._v(" 对象可能会触发 "),n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process.html#child_process_event_error",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("'error'")]),n("OutboundLink")],1),e._v(" 事件。 向已经退出的子进程发送信号不是错误，但可能会产生不可预见的结果。 具体来说，如果进程标识符 (PID) 已重新分配给另一个进程，则信号将传给该进程，而这可能会产生意外结果。")]),e._v(" "),n("p",[e._v("虽然该函数被称为 "),n("code",[e._v("kill")]),e._v("，但传给子进程的信号实际上可能不会终止该进程。")]),e._v(" "),n("p",[e._v("请参阅 "),n("a",{attrs:{href:"http://url.nodejs.cn/KDV7jD",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("kill(2)")]),n("OutboundLink")],1),e._v(" 以供参考。")]),e._v(" "),n("p",[e._v("在 Linux 上，子进程的子进程在试图杀死其父进程时不会被终止。 当在 shell 中运行新进程或使用 "),n("code",[e._v("ChildProcess")]),e._v(" 的 "),n("code",[e._v("shell")]),e._v(" 选项时，可能会发生这种情况：")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("'use strict';\nconst { spawn } = require('child_process');\n\nconst subprocess = spawn(\n  'sh',\n  [\n    '-c',\n    `node -e \"setInterval(() => {\n      console.log(process.pid, 'is alive')\n    }, 500);\"`\n  ], {\n    stdio: ['inherit', 'inherit', 'inherit']\n  }\n);\n\nsetTimeout(() => {\n  subprocess.kill(); // 不会终止 shell 中的 Node.js 进程。\n}, 2000);\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br"),n("span",{staticClass:"line-number"},[e._v("17")]),n("br"),n("span",{staticClass:"line-number"},[e._v("18")]),n("br")])]),n("h4",{attrs:{id:"subprocess-killed"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#subprocess-killed"}},[e._v("#")]),e._v(" "),n("code",[e._v("subprocess.killed")]),n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process.html#subprocesskilled",target:"_blank",rel:"noopener noreferrer"}},[e._v("#"),n("OutboundLink")],1)]),e._v(" "),n("p",[n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process/subprocess_killed.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("中英对照"),n("OutboundLink")],1)]),e._v(" "),n("p",[e._v("新增于: v0.5.10")]),e._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"http://url.nodejs.cn/jFbvuT",target:"_blank",rel:"noopener noreferrer"}},[n("boolean",[n("OutboundLink")],1)],1),e._v(" 使用 "),n("code",[e._v("subprocess.kill()")]),e._v(" 成功发送信号给子进程后设置为 "),n("code",[e._v("true")]),e._v("。")])]),e._v(" "),n("p",[n("code",[e._v("subprocess.killed")]),e._v(" 属性指示子进程是否成功接收到来自 "),n("code",[e._v("subprocess.kill()")]),e._v(" 的信号。 "),n("code",[e._v("killed")]),e._v(" 属性并不表示子进程已终止。")]),e._v(" "),n("h4",{attrs:{id:"subprocess-pid"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#subprocess-pid"}},[e._v("#")]),e._v(" "),n("code",[e._v("subprocess.pid")]),n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process.html#subprocesspid",target:"_blank",rel:"noopener noreferrer"}},[e._v("#"),n("OutboundLink")],1)]),e._v(" "),n("p",[n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process/subprocess_pid.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("中英对照"),n("OutboundLink")],1)]),e._v(" "),n("p",[e._v("新增于: v0.1.90")]),e._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"http://url.nodejs.cn/SXbo1v",target:"_blank",rel:"noopener noreferrer"}},[n("integer",[n("OutboundLink")],1)],1)])]),e._v(" "),n("p",[e._v("返回子进程的进程标识符 (PID)。")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const { spawn } = require('child_process');\nconst grep = spawn('grep', ['ssh']);\n\nconsole.log(`Spawned child pid: ${grep.pid}`);\ngrep.stdin.end();\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br")])]),n("h4",{attrs:{id:"subprocess-ref"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#subprocess-ref"}},[e._v("#")]),e._v(" "),n("code",[e._v("subprocess.ref()")]),n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process.html#subprocessref",target:"_blank",rel:"noopener noreferrer"}},[e._v("#"),n("OutboundLink")],1)]),e._v(" "),n("p",[n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process/subprocess_ref.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("中英对照"),n("OutboundLink")],1)]),e._v(" "),n("p",[e._v("新增于: v0.7.10")]),e._v(" "),n("p",[e._v("在调用 "),n("code",[e._v("subprocess.unref()")]),e._v(" 后调用 "),n("code",[e._v("subprocess.ref()")]),e._v(" 将为子进程恢复删除的引用计数，迫使父进程在退出之前等待子进程退出。")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const { spawn } = require('child_process');\n\nconst subprocess = spawn(process.argv[0], ['child_program.js'], {\n  detached: true,\n  stdio: 'ignore'\n});\n\nsubprocess.unref();\nsubprocess.ref();\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br")])]),n("h4",{attrs:{id:"subprocess-send-message-sendhandle-options-callback"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#subprocess-send-message-sendhandle-options-callback"}},[e._v("#")]),e._v(" "),n("code",[e._v("subprocess.send(message[, sendHandle[, options]][, callback])")]),n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process.html#subprocesssendmessage-sendhandle-options-callback",target:"_blank",rel:"noopener noreferrer"}},[e._v("#"),n("OutboundLink")],1)]),e._v(" "),n("p",[n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process/subprocess_send_message_sendhandle_options_callback.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("中英对照"),n("OutboundLink")],1)]),e._v(" "),n("ul",[n("li",[n("code",[e._v("message")]),e._v(" "),n("a",{attrs:{href:"http://url.nodejs.cn/jzn6Ao",target:"_blank",rel:"noopener noreferrer"}},[n("Object",[n("OutboundLink")],1)],1)]),e._v(" "),n("li",[n("code",[e._v("sendHandle")]),e._v(" "),n("a",{attrs:{href:"http://nodejs.cn/api/net.html#serverlistenhandle-backlog-callback",target:"_blank",rel:"noopener noreferrer"}},[n("Handle",[n("OutboundLink")],1)],1)]),e._v(" "),n("li",[n("code",[e._v("options")]),e._v(" "),n("a",{attrs:{href:"http://url.nodejs.cn/jzn6Ao",target:"_blank",rel:"noopener noreferrer"}},[n("Object",[n("OutboundLink")],1)],1),e._v(" "),n("code",[e._v("options")]),e._v(" 参数（如果存在）是用于参数化某些类型句柄的发送的对象。 "),n("code",[e._v("options")]),e._v(" 支持以下属性：\n"),n("ul",[n("li",[n("code",[e._v("keepOpen")]),e._v(" "),n("a",{attrs:{href:"http://url.nodejs.cn/jFbvuT",target:"_blank",rel:"noopener noreferrer"}},[n("boolean",[n("OutboundLink")],1)],1),e._v(" 当传入 "),n("code",[e._v("net.Socket")]),e._v(" 实例时可以使用的值。 当为 "),n("code",[e._v("true")]),e._v(" 时，套接字在发送过程中保持打开状态。 "),n("strong",[e._v("默认值:")]),e._v(" "),n("code",[e._v("false")]),e._v("。")])])]),e._v(" "),n("li",[n("code",[e._v("callback")]),e._v(" "),n("a",{attrs:{href:"http://url.nodejs.cn/ceTQa6",target:"_blank",rel:"noopener noreferrer"}},[n("Function",[n("OutboundLink")],1)],1)]),e._v(" "),n("li",[e._v("返回: "),n("a",{attrs:{href:"http://url.nodejs.cn/jFbvuT",target:"_blank",rel:"noopener noreferrer"}},[n("boolean",[n("OutboundLink")],1)],1)])]),e._v(" "),n("p",[e._v("当父进程和子进程之间建立了 IPC 通道时（即当使用 "),n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process.html#child_process_child_process_fork_modulepath_args_options",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("child_process.fork()")]),n("OutboundLink")],1),e._v(" 时），可以使用 "),n("code",[e._v("subprocess.send()")]),e._v(" 方法向子进程发送消息。 当子进程是 Node.js 实例时，可以通过 "),n("a",{attrs:{href:"http://nodejs.cn/api-v12/process.html#process_event_message",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("'message'")]),n("OutboundLink")],1),e._v(" 事件接收这些消息。")]),e._v(" "),n("p",[e._v("消息经过序列化和解析。 结果消息可能与最初发送的消息不同。")]),e._v(" "),n("p",[e._v("例如，在父进程脚本中：")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const cp = require('child_process');\nconst n = cp.fork(`${__dirname}/sub.js`);\n\nn.on('message', (m) => {\n  console.log('PARENT got message:', m);\n});\n\n// 引起子进程打印：CHILD got message: { hello: 'world' }\nn.send({ hello: 'world' });\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br")])]),n("p",[e._v("然后子进程脚本 "),n("code",[e._v("'sub.js'")]),e._v(" 可能如下所示：")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("process.on('message', (m) => {\n  console.log('CHILD got message:', m);\n});\n\n// 引起父进程打印：PARENT got message: { foo: 'bar', baz: null }\nprocess.send({ foo: 'bar', baz: NaN });\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br")])]),n("p",[e._v("子 Node.js 进程将拥有自己的 "),n("a",{attrs:{href:"http://nodejs.cn/api-v12/process.html#process_process_send_message_sendhandle_options_callback",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("process.send()")]),n("OutboundLink")],1),e._v(" 方法，允许子进程将消息发送回父进程。")]),e._v(" "),n("p",[e._v("当发送 "),n("code",[e._v("{cmd: 'NODE_foo'}")]),e._v(" 消息时是一种特殊情况。 在 "),n("code",[e._v("cmd")]),e._v(" 属性中包含 "),n("code",[e._v("NODE_")]),e._v(" 前缀的消息是 Node.js 核心预留使用的，不会在子进程的 "),n("a",{attrs:{href:"http://nodejs.cn/api-v12/process.html#process_event_message",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("'message'")]),n("OutboundLink")],1),e._v(" 事件中触发。 而是，此类消息使用 "),n("code",[e._v("'internalMessage'")]),e._v(" 事件触发，并由 Node.js 在内部使用。 应用程序应避免使用此类消息或监听 "),n("code",[e._v("'internalMessage'")]),e._v(" 事件，因为它可能随时更改，恕不另行通知。")]),e._v(" "),n("p",[e._v("可以传给 "),n("code",[e._v("subprocess.send()")]),e._v(" 的可选 "),n("code",[e._v("sendHandle")]),e._v(" 参数用于将 TCP 服务器或套接字对象传给子进程。 子进程将接收该对象作为传给在 "),n("a",{attrs:{href:"http://nodejs.cn/api-v12/process.html#process_event_message",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("'message'")]),n("OutboundLink")],1),e._v(" 事件上注册的回调函数的第二个参数。 在套接字中接收和缓冲的任何数据都不会发送给子进程。")]),e._v(" "),n("p",[e._v("可选的 "),n("code",[e._v("callback")]),e._v(" 函数将在消息发送之后但在子进程可能接收到它之前调用。 该函数使用单个参数调用：成功时为 "),n("code",[e._v("null")]),e._v("，失败时为 "),n("a",{attrs:{href:"http://nodejs.cn/api-v12/errors.html#errors_class_error",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("Error")]),n("OutboundLink")],1),e._v(" 对象。")]),e._v(" "),n("p",[e._v("如果没有提供 "),n("code",[e._v("callback")]),e._v(" 函数且无法发送消息，则 "),n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process.html#child_process_child_process",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("ChildProcess")]),n("OutboundLink")],1),e._v(" 对象将触发 "),n("code",[e._v("'error'")]),e._v(" 事件。 例如，当子进程已经退出时，就会发生这种情况。")]),e._v(" "),n("p",[e._v("如果通道已关闭或未发送消息的积压超过阈值（这使得发送更多消息是不明智的），则 "),n("code",[e._v("subprocess.send()")]),e._v(" 将返回 "),n("code",[e._v("false")]),e._v("。 否则，该方法返回 "),n("code",[e._v("true")]),e._v("。 "),n("code",[e._v("callback")]),e._v(" 函数可用于实现流量控制。")]),e._v(" "),n("h5",{attrs:{id:"示例-发送服务器对象"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#示例-发送服务器对象"}},[e._v("#")]),e._v(" 示例：发送服务器对象"),n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process.html#example-sending-a-server-object",target:"_blank",rel:"noopener noreferrer"}},[e._v("#"),n("OutboundLink")],1)]),e._v(" "),n("p",[n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process/example_sending_a_server_object.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("中英对照"),n("OutboundLink")],1)]),e._v(" "),n("p",[e._v("例如，可以使用 "),n("code",[e._v("sendHandle")]),e._v(" 参数将 TCP 服务器对象的句柄传给子进程，如下例所示：")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const subprocess = require('child_process').fork('subprocess.js');\n\n// 打开服务器对象并发送句柄。\nconst server = require('net').createServer();\nserver.on('connection', (socket) => {\n  socket.end('handled by parent');\n});\nserver.listen(1337, () => {\n  subprocess.send('server', server);\n});\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br")])]),n("p",[e._v("然后子进程将收到服务器对象：")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("process.on('message', (m, server) => {\n  if (m === 'server') {\n    server.on('connection', (socket) => {\n      socket.end('handled by child');\n    });\n  }\n});\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br")])]),n("p",[e._v("一旦服务器现在在父进程和子进程之间共享，则一些连接可以由父进程处理，一些连接由子进程处理。")]),e._v(" "),n("p",[e._v("虽然上面的示例使用使用 "),n("code",[e._v("net")]),e._v(" 模块创建的服务器，但 "),n("code",[e._v("dgram")]),e._v(" 模块服务器使用完全相同的工作流程，除了监听 "),n("code",[e._v("'message'")]),e._v(" 事件而不是 "),n("code",[e._v("'connection'")]),e._v(" 和使用 "),n("code",[e._v("server.bind()")]),e._v(" 而不是 "),n("code",[e._v("server.listen()")]),e._v("。 但是，目前仅在 Unix 平台上支持。")]),e._v(" "),n("h5",{attrs:{id:"示例-发送套接字对象"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#示例-发送套接字对象"}},[e._v("#")]),e._v(" 示例：发送套接字对象"),n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process.html#example-sending-a-socket-object",target:"_blank",rel:"noopener noreferrer"}},[e._v("#"),n("OutboundLink")],1)]),e._v(" "),n("p",[n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process/example_sending_a_socket_object.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("中英对照"),n("OutboundLink")],1)]),e._v(" "),n("p",[e._v("同样，"),n("code",[e._v("sendHandler")]),e._v(" 参数可用于将套接字的句柄传给子进程。 下面的例子产生了两个子进程，每个子进程都处理具有“normal”或“special”优先级的连接：")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const { fork } = require('child_process');\nconst normal = fork('subprocess.js', ['normal']);\nconst special = fork('subprocess.js', ['special']);\n\n// 打开服务器并将套接字发送给子进程。\n// 使用 pauseOnConnect 防止套接字在发送到子进程之前被读取。\nconst server = require('net').createServer({ pauseOnConnect: true });\nserver.on('connection', (socket) => {\n\n  // 如果这是 special 优先级...\n  if (socket.remoteAddress === '74.125.127.100') {\n    special.send('socket', socket);\n    return;\n  }\n  // 这是 normal 优先级。\n  normal.send('socket', socket);\n});\nserver.listen(1337);\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br"),n("span",{staticClass:"line-number"},[e._v("17")]),n("br"),n("span",{staticClass:"line-number"},[e._v("18")]),n("br")])]),n("p",[n("code",[e._v("subprocess.js")]),e._v(" 将接收套接字句柄作为传给事件回调函数的第二个参数：")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("process.on('message', (m, socket) => {\n  if (m === 'socket') {\n    if (socket) {\n      // 检查客户端套接字是否存在。\n      // 套接字可能会在发送和在子进程中接收到它之间关闭。\n      socket.end(`Request handled with ${process.argv[2]} priority`);\n    }\n  }\n});\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br")])]),n("p",[e._v("不要在已传给子进程的套接字上使用 "),n("code",[e._v(".maxConnections")]),e._v("。 父进程无法跟踪套接字何时被销毁。")]),e._v(" "),n("p",[e._v("子进程中的任何 "),n("code",[e._v("'message'")]),e._v(" 句柄都应验证 "),n("code",[e._v("socket")]),e._v(" 是否存在，因为在将连接发送到子进程所需的时间内，连接可能已关闭。")]),e._v(" "),n("h4",{attrs:{id:"subprocess-signalcode"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#subprocess-signalcode"}},[e._v("#")]),e._v(" "),n("code",[e._v("subprocess.signalCode")]),n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process.html#subprocesssignalcode",target:"_blank",rel:"noopener noreferrer"}},[e._v("#"),n("OutboundLink")],1)]),e._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"http://url.nodejs.cn/SXbo1v",target:"_blank",rel:"noopener noreferrer"}},[n("integer",[n("OutboundLink")],1)],1)])]),e._v(" "),n("p",[e._v("The "),n("code",[e._v("subprocess.signalCode")]),e._v(" property indicates the signal number received by the child process if any, else "),n("code",[e._v("null")]),e._v(".")]),e._v(" "),n("h4",{attrs:{id:"subprocess-spawnargs"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#subprocess-spawnargs"}},[e._v("#")]),e._v(" "),n("code",[e._v("subprocess.spawnargs")]),n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process.html#subprocessspawnargs",target:"_blank",rel:"noopener noreferrer"}},[e._v("#"),n("OutboundLink")],1)]),e._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"http://url.nodejs.cn/ZJSz23",target:"_blank",rel:"noopener noreferrer"}},[n("Array",[n("OutboundLink")],1)],1)])]),e._v(" "),n("p",[e._v("The "),n("code",[e._v("subprocess.spawnargs")]),e._v(" property represents the full list of command line arguments the child process was launched with.")]),e._v(" "),n("h4",{attrs:{id:"subprocess-spawnfile"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#subprocess-spawnfile"}},[e._v("#")]),e._v(" "),n("code",[e._v("subprocess.spawnfile")]),n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process.html#subprocessspawnfile",target:"_blank",rel:"noopener noreferrer"}},[e._v("#"),n("OutboundLink")],1)]),e._v(" "),n("p",[n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process/subprocess_spawnfile.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("中英对照"),n("OutboundLink")],1)]),e._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"http://url.nodejs.cn/9Tw2bK",target:"_blank",rel:"noopener noreferrer"}},[n("string",[n("OutboundLink")],1)],1)])]),e._v(" "),n("p",[n("code",[e._v("subprocess.spawnfile")]),e._v(" 属性表示启动的子进程的可执行文件名。")]),e._v(" "),n("p",[e._v("对于 "),n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process.html#child_process_child_process_fork_modulepath_args_options",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("child_process.fork()")]),n("OutboundLink")],1),e._v("，其值将等于 "),n("a",{attrs:{href:"http://nodejs.cn/api-v12/process.html#process_process_execpath",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("process.execPath")]),n("OutboundLink")],1),e._v("。 对于 "),n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process.html#child_process_child_process_spawn_command_args_options",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("child_process.spawn()")]),n("OutboundLink")],1),e._v("，它的值将是可执行文件的名称。 对于 "),n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process.html#child_process_child_process_exec_command_options_callback",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("child_process.exec()")]),n("OutboundLink")],1),e._v("，它的值将是启动子进程的 shell 的名称。")]),e._v(" "),n("h4",{attrs:{id:"subprocess-stderr"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#subprocess-stderr"}},[e._v("#")]),e._v(" "),n("code",[e._v("subprocess.stderr")]),n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process.html#subprocessstderr",target:"_blank",rel:"noopener noreferrer"}},[e._v("#"),n("OutboundLink")],1)]),e._v(" "),n("p",[n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process/subprocess_stderr.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("中英对照"),n("OutboundLink")],1)]),e._v(" "),n("p",[e._v("新增于: v0.1.90")]),e._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"http://nodejs.cn/api/stream.html#class-streamreadable",target:"_blank",rel:"noopener noreferrer"}},[e._v("<stream.Readable>"),n("OutboundLink")],1)])]),e._v(" "),n("p",[e._v("代表子进程的 "),n("code",[e._v("stderr")]),e._v(" 的 "),n("code",[e._v("Readable Stream")]),e._v("。")]),e._v(" "),n("p",[e._v("如果子进程衍生时 "),n("code",[e._v("stdio[2]")]),e._v(" 设置为 "),n("code",[e._v("'pipe'")]),e._v(" 以外的任何值，则此将是 "),n("code",[e._v("null")]),e._v("。")]),e._v(" "),n("p",[n("code",[e._v("subprocess.stderr")]),e._v(" 是 "),n("code",[e._v("subprocess.stdio[2]")]),e._v(" 的别名。 这两个属性将引用相同的值。")]),e._v(" "),n("h4",{attrs:{id:"subprocess-stdin"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#subprocess-stdin"}},[e._v("#")]),e._v(" "),n("code",[e._v("subprocess.stdin")]),n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process.html#subprocessstdin",target:"_blank",rel:"noopener noreferrer"}},[e._v("#"),n("OutboundLink")],1)]),e._v(" "),n("p",[n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process/subprocess_stdin.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("中英对照"),n("OutboundLink")],1)]),e._v(" "),n("p",[e._v("新增于: v0.1.90")]),e._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"http://nodejs.cn/api/stream.html#class-streamwritable",target:"_blank",rel:"noopener noreferrer"}},[e._v("<stream.Writable>"),n("OutboundLink")],1)])]),e._v(" "),n("p",[e._v("代表子进程的 "),n("code",[e._v("stdin")]),e._v(" 的 "),n("code",[e._v("Writable Stream")]),e._v("。")]),e._v(" "),n("p",[e._v("如果子进程等待读取其所有输入，则在通过 "),n("code",[e._v("end()")]),e._v(" 关闭此流之前，子进程将不会继续。")]),e._v(" "),n("p",[e._v("如果子进程衍生时 "),n("code",[e._v("stdio[0]")]),e._v(" 设置为 "),n("code",[e._v("'pipe'")]),e._v(" 以外的任何值，则此将是 "),n("code",[e._v("null")]),e._v("。")]),e._v(" "),n("p",[n("code",[e._v("subprocess.stdin")]),e._v(" 是 "),n("code",[e._v("subprocess.stdio[0]")]),e._v(" 的别名。 这两个属性将引用相同的值。")]),e._v(" "),n("h4",{attrs:{id:"subprocess-stdio"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#subprocess-stdio"}},[e._v("#")]),e._v(" "),n("code",[e._v("subprocess.stdio")]),n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process.html#subprocessstdio",target:"_blank",rel:"noopener noreferrer"}},[e._v("#"),n("OutboundLink")],1)]),e._v(" "),n("p",[n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process/subprocess_stdio.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("中英对照"),n("OutboundLink")],1)]),e._v(" "),n("p",[e._v("新增于: v0.7.10")]),e._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"http://url.nodejs.cn/ZJSz23",target:"_blank",rel:"noopener noreferrer"}},[n("Array",[n("OutboundLink")],1)],1)])]),e._v(" "),n("p",[e._v("到子进程的稀疏管道数组，对应于传给 "),n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process.html#child_process_child_process_spawn_command_args_options",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("child_process.spawn()")]),n("OutboundLink")],1),e._v(" 的 "),n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process.html#child_process_options_stdio",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("stdio")]),n("OutboundLink")],1),e._v(" 选项中的位置，这些位置已设置为值 "),n("code",[e._v("'pipe'")]),e._v("。 "),n("code",[e._v("subprocess.stdio[0]")]),e._v("、"),n("code",[e._v("subprocess.stdio[1]")]),e._v(" 和 "),n("code",[e._v("subprocess.stdio[2]")]),e._v(" 也可分别用作 "),n("code",[e._v("subprocess.stdin")]),e._v("、"),n("code",[e._v("subprocess.stdout")]),e._v(" 和 "),n("code",[e._v("subprocess.stderr")]),e._v("。")]),e._v(" "),n("p",[e._v("在下面的例子中，只有子进程的文件描述符 "),n("code",[e._v("1")]),e._v(" (标准输出) 被配置为管道，所以只有进程的 "),n("code",[e._v("subprocess.stdio[1]")]),e._v(" 是流，数组中的所有其他值都是 "),n("code",[e._v("null")]),e._v("。")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const assert = require('assert');\nconst fs = require('fs');\nconst child_process = require('child_process');\n\nconst subprocess = child_process.spawn('ls', {\n  stdio: [\n    0, // 为子进程使用父进程的标准输入。\n    'pipe', // 管道子进程的标准输出到父进程。\n    fs.openSync('err.out', 'w') // 将子进程的标准错误定向到文件。\n  ]\n});\n\nassert.strictEqual(subprocess.stdio[0], null);\nassert.strictEqual(subprocess.stdio[0], subprocess.stdin);\n\nassert(subprocess.stdout);\nassert.strictEqual(subprocess.stdio[1], subprocess.stdout);\n\nassert.strictEqual(subprocess.stdio[2], null);\nassert.strictEqual(subprocess.stdio[2], subprocess.stderr);\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br"),n("span",{staticClass:"line-number"},[e._v("17")]),n("br"),n("span",{staticClass:"line-number"},[e._v("18")]),n("br"),n("span",{staticClass:"line-number"},[e._v("19")]),n("br"),n("span",{staticClass:"line-number"},[e._v("20")]),n("br")])]),n("h4",{attrs:{id:"subprocess-stdout"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#subprocess-stdout"}},[e._v("#")]),e._v(" "),n("code",[e._v("subprocess.stdout")]),n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process.html#subprocessstdout",target:"_blank",rel:"noopener noreferrer"}},[e._v("#"),n("OutboundLink")],1)]),e._v(" "),n("p",[n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process/subprocess_stdout.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("中英对照"),n("OutboundLink")],1)]),e._v(" "),n("p",[e._v("新增于: v0.1.90")]),e._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"http://nodejs.cn/api/stream.html#class-streamreadable",target:"_blank",rel:"noopener noreferrer"}},[e._v("<stream.Readable>"),n("OutboundLink")],1)])]),e._v(" "),n("p",[e._v("代表子进程的 "),n("code",[e._v("stdout")]),e._v(" 的 "),n("code",[e._v("Readable Stream")]),e._v("。")]),e._v(" "),n("p",[e._v("如果子进程衍生时 "),n("code",[e._v("stdio[1]")]),e._v(" 设置为 "),n("code",[e._v("'pipe'")]),e._v(" 以外的任何值，则此将是 "),n("code",[e._v("null")]),e._v("。")]),e._v(" "),n("p",[n("code",[e._v("subprocess.stdout")]),e._v(" 是 "),n("code",[e._v("subprocess.stdio[1]")]),e._v(" 的别名。 这两个属性将引用相同的值。")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const { spawn } = require('child_process');\n\nconst subprocess = spawn('ls');\n\nsubprocess.stdout.on('data', (data) => {\n  console.log(`Received chunk ${data}`);\n});\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br")])]),n("h4",{attrs:{id:"subprocess-unref"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#subprocess-unref"}},[e._v("#")]),e._v(" "),n("code",[e._v("subprocess.unref()")]),n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process.html#subprocessunref",target:"_blank",rel:"noopener noreferrer"}},[e._v("#"),n("OutboundLink")],1)]),e._v(" "),n("p",[n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process/subprocess_unref.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("中英对照"),n("OutboundLink")],1)]),e._v(" "),n("p",[e._v("新增于: v0.7.10")]),e._v(" "),n("p",[e._v("默认情况下，父进程将等待分离的子进程退出。 为了防止父进程等待给定的 "),n("code",[e._v("subprocess")]),e._v(" 退出，则使用 "),n("code",[e._v("subprocess.unref()")]),e._v(" 方法。 这样做会使父进程的事件循环不将子进程包括在其引用计数中，从而允许父进程独立于子进程退出，除非在子进程和父进程之间建立了 IPC 通道。")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const { spawn } = require('child_process');\n\nconst subprocess = spawn(process.argv[0], ['child_program.js'], {\n  detached: true,\n  stdio: 'ignore'\n});\n\nsubprocess.unref();\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br")])]),n("h3",{attrs:{id:"maxbuffer-和-unicode"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#maxbuffer-和-unicode"}},[e._v("#")]),e._v(" maxBuffer 和 Unicode"),n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process.html#maxbuffer-and-unicode",target:"_blank",rel:"noopener noreferrer"}},[e._v("#"),n("OutboundLink")],1)]),e._v(" "),n("p",[n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process/maxbuffer_and_unicode.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("中英对照"),n("OutboundLink")],1)]),e._v(" "),n("p",[n("code",[e._v("maxBuffer")]),e._v(" 选项指定 "),n("code",[e._v("stdout")]),e._v(" 或 "),n("code",[e._v("stderr")]),e._v(" 上允许的最大字节数。 如果超过此值，则终止子进程。 这会影响包含多字节字符编码（例如 UTF-8 或 UTF-16）的输出。 例如，"),n("code",[e._v("console.log('中文测试')")]),e._v(" 将向 "),n("code",[e._v("stdout")]),e._v(" 发送 13 个 UTF-8 编码字节，尽管只有 4 个字符。")]),e._v(" "),n("h3",{attrs:{id:"shell-的要求"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#shell-的要求"}},[e._v("#")]),e._v(" shell 的要求"),n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process.html#shell-requirements",target:"_blank",rel:"noopener noreferrer"}},[e._v("#"),n("OutboundLink")],1)]),e._v(" "),n("p",[n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process/shell_requirements.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("中英对照"),n("OutboundLink")],1)]),e._v(" "),n("p",[e._v("shell 应该理解 "),n("code",[e._v("-c")]),e._v(" 开关。")]),e._v(" "),n("h3",{attrs:{id:"默认的-windows-shell"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#默认的-windows-shell"}},[e._v("#")]),e._v(" 默认的 Windows shell"),n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process.html#default-windows-shell",target:"_blank",rel:"noopener noreferrer"}},[e._v("#"),n("OutboundLink")],1)]),e._v(" "),n("p",[n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process/default_windows_shell.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("中英对照"),n("OutboundLink")],1)]),e._v(" "),n("p",[e._v("尽管微软指定 "),n("code",[e._v("%COMSPEC%")]),e._v(" 必须包含根环境中到 "),n("code",[e._v("'cmd.exe'")]),e._v(" 的路径，但子进程并不总是受到相同的要求。 因此，在可以衍生 shell 的 "),n("code",[e._v("child_process")]),e._v(" 函数中，如果 "),n("code",[e._v("process.env.ComSpec")]),e._v(" 不可用，则使用 "),n("code",[e._v("'cmd.exe'")]),e._v(" 作为后备。")]),e._v(" "),n("h3",{attrs:{id:"高级序列化"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#高级序列化"}},[e._v("#")]),e._v(" 高级序列化"),n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process.html#advanced-serialization",target:"_blank",rel:"noopener noreferrer"}},[e._v("#"),n("OutboundLink")],1)]),e._v(" "),n("p",[n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process/advanced_serialization.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("中英对照"),n("OutboundLink")],1)]),e._v(" "),n("p",[e._v("新增于: v12.16.0")]),e._v(" "),n("p",[e._v("子进程支持 IPC 的序列化机制，该机制基于 "),n("a",{attrs:{href:"http://nodejs.cn/api-v12/v8.html#v8_serialization_api",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("v8")]),e._v(" 模块的序列化 API"),n("OutboundLink")],1),e._v("，基于 "),n("a",{attrs:{href:"http://url.nodejs.cn/SLsDHc",target:"_blank",rel:"noopener noreferrer"}},[e._v("HTML 结构化克隆算法"),n("OutboundLink")],1),e._v("。 这通常功能更强大，支持更多内置的 JavaScript 对象类型，例如 "),n("code",[e._v("BigInt")]),e._v("、"),n("code",[e._v("Map")]),e._v(" 和 "),n("code",[e._v("Set")]),e._v("、"),n("code",[e._v("ArrayBuffer")]),e._v(" 和 "),n("code",[e._v("TypedArray")]),e._v("、"),n("code",[e._v("Buffer")]),e._v("、"),n("code",[e._v("Error")]),e._v("、"),n("code",[e._v("RegExp")]),e._v(" 等。")]),e._v(" "),n("p",[e._v("但是，这种格式不是 JSON 的完整超集，例如 在此类内置类型的对象上设置的属性不会通过序列化步骤传递。 此外，性能可能不等同于 JSON，具体取决于传递数据的结构。 因此，此功能需要在调用 "),n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process.html#child_process_child_process_spawn_command_args_options",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("child_process.spawn()")]),n("OutboundLink")],1),e._v(" 或 "),n("a",{attrs:{href:"http://nodejs.cn/api-v12/child_process.html#child_process_child_process_fork_modulepath_args_options",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("child_process.fork()")]),n("OutboundLink")],1),e._v(" 时通过将 "),n("code",[e._v("serialization")]),e._v(" 选项设置为 "),n("code",[e._v("'advanced'")]),e._v(" 来选择加入。")])])}),[],!1,null,null,null);r.default=t.exports}}]);