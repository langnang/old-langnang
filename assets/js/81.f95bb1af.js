(window.webpackJsonp=window.webpackJsonp||[]).push([[81],{550:function(s,e,n){"use strict";n.r(e);var a=n(18),r=Object(a.a)({},(function(){var s=this,e=s.$createElement,n=s._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h1",{attrs:{id:"module-的加载实现"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#module-的加载实现"}},[s._v("#")]),s._v(" Module 的加载实现")]),s._v(" "),n("ol",[n("li",[n("a",{attrs:{href:"https://es6.ruanyifeng.com/#docs/module-loader#%E6%B5%8F%E8%A7%88%E5%99%A8%E5%8A%A0%E8%BD%BD",target:"_blank",rel:"noopener noreferrer"}},[s._v("浏览器加载"),n("OutboundLink")],1)]),s._v(" "),n("li",[n("a",{attrs:{href:"https://es6.ruanyifeng.com/#docs/module-loader#ES6%20%E6%A8%A1%E5%9D%97%E4%B8%8E%20CommonJS%20%E6%A8%A1%E5%9D%97%E7%9A%84%E5%B7%AE%E5%BC%82",target:"_blank",rel:"noopener noreferrer"}},[s._v("ES6 模块与 CommonJS 模块的差异"),n("OutboundLink")],1)]),s._v(" "),n("li",[n("a",{attrs:{href:"https://es6.ruanyifeng.com/#docs/module-loader#Node.js%20%E7%9A%84%E6%A8%A1%E5%9D%97%E5%8A%A0%E8%BD%BD%E6%96%B9%E6%B3%95",target:"_blank",rel:"noopener noreferrer"}},[s._v("Node.js 的模块加载方法"),n("OutboundLink")],1)]),s._v(" "),n("li",[n("a",{attrs:{href:"https://es6.ruanyifeng.com/#docs/module-loader#%E5%BE%AA%E7%8E%AF%E5%8A%A0%E8%BD%BD",target:"_blank",rel:"noopener noreferrer"}},[s._v("循环加载"),n("OutboundLink")],1)])]),s._v(" "),n("p",[s._v("上一章介绍了模块的语法，本章介绍如何在浏览器和 Node.js 之中加载 ES6 模块，以及实际开发中经常遇到的一些问题（比如循环加载）。")]),s._v(" "),n("h2",{attrs:{id:"浏览器加载"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#浏览器加载"}},[s._v("#")]),s._v(" 浏览器加载")]),s._v(" "),n("h3",{attrs:{id:"传统方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#传统方法"}},[s._v("#")]),s._v(" 传统方法")]),s._v(" "),n("p",[s._v("HTML 网页中，浏览器通过"),n("code",[s._v("<script>")]),s._v("标签加载 JavaScript 脚本。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('\x3c!-- 页面内嵌的脚本 --\x3e\n<script type="application/javascript">\n  // module code\n<\/script>\n\n\x3c!-- 外部脚本 --\x3e\n<script type="application/javascript" src="path/to/myModule.js">\n<\/script>\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br")])]),n("p",[s._v("上面代码中，由于浏览器脚本的默认语言是 JavaScript，因此"),n("code",[s._v('type="application/javascript"')]),s._v("可以省略。")]),s._v(" "),n("p",[s._v("默认情况下，浏览器是同步加载 JavaScript 脚本，即渲染引擎遇到"),n("code",[s._v("<script>")]),s._v("标签就会停下来，等到执行完脚本，再继续向下渲染。如果是外部脚本，还必须加入脚本下载的时间。")]),s._v(" "),n("p",[s._v("如果脚本体积很大，下载和执行的时间就会很长，因此造成浏览器堵塞，用户会感觉到浏览器“卡死”了，没有任何响应。这显然是很不好的体验，所以浏览器允许脚本异步加载，下面就是两种异步加载的语法。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('<script src="path/to/myModule.js" defer><\/script>\n<script src="path/to/myModule.js" async><\/script>\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[s._v("上面代码中，"),n("code",[s._v("<script>")]),s._v("标签打开"),n("code",[s._v("defer")]),s._v("或"),n("code",[s._v("async")]),s._v("属性，脚本就会异步加载。渲染引擎遇到这一行命令，就会开始下载外部脚本，但不会等它下载和执行，而是直接执行后面的命令。")]),s._v(" "),n("p",[n("code",[s._v("defer")]),s._v("与"),n("code",[s._v("async")]),s._v("的区别是："),n("code",[s._v("defer")]),s._v("要等到整个页面在内存中正常渲染结束（DOM 结构完全生成，以及其他脚本执行完成），才会执行；"),n("code",[s._v("async")]),s._v("一旦下载完，渲染引擎就会中断渲染，执行这个脚本以后，再继续渲染。一句话，"),n("code",[s._v("defer")]),s._v("是“渲染完再执行”，"),n("code",[s._v("async")]),s._v("是“下载完就执行”。另外，如果有多个"),n("code",[s._v("defer")]),s._v("脚本，会按照它们在页面出现的顺序加载，而多个"),n("code",[s._v("async")]),s._v("脚本是不能保证加载顺序的。")]),s._v(" "),n("h3",{attrs:{id:"加载规则"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#加载规则"}},[s._v("#")]),s._v(" 加载规则")]),s._v(" "),n("p",[s._v("浏览器加载 ES6 模块，也使用"),n("code",[s._v("<script>")]),s._v("标签，但是要加入"),n("code",[s._v('type="module"')]),s._v("属性。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('<script type="module" src="./foo.js"><\/script>\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[s._v("上面代码在网页中插入一个模块"),n("code",[s._v("foo.js")]),s._v("，由于"),n("code",[s._v("type")]),s._v("属性设为"),n("code",[s._v("module")]),s._v("，所以浏览器知道这是一个 ES6 模块。")]),s._v(" "),n("p",[s._v("浏览器对于带有"),n("code",[s._v('type="module"')]),s._v("的"),n("code",[s._v("<script>")]),s._v("，都是异步加载，不会造成堵塞浏览器，即等到整个页面渲染完，再执行模块脚本，等同于打开了"),n("code",[s._v("<script>")]),s._v("标签的"),n("code",[s._v("defer")]),s._v("属性。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('<script type="module" src="./foo.js"><\/script>\n\x3c!-- 等同于 --\x3e\n<script type="module" src="./foo.js" defer><\/script>\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[s._v("如果网页有多个"),n("code",[s._v('<script type="module">')]),s._v("，它们会按照在页面出现的顺序依次执行。")]),s._v(" "),n("p",[n("code",[s._v("<script>")]),s._v("标签的"),n("code",[s._v("async")]),s._v("属性也可以打开，这时只要加载完成，渲染引擎就会中断渲染立即执行。执行完成后，再恢复渲染。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('<script type="module" src="./foo.js" async><\/script>\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[s._v("一旦使用了"),n("code",[s._v("async")]),s._v("属性，"),n("code",[s._v('<script type="module">')]),s._v("就不会按照在页面出现的顺序执行，而是只要该模块加载完成，就执行该模块。")]),s._v(" "),n("p",[s._v("ES6 模块也允许内嵌在网页中，语法行为与加载外部脚本完全一致。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('<script type="module">\n  import utils from "./utils.js";\n\n  // other code\n<\/script>\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("p",[s._v("举例来说，jQuery 就支持模块加载。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("<script type=\"module\">\n  import $ from \"./jquery/src/jquery.js\";\n  $('#message').text('Hi from jQuery!');\n<\/script>\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("p",[s._v("对于外部的模块脚本（上例是"),n("code",[s._v("foo.js")]),s._v("），有几点需要注意。")]),s._v(" "),n("ul",[n("li",[s._v("代码是在模块作用域之中运行，而不是在全局作用域运行。模块内部的顶层变量，外部不可见。")]),s._v(" "),n("li",[s._v("模块脚本自动采用严格模式，不管有没有声明"),n("code",[s._v("use strict")]),s._v("。")]),s._v(" "),n("li",[s._v("模块之中，可以使用"),n("code",[s._v("import")]),s._v("命令加载其他模块（"),n("code",[s._v(".js")]),s._v("后缀不可省略，需要提供绝对 URL 或相对 URL），也可以使用"),n("code",[s._v("export")]),s._v("命令输出对外接口。")]),s._v(" "),n("li",[s._v("模块之中，顶层的"),n("code",[s._v("this")]),s._v("关键字返回"),n("code",[s._v("undefined")]),s._v("，而不是指向"),n("code",[s._v("window")]),s._v("。也就是说，在模块顶层使用"),n("code",[s._v("this")]),s._v("关键字，是无意义的。")]),s._v(" "),n("li",[s._v("同一个模块如果加载多次，将只执行一次。")])]),s._v(" "),n("p",[s._v("下面是一个示例模块。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("import utils from 'https://example.com/js/utils.js';\n\nconst x = 1;\n\nconsole.log(x === window.x); //false\nconsole.log(this === undefined); // true\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("p",[s._v("利用顶层的"),n("code",[s._v("this")]),s._v("等于"),n("code",[s._v("undefined")]),s._v("这个语法点，可以侦测当前代码是否在 ES6 模块之中。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("const isNotModuleScript = this !== undefined;\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("h2",{attrs:{id:"es6-模块与-commonjs-模块的差异"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#es6-模块与-commonjs-模块的差异"}},[s._v("#")]),s._v(" ES6 模块与 CommonJS 模块的差异")]),s._v(" "),n("p",[s._v("讨论 Node.js 加载 ES6 模块之前，必须了解 ES6 模块与 CommonJS 模块完全不同。")]),s._v(" "),n("p",[s._v("它们有三个重大差异。")]),s._v(" "),n("ul",[n("li",[s._v("CommonJS 模块输出的是一个值的拷贝，ES6 模块输出的是值的引用。")]),s._v(" "),n("li",[s._v("CommonJS 模块是运行时加载，ES6 模块是编译时输出接口。")]),s._v(" "),n("li",[s._v("CommonJS 模块的"),n("code",[s._v("require()")]),s._v("是同步加载模块，ES6 模块的"),n("code",[s._v("import")]),s._v("命令是异步加载，有一个独立的模块依赖的解析阶段。")])]),s._v(" "),n("p",[s._v("第二个差异是因为 CommonJS 加载的是一个对象（即"),n("code",[s._v("module.exports")]),s._v("属性），该对象只有在脚本运行完才会生成。而 ES6 模块不是对象，它的对外接口只是一种静态定义，在代码静态解析阶段就会生成。")]),s._v(" "),n("p",[s._v("下面重点解释第一个差异。")]),s._v(" "),n("p",[s._v("CommonJS 模块输出的是值的拷贝，也就是说，一旦输出一个值，模块内部的变化就影响不到这个值。请看下面这个模块文件"),n("code",[s._v("lib.js")]),s._v("的例子。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("// lib.js\nvar counter = 3;\nfunction incCounter() {\n  counter++;\n}\nmodule.exports = {\n  counter: counter,\n  incCounter: incCounter,\n};\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br")])]),n("p",[s._v("上面代码输出内部变量"),n("code",[s._v("counter")]),s._v("和改写这个变量的内部方法"),n("code",[s._v("incCounter")]),s._v("。然后，在"),n("code",[s._v("main.js")]),s._v("里面加载这个模块。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("// main.js\nvar mod = require('./lib');\n\nconsole.log(mod.counter);  // 3\nmod.incCounter();\nconsole.log(mod.counter); // 3\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("p",[s._v("上面代码说明，"),n("code",[s._v("lib.js")]),s._v("模块加载以后，它的内部变化就影响不到输出的"),n("code",[s._v("mod.counter")]),s._v("了。这是因为"),n("code",[s._v("mod.counter")]),s._v("是一个原始类型的值，会被缓存。除非写成一个函数，才能得到内部变动后的值。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("// lib.js\nvar counter = 3;\nfunction incCounter() {\n  counter++;\n}\nmodule.exports = {\n  get counter() {\n    return counter\n  },\n  incCounter: incCounter,\n};\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br")])]),n("p",[s._v("上面代码中，输出的"),n("code",[s._v("counter")]),s._v("属性实际上是一个取值器函数。现在再执行"),n("code",[s._v("main.js")]),s._v("，就可以正确读取内部变量"),n("code",[s._v("counter")]),s._v("的变动了。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("$ node main.js\n3\n4\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[s._v("ES6 模块的运行机制与 CommonJS 不一样。JS 引擎对脚本静态分析的时候，遇到模块加载命令"),n("code",[s._v("import")]),s._v("，就会生成一个只读引用。等到脚本真正执行时，再根据这个只读引用，到被加载的那个模块里面去取值。换句话说，ES6 的"),n("code",[s._v("import")]),s._v("有点像 Unix 系统的“符号连接”，原始值变了，"),n("code",[s._v("import")]),s._v("加载的值也会跟着变。因此，ES6 模块是动态引用，并且不会缓存值，模块里面的变量绑定其所在的模块。")]),s._v(" "),n("p",[s._v("还是举上面的例子。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("// lib.js\nexport let counter = 3;\nexport function incCounter() {\n  counter++;\n}\n\n// main.js\nimport { counter, incCounter } from './lib';\nconsole.log(counter); // 3\nincCounter();\nconsole.log(counter); // 4\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br")])]),n("p",[s._v("上面代码说明，ES6 模块输入的变量"),n("code",[s._v("counter")]),s._v("是活的，完全反应其所在模块"),n("code",[s._v("lib.js")]),s._v("内部的变化。")]),s._v(" "),n("p",[s._v("再举一个出现在"),n("code",[s._v("export")]),s._v("一节中的例子。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("// m1.js\nexport var foo = 'bar';\nsetTimeout(() => foo = 'baz', 500);\n\n// m2.js\nimport {foo} from './m1.js';\nconsole.log(foo);\nsetTimeout(() => console.log(foo), 500);\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br")])]),n("p",[s._v("上面代码中，"),n("code",[s._v("m1.js")]),s._v("的变量"),n("code",[s._v("foo")]),s._v("，在刚加载时等于"),n("code",[s._v("bar")]),s._v("，过了 500 毫秒，又变为等于"),n("code",[s._v("baz")]),s._v("。")]),s._v(" "),n("p",[s._v("让我们看看，"),n("code",[s._v("m2.js")]),s._v("能否正确读取这个变化。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("$ babel-node m2.js\n\nbar\nbaz\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("p",[s._v("上面代码表明，ES6 模块不会缓存运行结果，而是动态地去被加载的模块取值，并且变量总是绑定其所在的模块。")]),s._v(" "),n("p",[s._v("由于 ES6 输入的模块变量，只是一个“符号连接”，所以这个变量是只读的，对它进行重新赋值会报错。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("// lib.js\nexport let obj = {};\n\n// main.js\nimport { obj } from './lib';\n\nobj.prop = 123; // OK\nobj = {}; // TypeError\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br")])]),n("p",[s._v("上面代码中，"),n("code",[s._v("main.js")]),s._v("从"),n("code",[s._v("lib.js")]),s._v("输入变量"),n("code",[s._v("obj")]),s._v("，可以对"),n("code",[s._v("obj")]),s._v("添加属性，但是重新赋值就会报错。因为变量"),n("code",[s._v("obj")]),s._v("指向的地址是只读的，不能重新赋值，这就好比"),n("code",[s._v("main.js")]),s._v("创造了一个名为"),n("code",[s._v("obj")]),s._v("的"),n("code",[s._v("const")]),s._v("变量。")]),s._v(" "),n("p",[s._v("最后，"),n("code",[s._v("export")]),s._v("通过接口，输出的是同一个值。不同的脚本加载这个接口，得到的都是同样的实例。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("// mod.js\nfunction C() {\n  this.sum = 0;\n  this.add = function () {\n    this.sum += 1;\n  };\n  this.show = function () {\n    console.log(this.sum);\n  };\n}\n\nexport let c = new C();\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br")])]),n("p",[s._v("上面的脚本"),n("code",[s._v("mod.js")]),s._v("，输出的是一个"),n("code",[s._v("C")]),s._v("的实例。不同的脚本加载这个模块，得到的都是同一个实例。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("// x.js\nimport {c} from './mod';\nc.add();\n\n// y.js\nimport {c} from './mod';\nc.show();\n\n// main.js\nimport './x';\nimport './y';\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br")])]),n("p",[s._v("现在执行"),n("code",[s._v("main.js")]),s._v("，输出的是"),n("code",[s._v("1")]),s._v("。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("$ babel-node main.js\n1\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[s._v("这就证明了"),n("code",[s._v("x.js")]),s._v("和"),n("code",[s._v("y.js")]),s._v("加载的都是"),n("code",[s._v("C")]),s._v("的同一个实例。")]),s._v(" "),n("h2",{attrs:{id:"node-js-的模块加载方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#node-js-的模块加载方法"}},[s._v("#")]),s._v(" Node.js 的模块加载方法")]),s._v(" "),n("h3",{attrs:{id:"概述"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[s._v("#")]),s._v(" 概述")]),s._v(" "),n("p",[s._v("JavaScript 现在有两种模块。一种是 ES6 模块，简称 ESM；另一种是 CommonJS 模块，简称 CJS。")]),s._v(" "),n("p",[s._v("CommonJS 模块是 Node.js 专用的，与 ES6 模块不兼容。语法上面，两者最明显的差异是，CommonJS 模块使用"),n("code",[s._v("require()")]),s._v("和"),n("code",[s._v("module.exports")]),s._v("，ES6 模块使用"),n("code",[s._v("import")]),s._v("和"),n("code",[s._v("export")]),s._v("。")]),s._v(" "),n("p",[s._v("它们采用不同的加载方案。从 Node.js v13.2 版本开始，Node.js 已经默认打开了 ES6 模块支持。")]),s._v(" "),n("p",[s._v("Node.js 要求 ES6 模块采用"),n("code",[s._v(".mjs")]),s._v("后缀文件名。也就是说，只要脚本文件里面使用"),n("code",[s._v("import")]),s._v("或者"),n("code",[s._v("export")]),s._v("命令，那么就必须采用"),n("code",[s._v(".mjs")]),s._v("后缀名。Node.js 遇到"),n("code",[s._v(".mjs")]),s._v("文件，就认为它是 ES6 模块，默认启用严格模式，不必在每个模块文件顶部指定"),n("code",[s._v('"use strict"')]),s._v("。")]),s._v(" "),n("p",[s._v("如果不希望将后缀名改成"),n("code",[s._v(".mjs")]),s._v("，可以在项目的"),n("code",[s._v("package.json")]),s._v("文件中，指定"),n("code",[s._v("type")]),s._v("字段为"),n("code",[s._v("module")]),s._v("。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('{\n   "type": "module"\n}\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[s._v("一旦设置了以后，该项目的 JS 脚本，就被解释成 ES6 模块。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("# 解释成 ES6 模块\n$ node my-app.js\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[s._v("如果这时还要使用 CommonJS 模块，那么需要将 CommonJS 脚本的后缀名都改成"),n("code",[s._v(".cjs")]),s._v("。如果没有"),n("code",[s._v("type")]),s._v("字段，或者"),n("code",[s._v("type")]),s._v("字段为"),n("code",[s._v("commonjs")]),s._v("，则"),n("code",[s._v(".js")]),s._v("脚本会被解释成 CommonJS 模块。")]),s._v(" "),n("p",[s._v("总结为一句话："),n("code",[s._v(".mjs")]),s._v("文件总是以 ES6 模块加载，"),n("code",[s._v(".cjs")]),s._v("文件总是以 CommonJS 模块加载，"),n("code",[s._v(".js")]),s._v("文件的加载取决于"),n("code",[s._v("package.json")]),s._v("里面"),n("code",[s._v("type")]),s._v("字段的设置。")]),s._v(" "),n("p",[s._v("注意，ES6 模块与 CommonJS 模块尽量不要混用。"),n("code",[s._v("require")]),s._v("命令不能加载"),n("code",[s._v(".mjs")]),s._v("文件，会报错，只有"),n("code",[s._v("import")]),s._v("命令才可以加载"),n("code",[s._v(".mjs")]),s._v("文件。反过来，"),n("code",[s._v(".mjs")]),s._v("文件里面也不能使用"),n("code",[s._v("require")]),s._v("命令，必须使用"),n("code",[s._v("import")]),s._v("。")]),s._v(" "),n("h3",{attrs:{id:"package-json-的-main-字段"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#package-json-的-main-字段"}},[s._v("#")]),s._v(" package.json 的 main 字段")]),s._v(" "),n("p",[n("code",[s._v("package.json")]),s._v("文件有两个字段可以指定模块的入口文件："),n("code",[s._v("main")]),s._v("和"),n("code",[s._v("exports")]),s._v("。比较简单的模块，可以只使用"),n("code",[s._v("main")]),s._v("字段，指定模块加载的入口文件。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('// ./node_modules/es-module-package/package.json\n{\n  "type": "module",\n  "main": "./src/index.js"\n}\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("p",[s._v("上面代码指定项目的入口脚本为"),n("code",[s._v("./src/index.js")]),s._v("，它的格式为 ES6 模块。如果没有"),n("code",[s._v("type")]),s._v("字段，"),n("code",[s._v("index.js")]),s._v("就会被解释为 CommonJS 模块。")]),s._v(" "),n("p",[s._v("然后，"),n("code",[s._v("import")]),s._v("命令就可以加载这个模块。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("// ./my-app.mjs\n\nimport { something } from 'es-module-package';\n// 实际加载的是 ./node_modules/es-module-package/src/index.js\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("p",[s._v("上面代码中，运行该脚本以后，Node.js 就会到"),n("code",[s._v("./node_modules")]),s._v("目录下面，寻找"),n("code",[s._v("es-module-package")]),s._v("模块，然后根据该模块"),n("code",[s._v("package.json")]),s._v("的"),n("code",[s._v("main")]),s._v("字段去执行入口文件。")]),s._v(" "),n("p",[s._v("这时，如果用 CommonJS 模块的"),n("code",[s._v("require()")]),s._v("命令去加载"),n("code",[s._v("es-module-package")]),s._v("模块会报错，因为 CommonJS 模块不能处理"),n("code",[s._v("export")]),s._v("命令。")]),s._v(" "),n("h3",{attrs:{id:"package-json-的-exports-字段"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#package-json-的-exports-字段"}},[s._v("#")]),s._v(" package.json 的 exports 字段")]),s._v(" "),n("p",[n("code",[s._v("exports")]),s._v("字段的优先级高于"),n("code",[s._v("main")]),s._v("字段。它有多种用法。")]),s._v(" "),n("p",[s._v("（1）子目录别名")]),s._v(" "),n("p",[n("code",[s._v("package.json")]),s._v("文件的"),n("code",[s._v("exports")]),s._v("字段可以指定脚本或子目录的别名。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('// ./node_modules/es-module-package/package.json\n{\n  "exports": {\n    "./submodule": "./src/submodule.js"\n  }\n}\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("p",[s._v("上面的代码指定"),n("code",[s._v("src/submodule.js")]),s._v("别名为"),n("code",[s._v("submodule")]),s._v("，然后就可以从别名加载这个文件。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("import submodule from 'es-module-package/submodule';\n// 加载 ./node_modules/es-module-package/src/submodule.js\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[s._v("下面是子目录别名的例子。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('// ./node_modules/es-module-package/package.json\n{\n  "exports": {\n    "./features/": "./src/features/"\n  }\n}\n\nimport feature from \'es-module-package/features/x.js\';\n// 加载 ./node_modules/es-module-package/src/features/x.js\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br")])]),n("p",[s._v("如果没有指定别名，就不能用“模块+脚本名”这种形式加载脚本。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("// 报错\nimport submodule from 'es-module-package/private-module.js';\n\n// 不报错\nimport submodule from './node_modules/es-module-package/private-module.js';\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("p",[s._v("（2）main 的别名")]),s._v(" "),n("p",[n("code",[s._v("exports")]),s._v("字段的别名如果是"),n("code",[s._v(".")]),s._v("，就代表模块的主入口，优先级高于"),n("code",[s._v("main")]),s._v("字段，并且可以直接简写成"),n("code",[s._v("exports")]),s._v("字段的值。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('{\n  "exports": {\n    ".": "./main.js"\n  }\n}\n\n// 等同于\n{\n  "exports": "./main.js"\n}\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br")])]),n("p",[s._v("由于"),n("code",[s._v("exports")]),s._v("字段只有支持 ES6 的 Node.js 才认识，所以可以用来兼容旧版本的 Node.js。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('{\n  "main": "./main-legacy.cjs",\n  "exports": {\n    ".": "./main-modern.cjs"\n  }\n}\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("p",[s._v("上面代码中，老版本的 Node.js （不支持 ES6 模块）的入口文件是"),n("code",[s._v("main-legacy.cjs")]),s._v("，新版本的 Node.js 的入口文件是"),n("code",[s._v("main-modern.cjs")]),s._v("。")]),s._v(" "),n("p",[n("strong",[s._v("（3）条件加载")])]),s._v(" "),n("p",[s._v("利用"),n("code",[s._v(".")]),s._v("这个别名，可以为 ES6 模块和 CommonJS 指定不同的入口。目前，这个功能需要在 Node.js 运行的时候，打开"),n("code",[s._v("--experimental-conditional-exports")]),s._v("标志。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('{\n  "type": "module",\n  "exports": {\n    ".": {\n      "require": "./main.cjs",\n      "default": "./main.js"\n    }\n  }\n}\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br")])]),n("p",[s._v("上面代码中，别名"),n("code",[s._v(".")]),s._v("的"),n("code",[s._v("require")]),s._v("条件指定"),n("code",[s._v("require()")]),s._v("命令的入口文件（即 CommonJS 的入口），"),n("code",[s._v("default")]),s._v("条件指定其他情况的入口（即 ES6 的入口）。")]),s._v(" "),n("p",[s._v("上面的写法可以简写如下。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('{\n  "exports": {\n    "require": "./main.cjs",\n    "default": "./main.js"\n  }\n}\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("p",[s._v("注意，如果同时还有其他别名，就不能采用简写，否则会报错。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('{\n  // 报错\n  "exports": {\n    "./feature": "./lib/feature.js",\n    "require": "./main.cjs",\n    "default": "./main.js"\n  }\n}\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br")])]),n("h3",{attrs:{id:"commonjs-模块加载-es6-模块"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#commonjs-模块加载-es6-模块"}},[s._v("#")]),s._v(" CommonJS 模块加载 ES6 模块")]),s._v(" "),n("p",[s._v("CommonJS 的"),n("code",[s._v("require()")]),s._v("命令不能加载 ES6 模块，会报错，只能使用"),n("code",[s._v("import()")]),s._v("这个方法加载。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("(async () => {\n  await import('./my-app.mjs');\n})();\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[s._v("上面代码可以在 CommonJS 模块中运行。")]),s._v(" "),n("p",[n("code",[s._v("require()")]),s._v("不支持 ES6 模块的一个原因是，它是同步加载，而 ES6 模块内部可以使用顶层"),n("code",[s._v("await")]),s._v("命令，导致无法被同步加载。")]),s._v(" "),n("h3",{attrs:{id:"es6-模块加载-commonjs-模块"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#es6-模块加载-commonjs-模块"}},[s._v("#")]),s._v(" ES6 模块加载 CommonJS 模块")]),s._v(" "),n("p",[s._v("ES6 模块的"),n("code",[s._v("import")]),s._v("命令可以加载 CommonJS 模块，但是只能整体加载，不能只加载单一的输出项。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("// 正确\nimport packageMain from 'commonjs-package';\n\n// 报错\nimport { method } from 'commonjs-package';\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("p",[s._v("这是因为 ES6 模块需要支持静态代码分析，而 CommonJS 模块的输出接口是"),n("code",[s._v("module.exports")]),s._v("，是一个对象，无法被静态分析，所以只能整体加载。")]),s._v(" "),n("p",[s._v("加载单一的输出项，可以写成下面这样。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("import packageMain from 'commonjs-package';\nconst { method } = packageMain;\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[s._v("还有一种变通的加载方法，就是使用 Node.js 内置的"),n("code",[s._v("module.createRequire()")]),s._v("方法。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("// cjs.cjs\nmodule.exports = 'cjs';\n\n// esm.mjs\nimport { createRequire } from 'module';\n\nconst require = createRequire(import.meta.url);\n\nconst cjs = require('./cjs.cjs');\ncjs === 'cjs'; // true\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br")])]),n("p",[s._v("上面代码中，ES6 模块通过"),n("code",[s._v("module.createRequire()")]),s._v("方法可以加载 CommonJS 模块。但是，这种写法等于将 ES6 和 CommonJS 混在一起了，所以不建议使用。")]),s._v(" "),n("h3",{attrs:{id:"同时支持两种格式的模块"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#同时支持两种格式的模块"}},[s._v("#")]),s._v(" 同时支持两种格式的模块")]),s._v(" "),n("p",[s._v("一个模块同时要支持 CommonJS 和 ES6 两种格式，也很容易。")]),s._v(" "),n("p",[s._v("如果原始模块是 ES6 格式，那么需要给出一个整体输出接口，比如"),n("code",[s._v("export default obj")]),s._v("，使得 CommonJS 可以用"),n("code",[s._v("import()")]),s._v("进行加载。")]),s._v(" "),n("p",[s._v("如果原始模块是 CommonJS 格式，那么可以加一个包装层。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("import cjsModule from '../index.js';\nexport const foo = cjsModule.foo;\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[s._v("上面代码先整体输入 CommonJS 模块，然后再根据需要输出具名接口。")]),s._v(" "),n("p",[s._v("你可以把这个文件的后缀名改为"),n("code",[s._v(".mjs")]),s._v("，或者将它放在一个子目录，再在这个子目录里面放一个单独的"),n("code",[s._v("package.json")]),s._v("文件，指明"),n("code",[s._v('{ type: "module" }')]),s._v("。")]),s._v(" "),n("p",[s._v("另一种做法是在"),n("code",[s._v("package.json")]),s._v("文件的"),n("code",[s._v("exports")]),s._v("字段，指明两种格式模块各自的加载入口。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('"exports"：{\n  "require": "./index.js"，\n  "import": "./esm/wrapper.js"\n}\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("p",[s._v("上面代码指定"),n("code",[s._v("require()")]),s._v("和"),n("code",[s._v("import")]),s._v("，加载该模块会自动切换到不一样的入口文件。")]),s._v(" "),n("h3",{attrs:{id:"node-js-的内置模块"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#node-js-的内置模块"}},[s._v("#")]),s._v(" Node.js 的内置模块")]),s._v(" "),n("p",[s._v("Node.js 的内置模块可以整体加载，也可以加载指定的输出项。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("// 整体加载\nimport EventEmitter from 'events';\nconst e = new EventEmitter();\n\n// 加载指定的输出项\nimport { readFile } from 'fs';\nreadFile('./foo.txt', (err, source) => {\n  if (err) {\n    console.error(err);\n  } else {\n    console.log(source);\n  }\n});\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br")])]),n("h3",{attrs:{id:"加载路径"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#加载路径"}},[s._v("#")]),s._v(" 加载路径")]),s._v(" "),n("p",[s._v("ES6 模块的加载路径必须给出脚本的完整路径，不能省略脚本的后缀名。"),n("code",[s._v("import")]),s._v("命令和"),n("code",[s._v("package.json")]),s._v("文件的"),n("code",[s._v("main")]),s._v("字段如果省略脚本的后缀名，会报错。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("// ES6 模块中将报错\nimport { something } from './index';\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[s._v("为了与浏览器的"),n("code",[s._v("import")]),s._v("加载规则相同，Node.js 的"),n("code",[s._v(".mjs")]),s._v("文件支持 URL 路径。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("import './foo.mjs?query=1'; // 加载 ./foo 传入参数 ?query=1\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[s._v("上面代码中，脚本路径带有参数"),n("code",[s._v("?query=1")]),s._v("，Node 会按 URL 规则解读。同一个脚本只要参数不同，就会被加载多次，并且保存成不同的缓存。由于这个原因，只要文件名中含有"),n("code",[s._v(":")]),s._v("、"),n("code",[s._v("%")]),s._v("、"),n("code",[s._v("#")]),s._v("、"),n("code",[s._v("?")]),s._v("等特殊字符，最好对这些字符进行转义。")]),s._v(" "),n("p",[s._v("目前，Node.js 的"),n("code",[s._v("import")]),s._v("命令只支持加载本地模块（"),n("code",[s._v("file:")]),s._v("协议）和"),n("code",[s._v("data:")]),s._v("协议，不支持加载远程模块。另外，脚本路径只支持相对路径，不支持绝对路径（即以"),n("code",[s._v("/")]),s._v("或"),n("code",[s._v("//")]),s._v("开头的路径）。")]),s._v(" "),n("h3",{attrs:{id:"内部变量"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#内部变量"}},[s._v("#")]),s._v(" 内部变量")]),s._v(" "),n("p",[s._v("ES6 模块应该是通用的，同一个模块不用修改，就可以用在浏览器环境和服务器环境。为了达到这个目标，Node.js 规定 ES6 模块之中不能使用 CommonJS 模块的特有的一些内部变量。")]),s._v(" "),n("p",[s._v("首先，就是"),n("code",[s._v("this")]),s._v("关键字。ES6 模块之中，顶层的"),n("code",[s._v("this")]),s._v("指向"),n("code",[s._v("undefined")]),s._v("；CommonJS 模块的顶层"),n("code",[s._v("this")]),s._v("指向当前模块，这是两者的一个重大差异。")]),s._v(" "),n("p",[s._v("其次，以下这些顶层变量在 ES6 模块之中都是不存在的。")]),s._v(" "),n("ul",[n("li",[n("code",[s._v("arguments")])]),s._v(" "),n("li",[n("code",[s._v("require")])]),s._v(" "),n("li",[n("code",[s._v("module")])]),s._v(" "),n("li",[n("code",[s._v("exports")])]),s._v(" "),n("li",[n("code",[s._v("__filename")])]),s._v(" "),n("li",[n("code",[s._v("__dirname")])])]),s._v(" "),n("h2",{attrs:{id:"循环加载"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#循环加载"}},[s._v("#")]),s._v(" 循环加载")]),s._v(" "),n("p",[s._v("“循环加载”（circular dependency）指的是，"),n("code",[s._v("a")]),s._v("脚本的执行依赖"),n("code",[s._v("b")]),s._v("脚本，而"),n("code",[s._v("b")]),s._v("脚本的执行又依赖"),n("code",[s._v("a")]),s._v("脚本。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("// a.js\nvar b = require('b');\n\n// b.js\nvar a = require('a');\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("p",[s._v("通常，“循环加载”表示存在强耦合，如果处理不好，还可能导致递归加载，使得程序无法执行，因此应该避免出现。")]),s._v(" "),n("p",[s._v("但是实际上，这是很难避免的，尤其是依赖关系复杂的大项目，很容易出现"),n("code",[s._v("a")]),s._v("依赖"),n("code",[s._v("b")]),s._v("，"),n("code",[s._v("b")]),s._v("依赖"),n("code",[s._v("c")]),s._v("，"),n("code",[s._v("c")]),s._v("又依赖"),n("code",[s._v("a")]),s._v("这样的情况。这意味着，模块加载机制必须考虑“循环加载”的情况。")]),s._v(" "),n("p",[s._v("对于 JavaScript 语言来说，目前最常见的两种模块格式 CommonJS 和 ES6，处理“循环加载”的方法是不一样的，返回的结果也不一样。")]),s._v(" "),n("h3",{attrs:{id:"commonjs-模块的加载原理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#commonjs-模块的加载原理"}},[s._v("#")]),s._v(" CommonJS 模块的加载原理")]),s._v(" "),n("p",[s._v("介绍 ES6 如何处理“循环加载”之前，先介绍目前最流行的 CommonJS 模块格式的加载原理。")]),s._v(" "),n("p",[s._v("CommonJS 的一个模块，就是一个脚本文件。"),n("code",[s._v("require")]),s._v("命令第一次加载该脚本，就会执行整个脚本，然后在内存生成一个对象。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("{\n  id: '...',\n  exports: { ... },\n  loaded: true,\n  ...\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("p",[s._v("上面代码就是 Node 内部加载模块后生成的一个对象。该对象的"),n("code",[s._v("id")]),s._v("属性是模块名，"),n("code",[s._v("exports")]),s._v("属性是模块输出的各个接口，"),n("code",[s._v("loaded")]),s._v("属性是一个布尔值，表示该模块的脚本是否执行完毕。其他还有很多属性，这里都省略了。")]),s._v(" "),n("p",[s._v("以后需要用到这个模块的时候，就会到"),n("code",[s._v("exports")]),s._v("属性上面取值。即使再次执行"),n("code",[s._v("require")]),s._v("命令，也不会再次执行该模块，而是到缓存之中取值。也就是说，CommonJS 模块无论加载多少次，都只会在第一次加载时运行一次，以后再加载，就返回第一次运行的结果，除非手动清除系统缓存。")]),s._v(" "),n("h3",{attrs:{id:"commonjs-模块的循环加载"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#commonjs-模块的循环加载"}},[s._v("#")]),s._v(" CommonJS 模块的循环加载")]),s._v(" "),n("p",[s._v("CommonJS 模块的重要特性是加载时执行，即脚本代码在"),n("code",[s._v("require")]),s._v('的时候，就会全部执行。一旦出现某个模块被"循环加载"，就只输出已经执行的部分，还未执行的部分不会输出。')]),s._v(" "),n("p",[s._v("让我们来看，Node "),n("a",{attrs:{href:"https://nodejs.org/api/modules.html#modules_cycles",target:"_blank",rel:"noopener noreferrer"}},[s._v("官方文档"),n("OutboundLink")],1),s._v("里面的例子。脚本文件"),n("code",[s._v("a.js")]),s._v("代码如下。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("exports.done = false;\nvar b = require('./b.js');\nconsole.log('在 a.js 之中，b.done = %j', b.done);\nexports.done = true;\nconsole.log('a.js 执行完毕');\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("p",[s._v("上面代码之中，"),n("code",[s._v("a.js")]),s._v("脚本先输出一个"),n("code",[s._v("done")]),s._v("变量，然后加载另一个脚本文件"),n("code",[s._v("b.js")]),s._v("。注意，此时"),n("code",[s._v("a.js")]),s._v("代码就停在这里，等待"),n("code",[s._v("b.js")]),s._v("执行完毕，再往下执行。")]),s._v(" "),n("p",[s._v("再看"),n("code",[s._v("b.js")]),s._v("的代码。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("exports.done = false;\nvar a = require('./a.js');\nconsole.log('在 b.js 之中，a.done = %j', a.done);\nexports.done = true;\nconsole.log('b.js 执行完毕');\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("p",[s._v("上面代码之中，"),n("code",[s._v("b.js")]),s._v("执行到第二行，就会去加载"),n("code",[s._v("a.js")]),s._v("，这时，就发生了“循环加载”。系统会去"),n("code",[s._v("a.js")]),s._v("模块对应对象的"),n("code",[s._v("exports")]),s._v("属性取值，可是因为"),n("code",[s._v("a.js")]),s._v("还没有执行完，从"),n("code",[s._v("exports")]),s._v("属性只能取回已经执行的部分，而不是最后的值。")]),s._v(" "),n("p",[n("code",[s._v("a.js")]),s._v("已经执行的部分，只有一行。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("exports.done = false;\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[s._v("因此，对于"),n("code",[s._v("b.js")]),s._v("来说，它从"),n("code",[s._v("a.js")]),s._v("只输入一个变量"),n("code",[s._v("done")]),s._v("，值为"),n("code",[s._v("false")]),s._v("。")]),s._v(" "),n("p",[s._v("然后，"),n("code",[s._v("b.js")]),s._v("接着往下执行，等到全部执行完毕，再把执行权交还给"),n("code",[s._v("a.js")]),s._v("。于是，"),n("code",[s._v("a.js")]),s._v("接着往下执行，直到执行完毕。我们写一个脚本"),n("code",[s._v("main.js")]),s._v("，验证这个过程。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("var a = require('./a.js');\nvar b = require('./b.js');\nconsole.log('在 main.js 之中, a.done=%j, b.done=%j', a.done, b.done);\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[s._v("执行"),n("code",[s._v("main.js")]),s._v("，运行结果如下。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("$ node main.js\n\n在 b.js 之中，a.done = false\nb.js 执行完毕\n在 a.js 之中，b.done = true\na.js 执行完毕\n在 main.js 之中, a.done=true, b.done=true\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("p",[s._v("上面的代码证明了两件事。一是，在"),n("code",[s._v("b.js")]),s._v("之中，"),n("code",[s._v("a.js")]),s._v("没有执行完毕，只执行了第一行。二是，"),n("code",[s._v("main.js")]),s._v("执行到第二行时，不会再次执行"),n("code",[s._v("b.js")]),s._v("，而是输出缓存的"),n("code",[s._v("b.js")]),s._v("的执行结果，即它的第四行。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("exports.done = true;\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[s._v("总之，CommonJS 输入的是被输出值的拷贝，不是引用。")]),s._v(" "),n("p",[s._v("另外，由于 CommonJS 模块遇到循环加载时，返回的是当前已经执行的部分的值，而不是代码全部执行后的值，两者可能会有差异。所以，输入变量的时候，必须非常小心。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("var a = require('a'); // 安全的写法\nvar foo = require('a').foo; // 危险的写法\n\nexports.good = function (arg) {\n  return a.foo('good', arg); // 使用的是 a.foo 的最新值\n};\n\nexports.bad = function (arg) {\n  return foo('bad', arg); // 使用的是一个部分加载时的值\n};\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br")])]),n("p",[s._v("上面代码中，如果发生循环加载，"),n("code",[s._v("require('a').foo")]),s._v("的值很可能后面会被改写，改用"),n("code",[s._v("require('a')")]),s._v("会更保险一点。")]),s._v(" "),n("h3",{attrs:{id:"es6-模块的循环加载"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#es6-模块的循环加载"}},[s._v("#")]),s._v(" ES6 模块的循环加载")]),s._v(" "),n("p",[s._v("ES6 处理“循环加载”与 CommonJS 有本质的不同。ES6 模块是动态引用，如果使用"),n("code",[s._v("import")]),s._v("从一个模块加载变量（即"),n("code",[s._v("import foo from 'foo'")]),s._v("），那些变量不会被缓存，而是成为一个指向被加载模块的引用，需要开发者自己保证，真正取值的时候能够取到值。")]),s._v(" "),n("p",[s._v("请看下面这个例子。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("// a.mjs\nimport {bar} from './b';\nconsole.log('a.mjs');\nconsole.log(bar);\nexport let foo = 'foo';\n\n// b.mjs\nimport {foo} from './a';\nconsole.log('b.mjs');\nconsole.log(foo);\nexport let bar = 'bar';\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br")])]),n("p",[s._v("上面代码中，"),n("code",[s._v("a.mjs")]),s._v("加载"),n("code",[s._v("b.mjs")]),s._v("，"),n("code",[s._v("b.mjs")]),s._v("又加载"),n("code",[s._v("a.mjs")]),s._v("，构成循环加载。执行"),n("code",[s._v("a.mjs")]),s._v("，结果如下。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("$ node --experimental-modules a.mjs\nb.mjs\nReferenceError: foo is not defined\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[s._v("上面代码中，执行"),n("code",[s._v("a.mjs")]),s._v("以后会报错，"),n("code",[s._v("foo")]),s._v("变量未定义，这是为什么？")]),s._v(" "),n("p",[s._v("让我们一行行来看，ES6 循环加载是怎么处理的。首先，执行"),n("code",[s._v("a.mjs")]),s._v("以后，引擎发现它加载了"),n("code",[s._v("b.mjs")]),s._v("，因此会优先执行"),n("code",[s._v("b.mjs")]),s._v("，然后再执行"),n("code",[s._v("a.mjs")]),s._v("。接着，执行"),n("code",[s._v("b.mjs")]),s._v("的时候，已知它从"),n("code",[s._v("a.mjs")]),s._v("输入了"),n("code",[s._v("foo")]),s._v("接口，这时不会去执行"),n("code",[s._v("a.mjs")]),s._v("，而是认为这个接口已经存在了，继续往下执行。执行到第三行"),n("code",[s._v("console.log(foo)")]),s._v("的时候，才发现这个接口根本没定义，因此报错。")]),s._v(" "),n("p",[s._v("解决这个问题的方法，就是让"),n("code",[s._v("b.mjs")]),s._v("运行的时候，"),n("code",[s._v("foo")]),s._v("已经有定义了。这可以通过将"),n("code",[s._v("foo")]),s._v("写成函数来解决。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("// a.mjs\nimport {bar} from './b';\nconsole.log('a.mjs');\nconsole.log(bar());\nfunction foo() { return 'foo' }\nexport {foo};\n\n// b.mjs\nimport {foo} from './a';\nconsole.log('b.mjs');\nconsole.log(foo());\nfunction bar() { return 'bar' }\nexport {bar};\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br")])]),n("p",[s._v("这时再执行"),n("code",[s._v("a.mjs")]),s._v("就可以得到预期结果。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("$ node --experimental-modules a.mjs\nb.mjs\nfoo\na.mjs\nbar\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("p",[s._v("这是因为函数具有提升作用，在执行"),n("code",[s._v("import {bar} from './b'")]),s._v("时，函数"),n("code",[s._v("foo")]),s._v("就已经有定义了，所以"),n("code",[s._v("b.mjs")]),s._v("加载的时候不会报错。这也意味着，如果把函数"),n("code",[s._v("foo")]),s._v("改写成函数表达式，也会报错。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("// a.mjs\nimport {bar} from './b';\nconsole.log('a.mjs');\nconsole.log(bar());\nconst foo = () => 'foo';\nexport {foo};\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("p",[s._v("上面代码的第四行，改成了函数表达式，就不具有提升作用，执行就会报错。")]),s._v(" "),n("p",[s._v("我们再来看 ES6 模块加载器"),n("a",{attrs:{href:"https://github.com/ModuleLoader/es6-module-loader/blob/master/docs/circular-references-bindings.md",target:"_blank",rel:"noopener noreferrer"}},[s._v("SystemJS"),n("OutboundLink")],1),s._v("给出的一个例子。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("// even.js\nimport { odd } from './odd'\nexport var counter = 0;\nexport function even(n) {\n  counter++;\n  return n === 0 || odd(n - 1);\n}\n\n// odd.js\nimport { even } from './even';\nexport function odd(n) {\n  return n !== 0 && even(n - 1);\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br")])]),n("p",[s._v("上面代码中，"),n("code",[s._v("even.js")]),s._v("里面的函数"),n("code",[s._v("even")]),s._v("有一个参数"),n("code",[s._v("n")]),s._v("，只要不等于 0，就会减去 1，传入加载的"),n("code",[s._v("odd()")]),s._v("。"),n("code",[s._v("odd.js")]),s._v("也会做类似操作。")]),s._v(" "),n("p",[s._v("运行上面这段代码，结果如下。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("$ babel-node\n> import * as m from './even.js';\n> m.even(10);\ntrue\n> m.counter\n6\n> m.even(20)\ntrue\n> m.counter\n17\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br")])]),n("p",[s._v("上面代码中，参数"),n("code",[s._v("n")]),s._v("从 10 变为 0 的过程中，"),n("code",[s._v("even()")]),s._v("一共会执行 6 次，所以变量"),n("code",[s._v("counter")]),s._v("等于 6。第二次调用"),n("code",[s._v("even()")]),s._v("时，参数"),n("code",[s._v("n")]),s._v("从 20 变为 0，"),n("code",[s._v("even()")]),s._v("一共会执行 11 次，加上前面的 6 次，所以变量"),n("code",[s._v("counter")]),s._v("等于 17。")]),s._v(" "),n("p",[s._v("这个例子要是改写成 CommonJS，就根本无法执行，会报错。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("// even.js\nvar odd = require('./odd');\nvar counter = 0;\nexports.counter = counter;\nexports.even = function (n) {\n  counter++;\n  return n == 0 || odd(n - 1);\n}\n\n// odd.js\nvar even = require('./even').even;\nmodule.exports = function (n) {\n  return n != 0 && even(n - 1);\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br")])]),n("p",[s._v("上面代码中，"),n("code",[s._v("even.js")]),s._v("加载"),n("code",[s._v("odd.js")]),s._v("，而"),n("code",[s._v("odd.js")]),s._v("又去加载"),n("code",[s._v("even.js")]),s._v("，形成“循环加载”。这时，执行引擎就会输出"),n("code",[s._v("even.js")]),s._v("已经执行的部分（不存在任何结果），所以在"),n("code",[s._v("odd.js")]),s._v("之中，变量"),n("code",[s._v("even")]),s._v("等于"),n("code",[s._v("undefined")]),s._v("，等到后面调用"),n("code",[s._v("even(n - 1)")]),s._v("就会报错。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("$ node\n> var m = require('./even');\n> m.even(10)\nTypeError: even is not a function\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("h3",{attrs:{id:"留言"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#留言"}},[s._v("#")]),s._v(" 留言")])])}),[],!1,null,null,null);e.default=r.exports}}]);