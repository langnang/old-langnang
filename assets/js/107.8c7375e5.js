(window.webpackJsonp=window.webpackJsonp||[]).push([[107],{575:function(e,r,t){"use strict";t.r(r);var s=t(18),n=Object(s.a)({},(function(){var e=this,r=e.$createElement,t=e._self._c||r;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"promise"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#promise"}},[e._v("#")]),e._v(" Promise")]),e._v(" "),t("p",[t("strong",[t("code",[e._v("Promise")])]),e._v(" 对象用于表示一个异步操作的最终完成（或失败）及其结果值。")]),e._v(" "),t("p",[t("strong",[e._v("备注：")]),e._v(" 此特性在 "),t("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/API/Web_Workers_API",target:"_blank",rel:"noopener noreferrer"}},[e._v("Web Worker"),t("OutboundLink")],1),e._v(" 中可用")]),e._v(" "),t("p",[e._v("若想了解 promise 的工作方式以及如何使用它们，我们建议你先阅读"),t("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises",target:"_blank",rel:"noopener noreferrer"}},[e._v("使用 promise"),t("OutboundLink")],1),e._v("。")]),e._v(" "),t("h2",{attrs:{id:"描述"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#描述"}},[e._v("#")]),e._v(" "),t("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise#%E6%8F%8F%E8%BF%B0",target:"_blank",rel:"noopener noreferrer"}},[e._v("描述"),t("OutboundLink")],1)]),e._v(" "),t("p",[e._v("一个 "),t("code",[e._v("Promise")]),e._v(" 对象代表一个在这个 promise 被创建出来时不一定已知值的代理。它让你能够把异步操作最终的成功返回值或者失败原因和相应的处理程序关联起来。这样使得异步方法可以像同步方法那样返回值：异步方法并不会立即返回最终的值，而是会返回一个 "),t("em",[e._v("promise")]),e._v("，以便在未来某个时候把值交给使用者。")]),e._v(" "),t("p",[e._v("一个 "),t("code",[e._v("Promise")]),e._v(" 必然处于以下几种状态之一：")]),e._v(" "),t("ul",[t("li",[t("em",[e._v("待定（pending）")]),e._v("：初始状态，既没有被兑现，也没有被拒绝。")]),e._v(" "),t("li",[t("em",[e._v("已兑现（fulfilled）")]),e._v("：意味着操作成功完成。")]),e._v(" "),t("li",[t("em",[e._v("已拒绝（rejected）")]),e._v("：意味着操作失败。")])]),e._v(" "),t("p",[e._v("待定状态的 Promise 对象要么会通过一个值"),t("em",[e._v("被兑现")]),e._v("，要么会通过一个原因（错误）"),t("em",[e._v("被拒绝")]),e._v("。当这些情况之一发生时，我们用 promise 的 "),t("code",[e._v("then")]),e._v(" 方法排列起来的相关处理程序就会被调用。如果 promise 在一个相应的处理程序被绑定时就已经被兑现或被拒绝了，那么这个处理程序也同样会被调用，因此在完成异步操作和绑定处理方法之间不存在竞态条件。")]),e._v(" "),t("p",[e._v("因为 "),t("code",[e._v("Promise.prototype.then")]),e._v(" 和 "),t("code",[e._v("Promise.prototype.catch")]),e._v(" 方法返回的是 promise，所以它们可以被链式调用。")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/promises.png",alt:"img"}})]),e._v(" "),t("p",[t("strong",[e._v("备注：")]),e._v(" 有一些语言中有惰性求值和延迟计算的特性，它们也被称为“promise”，例如  Scheme。JavaScript 中的 promise  代表的是已经在发生的进程，而且可以通过回调函数实现链式调用。如果你想对一个表达式进行惰性求值，就考虑一下使用无参数的箭头函数，如 "),t("code",[e._v("f = () => expression")]),e._v(" 来创建惰性求值的表达式，然后使用 "),t("code",[e._v("f()")]),e._v(" 进行求值。")]),e._v(" "),t("p",[t("strong",[e._v("备注：")]),e._v(" 如果一个 promise 已经被兑现或被拒绝，那么我们也可以说它处于 "),t("em",[e._v("已敲定（settled）")]),e._v(" 状态。你还会听到一个经常跟 promise 一起使用的术语："),t("em",[e._v("已决议（resolved）")]),e._v("，它表示 promise 已经处于已敲定状态，或者为了匹配另一个 promise 的状态被“锁定”了。Domenic Denicola 的 "),t("a",{attrs:{href:"https://github.com/domenic/promises-unwrapping/blob/master/docs/states-and-fates.md",target:"_blank",rel:"noopener noreferrer"}},[e._v("States and fates"),t("OutboundLink")],1),e._v(" 中有更多关于 promise 术语的细节可以供你参考。")]),e._v(" "),t("h3",{attrs:{id:"promise-的链式调用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#promise-的链式调用"}},[e._v("#")]),e._v(" "),t("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise#promise_%E7%9A%84%E9%93%BE%E5%BC%8F%E8%B0%83%E7%94%A8",target:"_blank",rel:"noopener noreferrer"}},[e._v("Promise 的链式调用"),t("OutboundLink")],1)]),e._v(" "),t("p",[e._v("我们可以用 "),t("code",[e._v("Promise.prototype.then()")]),e._v("、"),t("code",[e._v("Promise.prototype.catch()")]),e._v(" 和 "),t("code",[e._v("Promise.prototype.finally()")]),e._v(" 这些方法将进一步的操作与一个变为已敲定状态的 promise 关联起来。")]),e._v(" "),t("p",[e._v("例如 "),t("code",[e._v(".then()")]),e._v(" 方法需要两个参数，第一个参数作为处理已兑现状态的回调函数，而第二个参数则作为处理已拒绝状态的回调函数。每一个 "),t("code",[e._v(".then()")]),e._v(" 方法还会返回一个新生成的 promise 对象，这个对象可被用作链式调用，就像这样：")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("const myPromise = new Promise((resolve, reject) => {\n  setTimeout(() => {\n    resolve('foo');\n  }, 300);\n});\n\nmyPromise\n  .then(handleResolvedA, handleRejectedA)\n  .then(handleResolvedB, handleRejectedB)\n  .then(handleResolvedC, handleRejectedC);\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br")])]),t("p",[e._v("当 "),t("code",[e._v(".then()")]),e._v(" 中缺少能够返回 promise 对象的函数时，链式调用就直接继续进行下一环操作。因此，链式调用可以在最后一个 "),t("code",[e._v(".catch()")]),e._v(" 之前把所有的处理已拒绝状态的回调函数都省略掉。")]),e._v(" "),t("p",[e._v("过早地处理变为已拒绝状态的 promise 会对之后 promise 的链式调用造成影响。不过有时候我们因为需要马上处理一个错误也只能这样做。例如，外面必须抛出某种类型的错误以在链式调用中传递错误状态。另一方面，在没有迫切需要的情况下，可以在最后一个 "),t("code",[e._v(".catch()")]),e._v(" 语句时再进行错误处理，这种做法更加简单。"),t("code",[e._v(".catch()")]),e._v(" 其实只是没有给处理已兑现状态的回调函数预留参数位置的 "),t("code",[e._v(".then()")]),e._v(" 而已。")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("myPromise\n  .then(handleResolvedA)\n  .then(handleResolvedB)\n  .then(handleResolvedC)\n  .catch(handleRejectedAny);\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br")])]),t("p",[e._v("使用"),t("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Arrow_functions",target:"_blank",rel:"noopener noreferrer"}},[e._v("箭头函数表达式"),t("OutboundLink")],1),e._v("作为 promise 回调函数的示例如下：")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("myPromise\n  .then(value => { return value + ' and bar'; })\n  .then(value => { return value + ' and bar again'; })\n  .then(value => { return value + ' and again'; })\n  .then(value => { return value + ' and again'; })\n  .then(value => { console.log(value) })\n  .catch(err => { console.log(err) });\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br")])]),t("p",[e._v("这些函数的终止状态决定着链式调用中下一个 promise 的“已敲定”状态是什么。“已决议”状态意味着 promise 已经成功完成，而“已拒绝”则表示 promise 未成功完成。“已决议”状态的返回值会逐级传递到下一个 "),t("code",[e._v(".then()")]),e._v(" 中，而“已拒绝”的理由则会被传递到链中的下一个已拒绝状态的处理函数。")]),e._v(" "),t("p",[e._v("链式调用中的 promise 们就像俄罗斯套娃一样，是嵌套起来的，但又像是一个栈，每个都必须从顶端被弹出。链式调用中的第一个 promise 是嵌套最深的一个，也将是第一个被弹出的。")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("(promise D, (promise C, (promise B, (promise A) ) ) )\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[e._v("当存在一个 "),t("code",[e._v("nextValue")]),e._v(" 是 promise 时，就会出现一种动态的替换效果。"),t("code",[e._v("return")]),e._v(" 会导致一个 promise 被弹出，但这个 "),t("code",[e._v("nextValue")]),e._v(' promise 则会被推入被弹出 promise 原来的位置。对于上面所示的嵌套场景，假设与 "promise B" 相关的 '),t("code",[e._v(".then()")]),e._v(' 返回了一个值为 "promise X" 的 '),t("code",[e._v("nextValue")]),e._v(" 。那么嵌套的结果看起来就会是这样：")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("(promise D, (promise C, (promise X) ) )\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[e._v("一个 promise 可能会参与不止一次的嵌套。对于下面的代码，"),t("code",[e._v("promiseA")]),e._v(" 向“已敲定”状态的过渡会导致两个实例的 "),t("code",[e._v(".then")]),e._v(" 都被调用。")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("const promiseA = new Promise(myExecutorFunc);\nconst promiseB = promiseA.then(handleFulfilled1, handleRejected1);\nconst promiseC = promiseA.then(handleFulfilled2, handleRejected2);\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br")])]),t("p",[e._v("一个已经处于“已敲定”状态的 promise  也可以接收操作。在那种情况下，（如果没有问题的话）这个操作会被作为第一个异步操作被执行。注意，所有的 promise  都一定是异步的。因此，一个已经处于“已敲定”状态的 promise 中的操作只有 promise  链式调用的栈被清空且一个时间片段过去之后才会被执行。这种效果跟 "),t("code",[e._v("setTimeout(action, 10)")]),e._v(" 特别相似。")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('const promiseA = new Promise( (resolutionFunc,rejectionFunc) => {\n    resolutionFunc(777);\n});\n// At this point, "promiseA" is already settled.\npromiseA.then( (val) => console.log("asynchronous logging has val:",val) );\nconsole.log("immediate logging");\n\n// produces output in this order:\n// immediate logging\n// asynchronous logging has val: 777\n')])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br")])]),t("h3",{attrs:{id:"追踪现有设置对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#追踪现有设置对象"}},[e._v("#")]),e._v(" "),t("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise#%E8%BF%BD%E8%B8%AA%E7%8E%B0%E6%9C%89%E8%AE%BE%E7%BD%AE%E5%AF%B9%E8%B1%A1",target:"_blank",rel:"noopener noreferrer"}},[e._v("追踪现有设置对象"),t("OutboundLink")],1)]),e._v(" "),t("p",[e._v("设置对象（settings object）是 JavaScript 代码运行时用于提供附加信息的"),t("a",{attrs:{href:"https://html.spec.whatwg.org/multipage/webappapis.html#environment-settings-object",target:"_blank",rel:"noopener noreferrer"}},[e._v("环境"),t("OutboundLink")],1),e._v("。它包含了领域（realm）和模块映射（module map），以及 HTML 的特定信息，如来源（origin）等。对现有设置对象的追踪保证了浏览器知道用户给定的哪些代码片段需要使用。")]),e._v(" "),t("p",[e._v("为了更好地说明这一点，我们在这里进一步探讨领域是如何引发问题的。我们可以粗略地认为"),t("strong",[e._v("领域")]),e._v("是一个全局对象。其独特之处在于，它拥有运行 JavaScript 代码所需的所有信息。这包括像 "),t("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array",target:"_blank",rel:"noopener noreferrer"}},[t("code",[e._v("Array")]),t("OutboundLink")],1),e._v(" 和 "),t("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Error",target:"_blank",rel:"noopener noreferrer"}},[t("code",[e._v("Error")]),t("OutboundLink")],1),e._v(" 这样的对象。每一个设置对象都有自己的“副本”，而且它们与副本之间是不共享的。这可能会导致一些与 promise 相关的意外行为。为了解决这个问题，我们需要追踪"),t("strong",[e._v("现有设置对象")]),e._v("（incumbent settings object）。它表示负责用户某个函数调用工作的特定信息。")]),e._v(" "),t("p",[e._v("我们可以尝试在文档中嵌入 "),t("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/iframe",target:"_blank",rel:"noopener noreferrer"}},[e._v("``"),t("OutboundLink")],1),e._v("，并让其与父级上下文通信。由于所有的 web API 都有现有设置对象，下面的代码能够在所有的浏览器中运行：")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('<!DOCTYPE html>\n<iframe></iframe> \x3c!-- we have a realm here --\x3e\n<script> // we have a realm here as well\n  const bound = frames[0].postMessage.bind(\n    frames[0], "some data", "*");\n    // bound is a built-in function -- there is no user\n    // code on the stack, so which realm do we use?\n  window.setTimeout(bound);\n  // this still works, because we use the youngest\n  // realm (the incumbent) on the stack\n<\/script>\n')])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br"),t("span",{staticClass:"line-number"},[e._v("11")]),t("br")])]),t("p",[e._v("同样的概念也适用与 promise。如果我们稍加修改上面的示例，我们就能得到这个：")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('<!DOCTYPE html>\n<iframe></iframe> \x3c!-- we have a realm here --\x3e\n<script> // we have a realm here as well\n  const bound = frames[0].postMessage.bind(\n    frames[0], "some data", "*");\n    // bound is a built in function -- there is no user\n    // code on the stack -- which realm do we use?\n  Promise.resolve(undefined).then(bound);\n  // this still works, because we use the youngest\n  // realm (the incumbent) on the stack\n<\/script>\n')])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br"),t("span",{staticClass:"line-number"},[e._v("11")]),t("br")])]),t("p",[e._v("如果我们修改代码，使用文档中的 "),t("code",[e._v("<iframe>")]),e._v(" 来监听发送的消息，我们可以观察到现有设置对象的影响：")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('\x3c!-- y.html --\x3e\n<!DOCTYPE html>\n<iframe src="x.html"></iframe>\n<script>\n  const bound = frames[0].postMessage.bind(frames[0], "some data", "*");\n  Promise.resolve(undefined).then(bound);\n<\/script>\n\x3c!-- x.html --\x3e\n<!DOCTYPE html>\n<script>\nwindow.addEventListener("message", (event) => {\n  document.querySelector("#text").textContent = "hello";\n  // 这一部分代码仅在追踪现有设置对象的浏览器中会被运行\n  console.log(event);\n}, false);\n<\/script>\n')])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br"),t("span",{staticClass:"line-number"},[e._v("11")]),t("br"),t("span",{staticClass:"line-number"},[e._v("12")]),t("br"),t("span",{staticClass:"line-number"},[e._v("13")]),t("br"),t("span",{staticClass:"line-number"},[e._v("14")]),t("br"),t("span",{staticClass:"line-number"},[e._v("15")]),t("br"),t("span",{staticClass:"line-number"},[e._v("16")]),t("br")])]),t("p",[e._v("在上面的示例中，"),t("code",[e._v("<iframe>")]),e._v(" 仅在现有设置对象被追踪时才会被更新。这是因为在不追踪的情况下，我们可能会使用错误的环境发送消息。")]),e._v(" "),t("p",[t("strong",[e._v("备注：")]),e._v(" 目前，Firefox 完全实现了现有领域追踪，Chrome 和 Safari 仅部分实现。")]),e._v(" "),t("h2",{attrs:{id:"构造函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#构造函数"}},[e._v("#")]),e._v(" "),t("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise#%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0",target:"_blank",rel:"noopener noreferrer"}},[e._v("构造函数"),t("OutboundLink")],1)]),e._v(" "),t("ul",[t("li",[t("p",[t("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/Promise",target:"_blank",rel:"noopener noreferrer"}},[t("code",[e._v("Promise()")]),t("OutboundLink")],1)]),e._v(" "),t("p",[e._v("​    创建一个新的 "),t("code",[e._v("Promise")]),e._v(" 对象。该构造函数主要用于包装还没有添加 promise 支持的函数。")])])]),e._v(" "),t("h2",{attrs:{id:"静态方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#静态方法"}},[e._v("#")]),e._v(" "),t("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise#%E9%9D%99%E6%80%81%E6%96%B9%E6%B3%95",target:"_blank",rel:"noopener noreferrer"}},[e._v("静态方法"),t("OutboundLink")],1)]),e._v(" "),t("ul",[t("li",[t("p",[t("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/all",target:"_blank",rel:"noopener noreferrer"}},[t("code",[e._v("Promise.all(iterable)")]),t("OutboundLink")],1)]),e._v(" "),t("p",[e._v("​    这个方法返回一个新的 promise 对象，等到所有的 promise 对象都成功或有任意一个 promise 失败。    如果所有的 promise 都成功了，它会把一个包含 iterable 里所有 promise 返回值的数组作为成功回调的返回值。顺序跟 iterable 的顺序保持一致。    一旦有任意一个 iterable 里面的 promise 对象失败则立即以该 promise 对象失败的理由来拒绝这个新的 promise。")])]),e._v(" "),t("li",[t("p",[t("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/allSettled",target:"_blank",rel:"noopener noreferrer"}},[t("code",[e._v("Promise.allSettled(iterable)")]),t("OutboundLink")],1)]),e._v(" "),t("p",[e._v("​    等到所有 promise 都已敲定（每个 promise 都已兑现或已拒绝）。    返回一个 promise，该 promise 在所有 promise 都敲定后完成，并兑现一个对象数组，其中的对象对应每个 promise 的结果。")])]),e._v(" "),t("li",[t("p",[t("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/any",target:"_blank",rel:"noopener noreferrer"}},[t("code",[e._v("Promise.any(iterable)")]),t("OutboundLink")],1)]),e._v(" "),t("p",[e._v("​    接收一个 promise 对象的集合，当其中的任意一个 promise 成功，就返回那个成功的 promise 的值。")])]),e._v(" "),t("li",[t("p",[t("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/race",target:"_blank",rel:"noopener noreferrer"}},[t("code",[e._v("Promise.race(iterable)")]),t("OutboundLink")],1)]),e._v(" "),t("p",[e._v("​    等到任意一个 promise 的状态变为已敲定。    当 iterable 参数里的任意一个子 promise 成功或失败后，父 promise 马上也会用子 promise 的成功返回值或失败详情作为参数调用父 promise 绑定的相应处理函数，并返回该 promise 对象。")])]),e._v(" "),t("li",[t("p",[t("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/reject",target:"_blank",rel:"noopener noreferrer"}},[t("code",[e._v("Promise.reject(reason)")]),t("OutboundLink")],1)]),e._v(" "),t("p",[e._v("​    返回一个状态为已拒绝的 "),t("code",[e._v("Promise")]),e._v(" 对象，并将给定的失败信息传递给对应的处理函数。")])]),e._v(" "),t("li",[t("p",[t("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/resolve",target:"_blank",rel:"noopener noreferrer"}},[t("code",[e._v("Promise.resolve(value)")]),t("OutboundLink")],1)]),e._v(" "),t("p",[e._v("​    返回一个状态由给定 value 决定的 "),t("code",[e._v("Promise")]),e._v(" 对象。如果该值是 thenable（即，带有 "),t("code",[e._v("then")]),e._v(" 方法的对象），返回的Promise 对象的最终状态由 then 方法执行结果决定；否则，返回的 Promise 对象状态为已兑现，并且将该 value 传递给对应的 then 方法。    通常而言，如果你不知道一个值是否是 promise 对象，使用 "),t("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/resolve",target:"_blank",rel:"noopener noreferrer"}},[t("code",[e._v("Promise.resolve(value)")]),t("OutboundLink")],1),e._v(" 来返回一个 Promise 对象，这样就能将该 value 以 promise 对象形式使用。")])])]),e._v(" "),t("h2",{attrs:{id:"实例方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实例方法"}},[e._v("#")]),e._v(" "),t("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise#%E5%AE%9E%E4%BE%8B%E6%96%B9%E6%B3%95",target:"_blank",rel:"noopener noreferrer"}},[e._v("实例方法"),t("OutboundLink")],1)]),e._v(" "),t("p",[e._v("参阅"),t("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/API/HTML_DOM_API/Microtask_guide",target:"_blank",rel:"noopener noreferrer"}},[e._v("微任务指南"),t("OutboundLink")],1),e._v("以了解有关这些方法如何使用为任务队列和服务。")]),e._v(" "),t("ul",[t("li",[t("p",[t("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/catch",target:"_blank",rel:"noopener noreferrer"}},[t("code",[e._v("Promise.prototype.catch()")]),t("OutboundLink")],1)]),e._v(" "),t("p",[e._v("​    为 promise 添加一个被拒绝状态的回调函数，并返回一个新的 promise，若回调函数被调用，则兑现其返回值，否则兑现原来的 promise 兑现的值。")])]),e._v(" "),t("li",[t("p",[t("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/then",target:"_blank",rel:"noopener noreferrer"}},[t("code",[e._v("Promise.prototype.then()")]),t("OutboundLink")],1)]),e._v(" "),t("p",[e._v("​    为 promise 添加被兑现和被拒绝状态的回调函数，其以回调函数的返回值兑现 promise。若不处理已兑现或者已拒绝状态（例如，"),t("code",[e._v("onFulfilled")]),e._v(" 或 "),t("code",[e._v("onRejected")]),e._v(" 不是一个函数），则返回 promise 被敲定时的值。")])]),e._v(" "),t("li",[t("p",[t("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/finally",target:"_blank",rel:"noopener noreferrer"}},[t("code",[e._v("Promise.prototype.finally()")]),t("OutboundLink")],1)]),e._v(" "),t("p",[e._v("​    为 promise 添加一个回调函数，并返回一个新的 promise。这个新的 promise 将在原 promise 被兑现时兑现。而传入的回调函数将在原 promise 被敲定（无论被兑现还是被拒绝）时被调用。")])])]),e._v(" "),t("h2",{attrs:{id:"示例"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#示例"}},[e._v("#")]),e._v(" "),t("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise#%E7%A4%BA%E4%BE%8B",target:"_blank",rel:"noopener noreferrer"}},[e._v("示例"),t("OutboundLink")],1)]),e._v(" "),t("h3",{attrs:{id:"基础示例"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#基础示例"}},[e._v("#")]),e._v(" "),t("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise#%E5%9F%BA%E7%A1%80%E7%A4%BA%E4%BE%8B",target:"_blank",rel:"noopener noreferrer"}},[e._v("基础示例"),t("OutboundLink")],1)]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('let myFirstPromise = new Promise((resolve, reject) => {\n  // We call resolve(...) when what we were doing asynchronously was successful, and reject(...) when it failed.\n  // In this example, we use setTimeout(...) to simulate async code.\n  // In reality, you will probably be using something like XHR or an HTML5 API.\n  setTimeout( function() {\n    resolve("Success!")  // Yay! Everything went well!\n  }, 250)\n})\n\nmyFirstPromise.then((successMessage) => {\n  // successMessage is whatever we passed in the resolve(...) function above.\n  // It doesn\'t have to be a string, but if it is only a succeed message, it probably will be.\n  console.log("Yay! " + successMessage)\n});\n')])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br"),t("span",{staticClass:"line-number"},[e._v("11")]),t("br"),t("span",{staticClass:"line-number"},[e._v("12")]),t("br"),t("span",{staticClass:"line-number"},[e._v("13")]),t("br"),t("span",{staticClass:"line-number"},[e._v("14")]),t("br")])]),t("h3",{attrs:{id:"不同场景的示例"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#不同场景的示例"}},[e._v("#")]),e._v(" "),t("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise#%E4%B8%8D%E5%90%8C%E5%9C%BA%E6%99%AF%E7%9A%84%E7%A4%BA%E4%BE%8B",target:"_blank",rel:"noopener noreferrer"}},[e._v("不同场景的示例"),t("OutboundLink")],1)]),e._v(" "),t("p",[e._v("此示例展示了使用 promise 的多种方法，以及其可能发生的多种情况。要理解这一点，首先滚动到代码块的底部，然后查看 promise 调用链。在创建初始的 primise 后，可以接上一条 promise 调用链。该调用链由 "),t("code",[e._v(".then()")]),e._v(" 组成，通常（但不一定）在末尾会有一个 "),t("code",[e._v(".catch()")]),e._v("，并可能会接上一个 "),t("code",[e._v(".finnaly()")]),e._v("。在本示例中，promise 调用链是由一个自定义的 "),t("code",[e._v("new Promise()")]),e._v(" 构造并发起的；但在实践中，promise 调用链通常由一个 API 函数（由其他人编写的）返回的 promise 开始。")]),e._v(" "),t("p",[e._v("示例函数 "),t("code",[e._v("tetheredGetNumber()")]),e._v(" 会在设置同步调用或者函数内部抛出异常时调用 "),t("code",[e._v("reject()")]),e._v("。函数 "),t("code",[e._v("promiseGetWord()")]),e._v(" 展示了如何在 API 函数内部创建并返回一个 promise。")]),e._v(" "),t("p",[e._v("请注意，函数 "),t("code",[e._v("troubleWithGetNumber()")]),e._v(" 以 "),t("code",[e._v("throw()")]),e._v(" 结束。这是强制的做法，因为 ES6 的 promsie 会遍历所有的 "),t("code",[e._v(".then")]),e._v(" promise，在遇到错误时，如果不使用 "),t("code",[e._v("throw()")]),e._v("，这个错误会被当作“已修复”。这很麻烦，因此，通常会在 "),t("code",[e._v(".then()")]),e._v(" promise 调用链中忽略 "),t("code",[e._v("rejectionFunc")]),e._v("，而仅在最后的 "),t("code",[e._v(".catch()")]),e._v(" 中保留一个 "),t("code",[e._v("rejectionFunc")]),e._v("。另一种方法是抛出一个特殊值（本例使用了 "),t("code",[e._v("-999")]),e._v("，但使用自定义错误类型更合适）。")]),e._v(" "),t("p",[e._v("示例代码可以在 NodeJS 下运行。请通过查看实际发生的错误来理解代码。若要提高错误发生的概率，请该改变 "),t("code",[e._v("threshold")]),e._v(" 的值。")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('"use strict";\n\n// To experiment with error handling, "threshold" values cause errors randomly\nconst THRESHOLD_A = 8; // can use zero 0 to guarantee error\n\nfunction tetheredGetNumber(resolve, reject) {\n  try {\n    setTimeout(\n      function() {\n        const randomInt = Date.now();\n        const value = randomInt % 10;\n        try {\n          if(value >= THRESHOLD_A) {\n            throw new Error(`Too large: ${value}`);\n          }\n        } catch(msg) {\n            reject(`Error in callback ${msg}`);\n        }\n      resolve(value);\n      return;\n    }, 500);\n    // To experiment with error at set-up, uncomment the following \'throw\'.\n    // throw new Error("Bad setup");\n  } catch(err) {\n    reject(`Error during setup: ${err}`);\n  }\n  return;\n}\n\nfunction determineParity(value) {\n  const isOdd = value % 2 ? true : false ;\n  const parityInfo = { theNumber: value, isOdd: isOdd };\n  return parityInfo;\n}\n\nfunction troubleWithGetNumber(reason) {\n  console.error(`Trouble getting number: ${reason}`);\n  throw -999; // must "throw" something, to maintain error state down the chain\n}\n\nfunction promiseGetWord(parityInfo) {\n  // The "tetheredGetWord()" function gets "parityInfo" as closure variable.\n  const tetheredGetWord = function(resolve,reject) {\n    const theNumber = parityInfo.theNumber;\n    const threshold_B = THRESHOLD_A - 1;\n    if(theNumber >= threshold_B) {\n      reject(`Still too large: ${theNumber}`);\n    } else {\n      parityInfo.wordEvenOdd = parityInfo.isOdd ? \'odd\' : \'even\';\n      resolve(parityInfo);\n    }\n    return;\n  }\n  return new Promise(tetheredGetWord);\n}\n\n(new Promise(tetheredGetNumber))\n  .then(determineParity,troubleWithGetNumber)\n  .then(promiseGetWord)\n  .then((info) => {\n    console.log("Got: ",info.theNumber," , ", info.wordEvenOdd);\n    return info;\n  })\n  .catch((reason) => {\n    if(reason === -999) {\n      console.error("Had previously handled error");\n    }\n    else {\n      console.error(`Trouble with promiseGetWord(): ${reason}`);\n    }\n   })\n  .finally((info) => console.log("All done"));\n')])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br"),t("span",{staticClass:"line-number"},[e._v("11")]),t("br"),t("span",{staticClass:"line-number"},[e._v("12")]),t("br"),t("span",{staticClass:"line-number"},[e._v("13")]),t("br"),t("span",{staticClass:"line-number"},[e._v("14")]),t("br"),t("span",{staticClass:"line-number"},[e._v("15")]),t("br"),t("span",{staticClass:"line-number"},[e._v("16")]),t("br"),t("span",{staticClass:"line-number"},[e._v("17")]),t("br"),t("span",{staticClass:"line-number"},[e._v("18")]),t("br"),t("span",{staticClass:"line-number"},[e._v("19")]),t("br"),t("span",{staticClass:"line-number"},[e._v("20")]),t("br"),t("span",{staticClass:"line-number"},[e._v("21")]),t("br"),t("span",{staticClass:"line-number"},[e._v("22")]),t("br"),t("span",{staticClass:"line-number"},[e._v("23")]),t("br"),t("span",{staticClass:"line-number"},[e._v("24")]),t("br"),t("span",{staticClass:"line-number"},[e._v("25")]),t("br"),t("span",{staticClass:"line-number"},[e._v("26")]),t("br"),t("span",{staticClass:"line-number"},[e._v("27")]),t("br"),t("span",{staticClass:"line-number"},[e._v("28")]),t("br"),t("span",{staticClass:"line-number"},[e._v("29")]),t("br"),t("span",{staticClass:"line-number"},[e._v("30")]),t("br"),t("span",{staticClass:"line-number"},[e._v("31")]),t("br"),t("span",{staticClass:"line-number"},[e._v("32")]),t("br"),t("span",{staticClass:"line-number"},[e._v("33")]),t("br"),t("span",{staticClass:"line-number"},[e._v("34")]),t("br"),t("span",{staticClass:"line-number"},[e._v("35")]),t("br"),t("span",{staticClass:"line-number"},[e._v("36")]),t("br"),t("span",{staticClass:"line-number"},[e._v("37")]),t("br"),t("span",{staticClass:"line-number"},[e._v("38")]),t("br"),t("span",{staticClass:"line-number"},[e._v("39")]),t("br"),t("span",{staticClass:"line-number"},[e._v("40")]),t("br"),t("span",{staticClass:"line-number"},[e._v("41")]),t("br"),t("span",{staticClass:"line-number"},[e._v("42")]),t("br"),t("span",{staticClass:"line-number"},[e._v("43")]),t("br"),t("span",{staticClass:"line-number"},[e._v("44")]),t("br"),t("span",{staticClass:"line-number"},[e._v("45")]),t("br"),t("span",{staticClass:"line-number"},[e._v("46")]),t("br"),t("span",{staticClass:"line-number"},[e._v("47")]),t("br"),t("span",{staticClass:"line-number"},[e._v("48")]),t("br"),t("span",{staticClass:"line-number"},[e._v("49")]),t("br"),t("span",{staticClass:"line-number"},[e._v("50")]),t("br"),t("span",{staticClass:"line-number"},[e._v("51")]),t("br"),t("span",{staticClass:"line-number"},[e._v("52")]),t("br"),t("span",{staticClass:"line-number"},[e._v("53")]),t("br"),t("span",{staticClass:"line-number"},[e._v("54")]),t("br"),t("span",{staticClass:"line-number"},[e._v("55")]),t("br"),t("span",{staticClass:"line-number"},[e._v("56")]),t("br"),t("span",{staticClass:"line-number"},[e._v("57")]),t("br"),t("span",{staticClass:"line-number"},[e._v("58")]),t("br"),t("span",{staticClass:"line-number"},[e._v("59")]),t("br"),t("span",{staticClass:"line-number"},[e._v("60")]),t("br"),t("span",{staticClass:"line-number"},[e._v("61")]),t("br"),t("span",{staticClass:"line-number"},[e._v("62")]),t("br"),t("span",{staticClass:"line-number"},[e._v("63")]),t("br"),t("span",{staticClass:"line-number"},[e._v("64")]),t("br"),t("span",{staticClass:"line-number"},[e._v("65")]),t("br"),t("span",{staticClass:"line-number"},[e._v("66")]),t("br"),t("span",{staticClass:"line-number"},[e._v("67")]),t("br"),t("span",{staticClass:"line-number"},[e._v("68")]),t("br"),t("span",{staticClass:"line-number"},[e._v("69")]),t("br"),t("span",{staticClass:"line-number"},[e._v("70")]),t("br"),t("span",{staticClass:"line-number"},[e._v("71")]),t("br"),t("span",{staticClass:"line-number"},[e._v("72")]),t("br")])]),t("h3",{attrs:{id:"高级示例"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#高级示例"}},[e._v("#")]),e._v(" "),t("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise#%E9%AB%98%E7%BA%A7%E7%A4%BA%E4%BE%8B",target:"_blank",rel:"noopener noreferrer"}},[e._v("高级示例"),t("OutboundLink")],1)]),e._v(" "),t("p",[e._v("本例展示了 "),t("code",[e._v("Promise")]),e._v(" 的一些机制。"),t("code",[e._v("testPromise()")]),e._v(" 方法在每次点击 "),t("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/button",target:"_blank",rel:"noopener noreferrer"}},[e._v("``"),t("OutboundLink")],1),e._v(" 按钮时被调用，该方法会创建一个 promise 对象，使用 "),t("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/API/setTimeout",target:"_blank",rel:"noopener noreferrer"}},[t("code",[e._v("setTimeout()")]),t("OutboundLink")],1),e._v(" 让 "),t("code",[e._v("Promise")]),e._v(" 等待 1-3 秒不等的时间来兑现计数结果（从 1 开始的数字）。使用 "),t("code",[e._v("Promise")]),e._v(" 构造函数来创建 promise。")]),e._v(" "),t("p",[e._v("promise 的值的兑现过程都被日志记录（logged，使用 "),t("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/then",target:"_blank",rel:"noopener noreferrer"}},[t("code",[e._v("p1.then()")]),t("OutboundLink")],1),e._v("）下来。这些日志信息展示了方法中的同步代码和异步代码是如何通过 promise 完成解耦的。")]),e._v(" "),t("p",[e._v("通过在短时间内多次点击按钮，你可以看到不同的 promise 被一个接一个地兑现。")]),e._v(" "),t("h4",{attrs:{id:"html"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#html"}},[e._v("#")]),e._v(" HTML")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('<button id="make-promise">Make a promise!</button>\n<div id="log"></div>\n')])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br")])]),t("h4",{attrs:{id:"javascript"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#javascript"}},[e._v("#")]),e._v(" JavaScript")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("\"use strict\";\nlet promiseCount = 0;\n\nfunction testPromise() {\n  let thisPromiseCount = ++promiseCount;\n  let log = document.getElementById('log');\n  // begin\n  log.insertAdjacentHTML('beforeend', thisPromiseCount + ') Started<br>');\n  // We make a new promise: we promise a numeric count of this promise, starting from 1 (after waiting 3s)\n  let p1 = new Promise((resolve, reject) => {\n    // The executor function is called with the ability to resolve or reject the promise\n    log.insertAdjacentHTML('beforeend', thisPromiseCount + ') Promise constructor<br>');\n    // This is only an example to create asynchronism\n    window.setTimeout(function() {\n        // We fulfill the promise !\n        resolve(thisPromiseCount);\n    }, Math.random() * 2000 + 1000);\n  });\n\n  // We define what to do when the promise is resolved with the then() call,\n  // and what to do when the promise is rejected with the catch() call\n  p1.then(function(val) {\n    // Log the fulfillment value\n    log.insertAdjacentHTML('beforeend', val + ') Promise fulfilled<br>');\n  }).catch((reason) => {\n    // Log the rejection reason\n    console.log(`Handle rejected promise (${reason}) here.`);\n  });\n  // end\n  log.insertAdjacentHTML('beforeend', thisPromiseCount + ') Promise made<br>');\n}\n\nif (\"Promise\" in window) {\n  let btn = document.getElementById(\"make-promise\");\n  btn.addEventListener(\"click\",testPromise);\n} else {\n  log = document.getElementById('log');\n  log.textContent = \"Live example not available as your browser doesn't support the <code>Promise<code> interface.\";\n}\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br"),t("span",{staticClass:"line-number"},[e._v("11")]),t("br"),t("span",{staticClass:"line-number"},[e._v("12")]),t("br"),t("span",{staticClass:"line-number"},[e._v("13")]),t("br"),t("span",{staticClass:"line-number"},[e._v("14")]),t("br"),t("span",{staticClass:"line-number"},[e._v("15")]),t("br"),t("span",{staticClass:"line-number"},[e._v("16")]),t("br"),t("span",{staticClass:"line-number"},[e._v("17")]),t("br"),t("span",{staticClass:"line-number"},[e._v("18")]),t("br"),t("span",{staticClass:"line-number"},[e._v("19")]),t("br"),t("span",{staticClass:"line-number"},[e._v("20")]),t("br"),t("span",{staticClass:"line-number"},[e._v("21")]),t("br"),t("span",{staticClass:"line-number"},[e._v("22")]),t("br"),t("span",{staticClass:"line-number"},[e._v("23")]),t("br"),t("span",{staticClass:"line-number"},[e._v("24")]),t("br"),t("span",{staticClass:"line-number"},[e._v("25")]),t("br"),t("span",{staticClass:"line-number"},[e._v("26")]),t("br"),t("span",{staticClass:"line-number"},[e._v("27")]),t("br"),t("span",{staticClass:"line-number"},[e._v("28")]),t("br"),t("span",{staticClass:"line-number"},[e._v("29")]),t("br"),t("span",{staticClass:"line-number"},[e._v("30")]),t("br"),t("span",{staticClass:"line-number"},[e._v("31")]),t("br"),t("span",{staticClass:"line-number"},[e._v("32")]),t("br"),t("span",{staticClass:"line-number"},[e._v("33")]),t("br"),t("span",{staticClass:"line-number"},[e._v("34")]),t("br"),t("span",{staticClass:"line-number"},[e._v("35")]),t("br"),t("span",{staticClass:"line-number"},[e._v("36")]),t("br"),t("span",{staticClass:"line-number"},[e._v("37")]),t("br"),t("span",{staticClass:"line-number"},[e._v("38")]),t("br"),t("span",{staticClass:"line-number"},[e._v("39")]),t("br")])]),t("h4",{attrs:{id:"结果"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#结果"}},[e._v("#")]),e._v(" 结果")]),e._v(" "),t("iframe",{staticClass:"sample-code-frame",attrs:{title:"高级示例 sample",id:"frame_高级示例",src:"https://yari-demos.prod.mdn.mozit.cloud/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/_sample_.%E9%AB%98%E7%BA%A7%E7%A4%BA%E4%BE%8B.html",loading:"lazy",width:"500",height:"200"}}),e._v(" "),t("h3",{attrs:{id:"使用-xhr-加载图像"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用-xhr-加载图像"}},[e._v("#")]),e._v(" "),t("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise#%E4%BD%BF%E7%94%A8_xhr_%E5%8A%A0%E8%BD%BD%E5%9B%BE%E5%83%8F",target:"_blank",rel:"noopener noreferrer"}},[e._v("使用 XHR 加载图像"),t("OutboundLink")],1)]),e._v(" "),t("p",[e._v("另一个使用 "),t("code",[e._v("Promise")]),e._v(" 和 "),t("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest",target:"_blank",rel:"noopener noreferrer"}},[t("code",[e._v("XMLHttpRequest")]),t("OutboundLink")],1),e._v(" 加载一个图像的例子可在 MDN GitHub "),t("a",{attrs:{href:"https://github.com/mdn/js-examples/tree/master/promises-test",target:"_blank",rel:"noopener noreferrer"}},[e._v("js-examples"),t("OutboundLink")],1),e._v(" 仓库中找到。你也可以"),t("a",{attrs:{href:"https://mdn.github.io/js-examples/promises-test/",target:"_blank",rel:"noopener noreferrer"}},[e._v("看它的实例"),t("OutboundLink")],1),e._v("。每一步都有注释可以让你详细的了解 Promise 和 XHR 架构。")]),e._v(" "),t("h2",{attrs:{id:"规范"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#规范"}},[e._v("#")]),e._v(" "),t("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise#%E8%A7%84%E8%8C%83",target:"_blank",rel:"noopener noreferrer"}},[e._v("规范"),t("OutboundLink")],1)]),e._v(" "),t("table",[t("thead",[t("tr",[t("th",[e._v("Specification")])])]),e._v(" "),t("tbody",[t("tr",[t("td",[t("a",{attrs:{href:"https://tc39.es/ecma262/multipage/control-abstraction-objects.html#sec-promise-objects",target:"_blank",rel:"noopener noreferrer"}},[e._v("ECMAScript Language Specification  # sec-promise-objects"),t("OutboundLink")],1)])])])]),e._v(" "),t("h2",{attrs:{id:"浏览器兼容性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#浏览器兼容性"}},[e._v("#")]),e._v(" "),t("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise#%E6%B5%8F%E8%A7%88%E5%99%A8%E5%85%BC%E5%AE%B9%E6%80%A7",target:"_blank",rel:"noopener noreferrer"}},[e._v("浏览器兼容性"),t("OutboundLink")],1)]),e._v(" "),t("p",[e._v("[Report problems with this compatibility data on GitHub](https://github.com/mdn/browser-compat-data/issues/new?mdn-url=https%3A%2F%2Fdeveloper.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FJavaScript%2FReference%2FGlobal_Objects%2FPromise&metadata= MDN+page+report+details<%2Fsummary> *+Query%3A+"),t("code",[e._v("javascript.builtins.Promise")]),e._v(" *+Report+started%3A+2022-07-27T11%3A32%3A06.524Z <%2Fdetails>&title=javascript.builtins.Promise+-+&template=data-problem.yml)")]),e._v(" "),t("table",[t("thead",[t("tr",[t("th"),e._v(" "),t("th",[e._v("desktop")]),e._v(" "),t("th",[e._v("mobile")]),e._v(" "),t("th",[e._v("server")]),e._v(" "),t("th"),e._v(" "),t("th"),e._v(" "),t("th"),e._v(" "),t("th"),e._v(" "),t("th"),e._v(" "),t("th"),e._v(" "),t("th"),e._v(" "),t("th"),e._v(" "),t("th"),e._v(" "),t("th"),e._v(" "),t("th")])]),e._v(" "),t("tbody",[t("tr",[t("td"),e._v(" "),t("td",[e._v("Chrome")]),e._v(" "),t("td",[e._v("Edge")]),e._v(" "),t("td",[e._v("Firefox")]),e._v(" "),t("td",[e._v("Internet Explorer")]),e._v(" "),t("td",[e._v("Opera")]),e._v(" "),t("td",[e._v("Safari")]),e._v(" "),t("td",[e._v("Chrome Android")]),e._v(" "),t("td",[e._v("Firefox for Android")]),e._v(" "),t("td",[e._v("Opera Android")]),e._v(" "),t("td",[e._v("Safari on iOS")]),e._v(" "),t("td",[e._v("Samsung Internet")]),e._v(" "),t("td",[e._v("WebView Android")]),e._v(" "),t("td",[e._v("Deno")]),e._v(" "),t("td",[e._v("Node.js")])]),e._v(" "),t("tr",[t("td",[t("code",[e._v("Promise")])]),e._v(" "),t("td"),e._v(" "),t("td"),e._v(" "),t("td"),e._v(" "),t("td"),e._v(" "),t("td"),e._v(" "),t("td"),e._v(" "),t("td"),e._v(" "),t("td"),e._v(" "),t("td"),e._v(" "),t("td"),e._v(" "),t("td"),e._v(" "),t("td"),e._v(" "),t("td"),e._v(" "),t("td")])])]),e._v(" "),t("table",[t("thead",[t("tr",[t("th",[t("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/Promise",target:"_blank",rel:"noopener noreferrer"}},[t("code",[e._v("Promise()")]),e._v(" constructor"),t("OutboundLink")],1)]),e._v(" "),t("th")])]),e._v(" "),t("tbody",[t("tr",[t("td"),e._v(" "),t("td")])])]),e._v(" "),t("table",[t("thead",[t("tr",[t("th",[t("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/all",target:"_blank",rel:"noopener noreferrer"}},[t("code",[e._v("all()")]),t("OutboundLink")],1)]),e._v(" "),t("th")])]),e._v(" "),t("tbody",[t("tr",[t("td"),e._v(" "),t("td")])])]),e._v(" "),t("table",[t("thead",[t("tr",[t("th",[t("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/allSettled",target:"_blank",rel:"noopener noreferrer"}},[t("code",[e._v("allSettled()")]),t("OutboundLink")],1)]),e._v(" "),t("th")])]),e._v(" "),t("tbody",[t("tr",[t("td"),e._v(" "),t("td")])])]),e._v(" "),t("table",[t("thead",[t("tr",[t("th",[t("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/any",target:"_blank",rel:"noopener noreferrer"}},[t("code",[e._v("any")]),t("OutboundLink")],1)]),e._v(" "),t("th")])]),e._v(" "),t("tbody",[t("tr",[t("td"),e._v(" "),t("td")])])]),e._v(" "),t("table",[t("thead",[t("tr",[t("th",[t("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/catch",target:"_blank",rel:"noopener noreferrer"}},[t("code",[e._v("catch()")]),t("OutboundLink")],1)]),e._v(" "),t("th")])]),e._v(" "),t("tbody",[t("tr",[t("td"),e._v(" "),t("td")])])]),e._v(" "),t("table",[t("thead",[t("tr",[t("th",[t("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/finally",target:"_blank",rel:"noopener noreferrer"}},[t("code",[e._v("finally()")]),t("OutboundLink")],1)]),e._v(" "),t("th")])]),e._v(" "),t("tbody",[t("tr",[t("td"),e._v(" "),t("td")])])]),e._v(" "),t("table",[t("thead",[t("tr",[t("th",[t("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",target:"_blank",rel:"noopener noreferrer"}},[e._v("Incumbent settings object tracking"),t("OutboundLink")],1)]),e._v(" "),t("th")])]),e._v(" "),t("tbody",[t("tr",[t("td"),e._v(" "),t("td")])])]),e._v(" "),t("table",[t("thead",[t("tr",[t("th",[t("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/race",target:"_blank",rel:"noopener noreferrer"}},[t("code",[e._v("race()")]),t("OutboundLink")],1)]),e._v(" "),t("th")])]),e._v(" "),t("tbody",[t("tr",[t("td"),e._v(" "),t("td")])])]),e._v(" "),t("table",[t("thead",[t("tr",[t("th",[t("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/reject",target:"_blank",rel:"noopener noreferrer"}},[t("code",[e._v("reject()")]),t("OutboundLink")],1)]),e._v(" "),t("th")])]),e._v(" "),t("tbody",[t("tr",[t("td"),e._v(" "),t("td")])])]),e._v(" "),t("table",[t("thead",[t("tr",[t("th",[t("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/resolve",target:"_blank",rel:"noopener noreferrer"}},[t("code",[e._v("resolve()")]),t("OutboundLink")],1)]),e._v(" "),t("th")])]),e._v(" "),t("tbody",[t("tr",[t("td"),e._v(" "),t("td")])])]),e._v(" "),t("table",[t("thead",[t("tr",[t("th",[t("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then",target:"_blank",rel:"noopener noreferrer"}},[t("code",[e._v("then()")]),t("OutboundLink")],1)]),e._v(" "),t("th")])]),e._v(" "),t("tbody",[t("tr",[t("td"),e._v(" "),t("td")])])]),e._v(" "),t("h3",{attrs:{id:"legend"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#legend"}},[e._v("#")]),e._v(" Legend")]),e._v(" "),t("h2",{attrs:{id:"参见"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#参见"}},[e._v("#")]),e._v(" "),t("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise#%E5%8F%82%E8%A7%81",target:"_blank",rel:"noopener noreferrer"}},[e._v("参见"),t("OutboundLink")],1)]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://github.com/zloirock/core-js#ecmascript-promise",target:"_blank",rel:"noopener noreferrer"}},[t("code",[e._v("core-js")]),e._v(" 中 "),t("code",[e._v("Promise")]),e._v(" 的 Polyfill"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Using_promises",target:"_blank",rel:"noopener noreferrer"}},[e._v("使用 promise"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://promisesaplus.com/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Promises/A+ 规范"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://web.dev/promises/",target:"_blank",rel:"noopener noreferrer"}},[e._v("JavaScript Promises：简介"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://www.slideshare.net/domenicdenicola/callbacks-promises-and-coroutines-oh-my-the-evolution-of-asynchronicity-in-javascript",target:"_blank",rel:"noopener noreferrer"}},[e._v("Domenic Denicola：回调、Promise 和协程——JavaScript 中的异步编程模式"),t("OutboundLink")],1)])])])}),[],!1,null,null,null);r.default=n.exports}}]);