(window.webpackJsonp=window.webpackJsonp||[]).push([[80],{548:function(s,e,a){"use strict";a.r(e);var n=a(18),t=Object(n.a)({},(function(){var s=this,e=s.$createElement,a=s._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"class-的继承"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#class-的继承"}},[s._v("#")]),s._v(" Class 的继承")]),s._v(" "),a("ol",[a("li",[a("a",{attrs:{href:"https://es6.ruanyifeng.com/#docs/module#%E6%A6%82%E8%BF%B0",target:"_blank",rel:"noopener noreferrer"}},[s._v("概述"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"https://es6.ruanyifeng.com/#docs/module#%E4%B8%A5%E6%A0%BC%E6%A8%A1%E5%BC%8F",target:"_blank",rel:"noopener noreferrer"}},[s._v("严格模式"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"https://es6.ruanyifeng.com/#docs/module#export%20%E5%91%BD%E4%BB%A4",target:"_blank",rel:"noopener noreferrer"}},[s._v("export 命令"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"https://es6.ruanyifeng.com/#docs/module#import%20%E5%91%BD%E4%BB%A4",target:"_blank",rel:"noopener noreferrer"}},[s._v("import 命令"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"https://es6.ruanyifeng.com/#docs/module#%E6%A8%A1%E5%9D%97%E7%9A%84%E6%95%B4%E4%BD%93%E5%8A%A0%E8%BD%BD",target:"_blank",rel:"noopener noreferrer"}},[s._v("模块的整体加载"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"https://es6.ruanyifeng.com/#docs/module#export%20default%20%E5%91%BD%E4%BB%A4",target:"_blank",rel:"noopener noreferrer"}},[s._v("export default 命令"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"https://es6.ruanyifeng.com/#docs/module#export%20%E4%B8%8E%20import%20%E7%9A%84%E5%A4%8D%E5%90%88%E5%86%99%E6%B3%95",target:"_blank",rel:"noopener noreferrer"}},[s._v("export 与 import 的复合写法"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"https://es6.ruanyifeng.com/#docs/module#%E6%A8%A1%E5%9D%97%E7%9A%84%E7%BB%A7%E6%89%BF",target:"_blank",rel:"noopener noreferrer"}},[s._v("模块的继承"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"https://es6.ruanyifeng.com/#docs/module#%E8%B7%A8%E6%A8%A1%E5%9D%97%E5%B8%B8%E9%87%8F",target:"_blank",rel:"noopener noreferrer"}},[s._v("跨模块常量"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"https://es6.ruanyifeng.com/#docs/module#import()",target:"_blank",rel:"noopener noreferrer"}},[s._v("import()"),a("OutboundLink")],1)])]),s._v(" "),a("h2",{attrs:{id:"概述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[s._v("#")]),s._v(" 概述")]),s._v(" "),a("p",[s._v("历史上，JavaScript 一直没有模块（module）体系，无法将一个大程序拆分成互相依赖的小文件，再用简单的方法拼装起来。其他语言都有这项功能，比如 Ruby 的"),a("code",[s._v("require")]),s._v("、Python 的"),a("code",[s._v("import")]),s._v("，甚至就连 CSS 都有"),a("code",[s._v("@import")]),s._v("，但是 JavaScript 任何这方面的支持都没有，这对开发大型的、复杂的项目形成了巨大障碍。")]),s._v(" "),a("p",[s._v("在 ES6 之前，社区制定了一些模块加载方案，最主要的有 CommonJS 和 AMD 两种。前者用于服务器，后者用于浏览器。ES6 在语言标准的层面上，实现了模块功能，而且实现得相当简单，完全可以取代 CommonJS 和 AMD 规范，成为浏览器和服务器通用的模块解决方案。")]),s._v(" "),a("p",[s._v("ES6 模块的设计思想是尽量的静态化，使得编译时就能确定模块的依赖关系，以及输入和输出的变量。CommonJS 和 AMD 模块，都只能在运行时确定这些东西。比如，CommonJS 模块就是对象，输入时必须查找对象属性。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// CommonJS模块\nlet { stat, exists, readfile } = require('fs');\n\n// 等同于\nlet _fs = require('fs');\nlet stat = _fs.stat;\nlet exists = _fs.exists;\nlet readfile = _fs.readfile;\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[s._v("上面代码的实质是整体加载"),a("code",[s._v("fs")]),s._v("模块（即加载"),a("code",[s._v("fs")]),s._v("的所有方法），生成一个对象（"),a("code",[s._v("_fs")]),s._v("），然后再从这个对象上面读取 3 个方法。这种加载称为“运行时加载”，因为只有运行时才能得到这个对象，导致完全没办法在编译时做“静态优化”。")]),s._v(" "),a("p",[s._v("ES6 模块不是对象，而是通过"),a("code",[s._v("export")]),s._v("命令显式指定输出的代码，再通过"),a("code",[s._v("import")]),s._v("命令输入。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// ES6模块\nimport { stat, exists, readFile } from 'fs';\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("上面代码的实质是从"),a("code",[s._v("fs")]),s._v("模块加载 3 个方法，其他方法不加载。这种加载称为“编译时加载”或者静态加载，即 ES6 可以在编译时就完成模块加载，效率要比 CommonJS 模块的加载方式高。当然，这也导致了没法引用 ES6 模块本身，因为它不是对象。")]),s._v(" "),a("p",[s._v("由于 ES6 模块是编译时加载，使得静态分析成为可能。有了它，就能进一步拓宽 JavaScript 的语法，比如引入宏（macro）和类型检验（type system）这些只能靠静态分析实现的功能。")]),s._v(" "),a("p",[s._v("除了静态加载带来的各种好处，ES6 模块还有以下好处。")]),s._v(" "),a("ul",[a("li",[s._v("不再需要"),a("code",[s._v("UMD")]),s._v("模块格式了，将来服务器和浏览器都会支持 ES6 模块格式。目前，通过各种工具库，其实已经做到了这一点。")]),s._v(" "),a("li",[s._v("将来浏览器的新 API 就能用模块格式提供，不再必须做成全局变量或者"),a("code",[s._v("navigator")]),s._v("对象的属性。")]),s._v(" "),a("li",[s._v("不再需要对象作为命名空间（比如"),a("code",[s._v("Math")]),s._v("对象），未来这些功能可以通过模块提供。")])]),s._v(" "),a("p",[s._v("本章介绍 ES6 模块的语法，下一章介绍如何在浏览器和 Node 之中，加载 ES6 模块。")]),s._v(" "),a("h2",{attrs:{id:"严格模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#严格模式"}},[s._v("#")]),s._v(" 严格模式")]),s._v(" "),a("p",[s._v("ES6 的模块自动采用严格模式，不管你有没有在模块头部加上"),a("code",[s._v('"use strict";')]),s._v("。")]),s._v(" "),a("p",[s._v("严格模式主要有以下限制。")]),s._v(" "),a("ul",[a("li",[s._v("变量必须声明后再使用")]),s._v(" "),a("li",[s._v("函数的参数不能有同名属性，否则报错")]),s._v(" "),a("li",[s._v("不能使用"),a("code",[s._v("with")]),s._v("语句")]),s._v(" "),a("li",[s._v("不能对只读属性赋值，否则报错")]),s._v(" "),a("li",[s._v("不能使用前缀 0 表示八进制数，否则报错")]),s._v(" "),a("li",[s._v("不能删除不可删除的属性，否则报错")]),s._v(" "),a("li",[s._v("不能删除变量"),a("code",[s._v("delete prop")]),s._v("，会报错，只能删除属性"),a("code",[s._v("delete global[prop]")])]),s._v(" "),a("li",[a("code",[s._v("eval")]),s._v("不会在它的外层作用域引入变量")]),s._v(" "),a("li",[a("code",[s._v("eval")]),s._v("和"),a("code",[s._v("arguments")]),s._v("不能被重新赋值")]),s._v(" "),a("li",[a("code",[s._v("arguments")]),s._v("不会自动反映函数参数的变化")]),s._v(" "),a("li",[s._v("不能使用"),a("code",[s._v("arguments.callee")])]),s._v(" "),a("li",[s._v("不能使用"),a("code",[s._v("arguments.caller")])]),s._v(" "),a("li",[s._v("禁止"),a("code",[s._v("this")]),s._v("指向全局对象")]),s._v(" "),a("li",[s._v("不能使用"),a("code",[s._v("fn.caller")]),s._v("和"),a("code",[s._v("fn.arguments")]),s._v("获取函数调用的堆栈")]),s._v(" "),a("li",[s._v("增加了保留字（比如"),a("code",[s._v("protected")]),s._v("、"),a("code",[s._v("static")]),s._v("和"),a("code",[s._v("interface")]),s._v("）")])]),s._v(" "),a("p",[s._v("上面这些限制，模块都必须遵守。由于严格模式是 ES5 引入的，不属于 ES6，所以请参阅相关 ES5 书籍，本书不再详细介绍了。")]),s._v(" "),a("p",[s._v("其中，尤其需要注意"),a("code",[s._v("this")]),s._v("的限制。ES6 模块之中，顶层的"),a("code",[s._v("this")]),s._v("指向"),a("code",[s._v("undefined")]),s._v("，即不应该在顶层代码使用"),a("code",[s._v("this")]),s._v("。")]),s._v(" "),a("h2",{attrs:{id:"export-命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#export-命令"}},[s._v("#")]),s._v(" export 命令")]),s._v(" "),a("p",[s._v("模块功能主要由两个命令构成："),a("code",[s._v("export")]),s._v("和"),a("code",[s._v("import")]),s._v("。"),a("code",[s._v("export")]),s._v("命令用于规定模块的对外接口，"),a("code",[s._v("import")]),s._v("命令用于输入其他模块提供的功能。")]),s._v(" "),a("p",[s._v("一个模块就是一个独立的文件。该文件内部的所有变量，外部无法获取。如果你希望外部能够读取模块内部的某个变量，就必须使用"),a("code",[s._v("export")]),s._v("关键字输出该变量。下面是一个 JS 文件，里面使用"),a("code",[s._v("export")]),s._v("命令输出变量。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// profile.js\nexport var firstName = 'Michael';\nexport var lastName = 'Jackson';\nexport var year = 1958;\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("上面代码是"),a("code",[s._v("profile.js")]),s._v("文件，保存了用户信息。ES6 将其视为一个模块，里面用"),a("code",[s._v("export")]),s._v("命令对外部输出了三个变量。")]),s._v(" "),a("p",[a("code",[s._v("export")]),s._v("的写法，除了像上面这样，还有另外一种。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// profile.js\nvar firstName = 'Michael';\nvar lastName = 'Jackson';\nvar year = 1958;\n\nexport { firstName, lastName, year };\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("上面代码在"),a("code",[s._v("export")]),s._v("命令后面，使用大括号指定所要输出的一组变量。它与前一种写法（直接放置在"),a("code",[s._v("var")]),s._v("语句前）是等价的，但是应该优先考虑使用这种写法。因为这样就可以在脚本尾部，一眼看清楚输出了哪些变量。")]),s._v(" "),a("p",[a("code",[s._v("export")]),s._v("命令除了输出变量，还可以输出函数或类（class）。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("export function multiply(x, y) {\n  return x * y;\n};\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("上面代码对外输出一个函数"),a("code",[s._v("multiply")]),s._v("。")]),s._v(" "),a("p",[s._v("通常情况下，"),a("code",[s._v("export")]),s._v("输出的变量就是本来的名字，但是可以使用"),a("code",[s._v("as")]),s._v("关键字重命名。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function v1() { ... }\nfunction v2() { ... }\n\nexport {\n  v1 as streamV1,\n  v2 as streamV2,\n  v2 as streamLatestVersion\n};\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[s._v("上面代码使用"),a("code",[s._v("as")]),s._v("关键字，重命名了函数"),a("code",[s._v("v1")]),s._v("和"),a("code",[s._v("v2")]),s._v("的对外接口。重命名后，"),a("code",[s._v("v2")]),s._v("可以用不同的名字输出两次。")]),s._v(" "),a("p",[s._v("需要特别注意的是，"),a("code",[s._v("export")]),s._v("命令规定的是对外的接口，必须与模块内部的变量建立一一对应关系。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// 报错\nexport 1;\n\n// 报错\nvar m = 1;\nexport m;\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("上面两种写法都会报错，因为没有提供对外的接口。第一种写法直接输出 1，第二种写法通过变量"),a("code",[s._v("m")]),s._v("，还是直接输出 1。"),a("code",[s._v("1")]),s._v("只是一个值，不是接口。正确的写法是下面这样。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// 写法一\nexport var m = 1;\n\n// 写法二\nvar m = 1;\nexport {m};\n\n// 写法三\nvar n = 1;\nexport {n as m};\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("p",[s._v("上面三种写法都是正确的，规定了对外的接口"),a("code",[s._v("m")]),s._v("。其他脚本可以通过这个接口，取到值"),a("code",[s._v("1")]),s._v("。它们的实质是，在接口名与模块内部变量之间，建立了一一对应的关系。")]),s._v(" "),a("p",[s._v("同样的，"),a("code",[s._v("function")]),s._v("和"),a("code",[s._v("class")]),s._v("的输出，也必须遵守这样的写法。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// 报错\nfunction f() {}\nexport f;\n\n// 正确\nexport function f() {};\n\n// 正确\nfunction f() {}\nexport {f};\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("p",[s._v("另外，"),a("code",[s._v("export")]),s._v("语句输出的接口，与其对应的值是动态绑定关系，即通过该接口，可以取到模块内部实时的值。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("export var foo = 'bar';\nsetTimeout(() => foo = 'baz', 500);\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("上面代码输出变量"),a("code",[s._v("foo")]),s._v("，值为"),a("code",[s._v("bar")]),s._v("，500 毫秒之后变成"),a("code",[s._v("baz")]),s._v("。")]),s._v(" "),a("p",[s._v("这一点与 CommonJS 规范完全不同。CommonJS 模块输出的是值的缓存，不存在动态更新，详见下文《Module 的加载实现》一节。")]),s._v(" "),a("p",[s._v("最后，"),a("code",[s._v("export")]),s._v("命令可以出现在模块的任何位置，只要处于模块顶层就可以。如果处于块级作用域内，就会报错，下一节的"),a("code",[s._v("import")]),s._v("命令也是如此。这是因为处于条件代码块之中，就没法做静态优化了，违背了 ES6 模块的设计初衷。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function foo() {\n  export default 'bar' // SyntaxError\n}\nfoo()\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("上面代码中，"),a("code",[s._v("export")]),s._v("语句放在函数之中，结果报错。")]),s._v(" "),a("h2",{attrs:{id:"import-命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#import-命令"}},[s._v("#")]),s._v(" import 命令")]),s._v(" "),a("p",[s._v("使用"),a("code",[s._v("export")]),s._v("命令定义了模块的对外接口以后，其他 JS 文件就可以通过"),a("code",[s._v("import")]),s._v("命令加载这个模块。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// main.js\nimport { firstName, lastName, year } from './profile.js';\n\nfunction setName(element) {\n  element.textContent = firstName + ' ' + lastName;\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("上面代码的"),a("code",[s._v("import")]),s._v("命令，用于加载"),a("code",[s._v("profile.js")]),s._v("文件，并从中输入变量。"),a("code",[s._v("import")]),s._v("命令接受一对大括号，里面指定要从其他模块导入的变量名。大括号里面的变量名，必须与被导入模块（"),a("code",[s._v("profile.js")]),s._v("）对外接口的名称相同。")]),s._v(" "),a("p",[s._v("如果想为输入的变量重新取一个名字，"),a("code",[s._v("import")]),s._v("命令要使用"),a("code",[s._v("as")]),s._v("关键字，将输入的变量重命名。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("import { lastName as surname } from './profile.js';\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[a("code",[s._v("import")]),s._v("命令输入的变量都是只读的，因为它的本质是输入接口。也就是说，不允许在加载模块的脚本里面，改写接口。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("import {a} from './xxx.js'\n\na = {}; // Syntax Error : 'a' is read-only;\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("上面代码中，脚本加载了变量"),a("code",[s._v("a")]),s._v("，对其重新赋值就会报错，因为"),a("code",[s._v("a")]),s._v("是一个只读的接口。但是，如果"),a("code",[s._v("a")]),s._v("是一个对象，改写"),a("code",[s._v("a")]),s._v("的属性是允许的。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("import {a} from './xxx.js'\n\na.foo = 'hello'; // 合法操作\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("上面代码中，"),a("code",[s._v("a")]),s._v("的属性可以成功改写，并且其他模块也可以读到改写后的值。不过，这种写法很难查错，建议凡是输入的变量，都当作完全只读，不要轻易改变它的属性。")]),s._v(" "),a("p",[a("code",[s._v("import")]),s._v("后面的"),a("code",[s._v("from")]),s._v("指定模块文件的位置，可以是相对路径，也可以是绝对路径。如果不带有路径，只是一个模块名，那么必须有配置文件，告诉 JavaScript 引擎该模块的位置。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("import { myMethod } from 'util';\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("上面代码中，"),a("code",[s._v("util")]),s._v("是模块文件名，由于不带有路径，必须通过配置，告诉引擎怎么取到这个模块。")]),s._v(" "),a("p",[s._v("注意，"),a("code",[s._v("import")]),s._v("命令具有提升效果，会提升到整个模块的头部，首先执行。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("foo();\n\nimport { foo } from 'my_module';\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("上面的代码不会报错，因为"),a("code",[s._v("import")]),s._v("的执行早于"),a("code",[s._v("foo")]),s._v("的调用。这种行为的本质是，"),a("code",[s._v("import")]),s._v("命令是编译阶段执行的，在代码运行之前。")]),s._v(" "),a("p",[s._v("由于"),a("code",[s._v("import")]),s._v("是静态执行，所以不能使用表达式和变量，这些只有在运行时才能得到结果的语法结构。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// 报错\nimport { 'f' + 'oo' } from 'my_module';\n\n// 报错\nlet module = 'my_module';\nimport { foo } from module;\n\n// 报错\nif (x === 1) {\n  import { foo } from 'module1';\n} else {\n  import { foo } from 'module2';\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br")])]),a("p",[s._v("上面三种写法都会报错，因为它们用到了表达式、变量和"),a("code",[s._v("if")]),s._v("结构。在静态分析阶段，这些语法都是没法得到值的。")]),s._v(" "),a("p",[s._v("最后，"),a("code",[s._v("import")]),s._v("语句会执行所加载的模块，因此可以有下面的写法。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("import 'lodash';\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("上面代码仅仅执行"),a("code",[s._v("lodash")]),s._v("模块，但是不输入任何值。")]),s._v(" "),a("p",[s._v("如果多次重复执行同一句"),a("code",[s._v("import")]),s._v("语句，那么只会执行一次，而不会执行多次。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("import 'lodash';\nimport 'lodash';\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("上面代码加载了两次"),a("code",[s._v("lodash")]),s._v("，但是只会执行一次。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("import { foo } from 'my_module';\nimport { bar } from 'my_module';\n\n// 等同于\nimport { foo, bar } from 'my_module';\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("上面代码中，虽然"),a("code",[s._v("foo")]),s._v("和"),a("code",[s._v("bar")]),s._v("在两个语句中加载，但是它们对应的是同一个"),a("code",[s._v("my_module")]),s._v("模块。也就是说，"),a("code",[s._v("import")]),s._v("语句是 Singleton 模式。")]),s._v(" "),a("p",[s._v("目前阶段，通过 Babel 转码，CommonJS 模块的"),a("code",[s._v("require")]),s._v("命令和 ES6 模块的"),a("code",[s._v("import")]),s._v("命令，可以写在同一个模块里面，但是最好不要这样做。因为"),a("code",[s._v("import")]),s._v("在静态解析阶段执行，所以它是一个模块之中最早执行的。下面的代码可能不会得到预期结果。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("require('core-js/modules/es6.symbol');\nrequire('core-js/modules/es6.promise');\nimport React from 'React';\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("h2",{attrs:{id:"模块的整体加载"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#模块的整体加载"}},[s._v("#")]),s._v(" 模块的整体加载")]),s._v(" "),a("p",[s._v("除了指定加载某个输出值，还可以使用整体加载，即用星号（"),a("code",[s._v("*")]),s._v("）指定一个对象，所有输出值都加载在这个对象上面。")]),s._v(" "),a("p",[s._v("下面是一个"),a("code",[s._v("circle.js")]),s._v("文件，它输出两个方法"),a("code",[s._v("area")]),s._v("和"),a("code",[s._v("circumference")]),s._v("。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// circle.js\n\nexport function area(radius) {\n  return Math.PI * radius * radius;\n}\n\nexport function circumference(radius) {\n  return 2 * Math.PI * radius;\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[s._v("现在，加载这个模块。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// main.js\n\nimport { area, circumference } from './circle';\n\nconsole.log('圆面积：' + area(4));\nconsole.log('圆周长：' + circumference(14));\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("上面写法是逐一指定要加载的方法，整体加载的写法如下。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("import * as circle from './circle';\n\nconsole.log('圆面积：' + circle.area(4));\nconsole.log('圆周长：' + circle.circumference(14));\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("注意，模块整体加载所在的那个对象（上例是"),a("code",[s._v("circle")]),s._v("），应该是可以静态分析的，所以不允许运行时改变。下面的写法都是不允许的。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("import * as circle from './circle';\n\n// 下面两行都是不允许的\ncircle.foo = 'hello';\ncircle.area = function () {};\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("h2",{attrs:{id:"export-default-命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#export-default-命令"}},[s._v("#")]),s._v(" export default 命令")]),s._v(" "),a("p",[s._v("从前面的例子可以看出，使用"),a("code",[s._v("import")]),s._v("命令的时候，用户需要知道所要加载的变量名或函数名，否则无法加载。但是，用户肯定希望快速上手，未必愿意阅读文档，去了解模块有哪些属性和方法。")]),s._v(" "),a("p",[s._v("为了给用户提供方便，让他们不用阅读文档就能加载模块，就要用到"),a("code",[s._v("export default")]),s._v("命令，为模块指定默认输出。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// export-default.js\nexport default function () {\n  console.log('foo');\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("上面代码是一个模块文件"),a("code",[s._v("export-default.js")]),s._v("，它的默认输出是一个函数。")]),s._v(" "),a("p",[s._v("其他模块加载该模块时，"),a("code",[s._v("import")]),s._v("命令可以为该匿名函数指定任意名字。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// import-default.js\nimport customName from './export-default';\ncustomName(); // 'foo'\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("上面代码的"),a("code",[s._v("import")]),s._v("命令，可以用任意名称指向"),a("code",[s._v("export-default.js")]),s._v("输出的方法，这时就不需要知道原模块输出的函数名。需要注意的是，这时"),a("code",[s._v("import")]),s._v("命令后面，不使用大括号。")]),s._v(" "),a("p",[a("code",[s._v("export default")]),s._v("命令用在非匿名函数前，也是可以的。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// export-default.js\nexport default function foo() {\n  console.log('foo');\n}\n\n// 或者写成\n\nfunction foo() {\n  console.log('foo');\n}\n\nexport default foo;\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("p",[s._v("上面代码中，"),a("code",[s._v("foo")]),s._v("函数的函数名"),a("code",[s._v("foo")]),s._v("，在模块外部是无效的。加载的时候，视同匿名函数加载。")]),s._v(" "),a("p",[s._v("下面比较一下默认输出和正常输出。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// 第一组\nexport default function crc32() { // 输出\n  // ...\n}\n\nimport crc32 from 'crc32'; // 输入\n\n// 第二组\nexport function crc32() { // 输出\n  // ...\n};\n\nimport {crc32} from 'crc32'; // 输入\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br")])]),a("p",[s._v("上面代码的两组写法，第一组是使用"),a("code",[s._v("export default")]),s._v("时，对应的"),a("code",[s._v("import")]),s._v("语句不需要使用大括号；第二组是不使用"),a("code",[s._v("export default")]),s._v("时，对应的"),a("code",[s._v("import")]),s._v("语句需要使用大括号。")]),s._v(" "),a("p",[a("code",[s._v("export default")]),s._v("命令用于指定模块的默认输出。显然，一个模块只能有一个默认输出，因此"),a("code",[s._v("export default")]),s._v("命令只能使用一次。所以，import 命令后面才不用加大括号，因为只可能唯一对应"),a("code",[s._v("export default")]),s._v("命令。")]),s._v(" "),a("p",[s._v("本质上，"),a("code",[s._v("export default")]),s._v("就是输出一个叫做"),a("code",[s._v("default")]),s._v("的变量或方法，然后系统允许你为它取任意名字。所以，下面的写法是有效的。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// modules.js\nfunction add(x, y) {\n  return x * y;\n}\nexport {add as default};\n// 等同于\n// export default add;\n\n// app.js\nimport { default as foo } from 'modules';\n// 等同于\n// import foo from 'modules';\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("p",[s._v("正是因为"),a("code",[s._v("export default")]),s._v("命令其实只是输出一个叫做"),a("code",[s._v("default")]),s._v("的变量，所以它后面不能跟变量声明语句。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// 正确\nexport var a = 1;\n\n// 正确\nvar a = 1;\nexport default a;\n\n// 错误\nexport default var a = 1;\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[s._v("上面代码中，"),a("code",[s._v("export default a")]),s._v("的含义是将变量"),a("code",[s._v("a")]),s._v("的值赋给变量"),a("code",[s._v("default")]),s._v("。所以，最后一种写法会报错。")]),s._v(" "),a("p",[s._v("同样地，因为"),a("code",[s._v("export default")]),s._v("命令的本质是将后面的值，赋给"),a("code",[s._v("default")]),s._v("变量，所以可以直接将一个值写在"),a("code",[s._v("export default")]),s._v("之后。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// 正确\nexport default 42;\n\n// 报错\nexport 42;\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("上面代码中，后一句报错是因为没有指定对外的接口，而前一句指定对外接口为"),a("code",[s._v("default")]),s._v("。")]),s._v(" "),a("p",[s._v("有了"),a("code",[s._v("export default")]),s._v("命令，输入模块时就非常直观了，以输入 lodash 模块为例。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("import _ from 'lodash';\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("如果想在一条"),a("code",[s._v("import")]),s._v("语句中，同时输入默认方法和其他接口，可以写成下面这样。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("import _, { each, forEach } from 'lodash';\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("对应上面代码的"),a("code",[s._v("export")]),s._v("语句如下。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("export default function (obj) {\n  // ···\n}\n\nexport function each(obj, iterator, context) {\n  // ···\n}\n\nexport { each as forEach };\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[s._v("上面代码的最后一行的意思是，暴露出"),a("code",[s._v("forEach")]),s._v("接口，默认指向"),a("code",[s._v("each")]),s._v("接口，即"),a("code",[s._v("forEach")]),s._v("和"),a("code",[s._v("each")]),s._v("指向同一个方法。")]),s._v(" "),a("p",[a("code",[s._v("export default")]),s._v("也可以用来输出类。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// MyClass.js\nexport default class { ... }\n\n// main.js\nimport MyClass from 'MyClass';\nlet o = new MyClass();\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("h2",{attrs:{id:"export-与-import-的复合写法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#export-与-import-的复合写法"}},[s._v("#")]),s._v(" export 与 import 的复合写法")]),s._v(" "),a("p",[s._v("如果在一个模块之中，先输入后输出同一个模块，"),a("code",[s._v("import")]),s._v("语句可以与"),a("code",[s._v("export")]),s._v("语句写在一起。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("export { foo, bar } from 'my_module';\n\n// 可以简单理解为\nimport { foo, bar } from 'my_module';\nexport { foo, bar };\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("上面代码中，"),a("code",[s._v("export")]),s._v("和"),a("code",[s._v("import")]),s._v("语句可以结合在一起，写成一行。但需要注意的是，写成一行以后，"),a("code",[s._v("foo")]),s._v("和"),a("code",[s._v("bar")]),s._v("实际上并没有被导入当前模块，只是相当于对外转发了这两个接口，导致当前模块不能直接使用"),a("code",[s._v("foo")]),s._v("和"),a("code",[s._v("bar")]),s._v("。")]),s._v(" "),a("p",[s._v("模块的接口改名和整体输出，也可以采用这种写法。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// 接口改名\nexport { foo as myFoo } from 'my_module';\n\n// 整体输出\nexport * from 'my_module';\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("默认接口的写法如下。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("export { default } from 'foo';\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("具名接口改为默认接口的写法如下。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("export { es6 as default } from './someModule';\n\n// 等同于\nimport { es6 } from './someModule';\nexport default es6;\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("同样地，默认接口也可以改名为具名接口。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("export { default as es6 } from './someModule';\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("ES2020 之前，有一种"),a("code",[s._v("import")]),s._v("语句，没有对应的复合写法。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('import * as someIdentifier from "someModule";\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[a("a",{attrs:{href:"https://github.com/tc39/proposal-export-ns-from",target:"_blank",rel:"noopener noreferrer"}},[s._v("ES2020"),a("OutboundLink")],1),s._v("补上了这个写法。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('export * as ns from "mod";\n\n// 等同于\nimport * as ns from "mod";\nexport {ns};\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("h2",{attrs:{id:"模块的继承"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#模块的继承"}},[s._v("#")]),s._v(" 模块的继承")]),s._v(" "),a("p",[s._v("模块之间也可以继承。")]),s._v(" "),a("p",[s._v("假设有一个"),a("code",[s._v("circleplus")]),s._v("模块，继承了"),a("code",[s._v("circle")]),s._v("模块。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// circleplus.js\n\nexport * from 'circle';\nexport var e = 2.71828182846;\nexport default function(x) {\n  return Math.exp(x);\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("上面代码中的"),a("code",[s._v("export *")]),s._v("，表示再输出"),a("code",[s._v("circle")]),s._v("模块的所有属性和方法。注意，"),a("code",[s._v("export *")]),s._v("命令会忽略"),a("code",[s._v("circle")]),s._v("模块的"),a("code",[s._v("default")]),s._v("方法。然后，上面代码又输出了自定义的"),a("code",[s._v("e")]),s._v("变量和默认方法。")]),s._v(" "),a("p",[s._v("这时，也可以将"),a("code",[s._v("circle")]),s._v("的属性或方法，改名后再输出。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// circleplus.js\n\nexport { area as circleArea } from 'circle';\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("上面代码表示，只输出"),a("code",[s._v("circle")]),s._v("模块的"),a("code",[s._v("area")]),s._v("方法，且将其改名为"),a("code",[s._v("circleArea")]),s._v("。")]),s._v(" "),a("p",[s._v("加载上面模块的写法如下。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// main.js\n\nimport * as math from 'circleplus';\nimport exp from 'circleplus';\nconsole.log(exp(math.e));\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("上面代码中的"),a("code",[s._v("import exp")]),s._v("表示，将"),a("code",[s._v("circleplus")]),s._v("模块的默认方法加载为"),a("code",[s._v("exp")]),s._v("方法。")]),s._v(" "),a("h2",{attrs:{id:"跨模块常量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#跨模块常量"}},[s._v("#")]),s._v(" 跨模块常量")]),s._v(" "),a("p",[s._v("本书介绍"),a("code",[s._v("const")]),s._v("命令的时候说过，"),a("code",[s._v("const")]),s._v("声明的常量只在当前代码块有效。如果想设置跨模块的常量（即跨多个文件），或者说一个值要被多个模块共享，可以采用下面的写法。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// constants.js 模块\nexport const A = 1;\nexport const B = 3;\nexport const C = 4;\n\n// test1.js 模块\nimport * as constants from './constants';\nconsole.log(constants.A); // 1\nconsole.log(constants.B); // 3\n\n// test2.js 模块\nimport {A, B} from './constants';\nconsole.log(A); // 1\nconsole.log(B); // 3\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br")])]),a("p",[s._v("如果要使用的常量非常多，可以建一个专门的"),a("code",[s._v("constants")]),s._v("目录，将各种常量写在不同的文件里面，保存在该目录下。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// constants/db.js\nexport const db = {\n  url: 'http://my.couchdbserver.local:5984',\n  admin_username: 'admin',\n  admin_password: 'admin password'\n};\n\n// constants/user.js\nexport const users = ['root', 'admin', 'staff', 'ceo', 'chief', 'moderator'];\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[s._v("然后，将这些文件输出的常量，合并在"),a("code",[s._v("index.js")]),s._v("里面。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// constants/index.js\nexport {db} from './db';\nexport {users} from './users';\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("使用的时候，直接加载"),a("code",[s._v("index.js")]),s._v("就可以了。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// script.js\nimport {db, users} from './constants/index';\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("h2",{attrs:{id:"import"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#import"}},[s._v("#")]),s._v(" import()")]),s._v(" "),a("h3",{attrs:{id:"简介"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#简介"}},[s._v("#")]),s._v(" 简介")]),s._v(" "),a("p",[s._v("前面介绍过，"),a("code",[s._v("import")]),s._v("命令会被 JavaScript 引擎静态分析，先于模块内的其他语句执行（"),a("code",[s._v("import")]),s._v("命令叫做“连接” binding 其实更合适）。所以，下面的代码会报错。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// 报错\nif (x === 2) {\n  import MyModual from './myModual';\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("上面代码中，引擎处理"),a("code",[s._v("import")]),s._v("语句是在编译时，这时不会去分析或执行"),a("code",[s._v("if")]),s._v("语句，所以"),a("code",[s._v("import")]),s._v("语句放在"),a("code",[s._v("if")]),s._v("代码块之中毫无意义，因此会报句法错误，而不是执行时错误。也就是说，"),a("code",[s._v("import")]),s._v("和"),a("code",[s._v("export")]),s._v("命令只能在模块的顶层，不能在代码块之中（比如，在"),a("code",[s._v("if")]),s._v("代码块之中，或在函数之中）。")]),s._v(" "),a("p",[s._v("这样的设计，固然有利于编译器提高效率，但也导致无法在运行时加载模块。在语法上，条件加载就不可能实现。如果"),a("code",[s._v("import")]),s._v("命令要取代 Node 的"),a("code",[s._v("require")]),s._v("方法，这就形成了一个障碍。因为"),a("code",[s._v("require")]),s._v("是运行时加载模块，"),a("code",[s._v("import")]),s._v("命令无法取代"),a("code",[s._v("require")]),s._v("的动态加载功能。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("const path = './' + fileName;\nconst myModual = require(path);\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("上面的语句就是动态加载，"),a("code",[s._v("require")]),s._v("到底加载哪一个模块，只有运行时才知道。"),a("code",[s._v("import")]),s._v("命令做不到这一点。")]),s._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/tc39/proposal-dynamic-import",target:"_blank",rel:"noopener noreferrer"}},[s._v("ES2020 提案"),a("OutboundLink")],1),s._v(" 引入"),a("code",[s._v("import()")]),s._v("函数，支持动态加载模块。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("import(specifier)\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("上面代码中，"),a("code",[s._v("import")]),s._v("函数的参数"),a("code",[s._v("specifier")]),s._v("，指定所要加载的模块的位置。"),a("code",[s._v("import")]),s._v("命令能够接受什么参数，"),a("code",[s._v("import()")]),s._v("函数就能接受什么参数，两者区别主要是后者为动态加载。")]),s._v(" "),a("p",[a("code",[s._v("import()")]),s._v("返回一个 Promise 对象。下面是一个例子。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("const main = document.querySelector('main');\n\nimport(`./section-modules/${someVariable}.js`)\n  .then(module => {\n    module.loadPageInto(main);\n  })\n  .catch(err => {\n    main.textContent = err.message;\n  });\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[a("code",[s._v("import()")]),s._v("函数可以用在任何地方，不仅仅是模块，非模块的脚本也可以使用。它是运行时执行，也就是说，什么时候运行到这一句，就会加载指定的模块。另外，"),a("code",[s._v("import()")]),s._v("函数与所加载的模块没有静态连接关系，这点也是与"),a("code",[s._v("import")]),s._v("语句不相同。"),a("code",[s._v("import()")]),s._v("类似于 Node.js 的"),a("code",[s._v("require()")]),s._v("方法，区别主要是前者是异步加载，后者是同步加载。")]),s._v(" "),a("p",[s._v("由于"),a("code",[s._v("import()")]),s._v("返回 Promise 对象，所以需要使用"),a("code",[s._v("then()")]),s._v("方法指定处理函数。考虑到代码的清晰，更推荐使用"),a("code",[s._v("await")]),s._v("命令。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("async function renderWidget() {\n  const container = document.getElementById('widget');\n  if (container !== null) {\n    // 等同于\n    // import(\"./widget\").then(widget => {\n    //   widget.render(container);\n    // });\n    const widget = await import('./widget.js');\n    widget.render(container);\n  }\n}\n\nrenderWidget();\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br")])]),a("p",[s._v("上面示例中，"),a("code",[s._v("await")]),s._v("命令后面就是使用"),a("code",[s._v("import()")]),s._v("，对比"),a("code",[s._v("then()")]),s._v("的写法明显更简洁易读。")]),s._v(" "),a("h3",{attrs:{id:"适用场合"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#适用场合"}},[s._v("#")]),s._v(" 适用场合")]),s._v(" "),a("p",[s._v("下面是"),a("code",[s._v("import()")]),s._v("的一些适用场合。")]),s._v(" "),a("p",[s._v("（1）按需加载。")]),s._v(" "),a("p",[a("code",[s._v("import()")]),s._v("可以在需要的时候，再加载某个模块。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("button.addEventListener('click', event => {\n  import('./dialogBox.js')\n  .then(dialogBox => {\n    dialogBox.open();\n  })\n  .catch(error => {\n    /* Error handling */\n  })\n});\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[s._v("上面代码中，"),a("code",[s._v("import()")]),s._v("方法放在"),a("code",[s._v("click")]),s._v("事件的监听函数之中，只有用户点击了按钮，才会加载这个模块。")]),s._v(" "),a("p",[s._v("（2）条件加载")]),s._v(" "),a("p",[a("code",[s._v("import()")]),s._v("可以放在"),a("code",[s._v("if")]),s._v("代码块，根据不同的情况，加载不同的模块。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("if (condition) {\n  import('moduleA').then(...);\n} else {\n  import('moduleB').then(...);\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("上面代码中，如果满足条件，就加载模块 A，否则加载模块 B。")]),s._v(" "),a("p",[s._v("（3）动态的模块路径")]),s._v(" "),a("p",[a("code",[s._v("import()")]),s._v("允许模块路径动态生成。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("import(f())\n.then(...);\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("上面代码中，根据函数"),a("code",[s._v("f")]),s._v("的返回结果，加载不同的模块。")]),s._v(" "),a("h3",{attrs:{id:"注意点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#注意点"}},[s._v("#")]),s._v(" 注意点")]),s._v(" "),a("p",[a("code",[s._v("import()")]),s._v("加载模块成功以后，这个模块会作为一个对象，当作"),a("code",[s._v("then")]),s._v("方法的参数。因此，可以使用对象解构赋值的语法，获取输出接口。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("import('./myModule.js')\n.then(({export1, export2}) => {\n  // ...·\n});\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("上面代码中，"),a("code",[s._v("export1")]),s._v("和"),a("code",[s._v("export2")]),s._v("都是"),a("code",[s._v("myModule.js")]),s._v("的输出接口，可以解构获得。")]),s._v(" "),a("p",[s._v("如果模块有"),a("code",[s._v("default")]),s._v("输出接口，可以用参数直接获得。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("import('./myModule.js')\n.then(myModule => {\n  console.log(myModule.default);\n});\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("上面的代码也可以使用具名输入的形式。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("import('./myModule.js')\n.then(({default: theDefault}) => {\n  console.log(theDefault);\n});\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("如果想同时加载多个模块，可以采用下面的写法。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("Promise.all([\n  import('./module1.js'),\n  import('./module2.js'),\n  import('./module3.js'),\n])\n.then(([module1, module2, module3]) => {\n   ···\n});\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[a("code",[s._v("import()")]),s._v("也可以用在 async 函数之中。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("async function main() {\n  const myModule = await import('./myModule.js');\n  const {export1, export2} = await import('./myModule.js');\n  const [module1, module2, module3] =\n    await Promise.all([\n      import('./module1.js'),\n      import('./module2.js'),\n      import('./module3.js'),\n    ]);\n}\nmain();\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("h3",{attrs:{id:"留言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#留言"}},[s._v("#")]),s._v(" 留言")])])}),[],!1,null,null,null);e.default=t.exports}}]);