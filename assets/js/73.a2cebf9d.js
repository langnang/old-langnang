(window.webpackJsonp=window.webpackJsonp||[]).push([[73],{542:function(e,s,n){"use strict";n.r(s);var a=n(18),r=Object(a.a)({},(function(){var e=this,s=e.$createElement,n=e._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"promise-对象"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#promise-对象"}},[e._v("#")]),e._v(" Promise 对象")]),e._v(" "),n("ol",[n("li",[n("a",{attrs:{href:"https://es6.ruanyifeng.com/#docs/promise#Promise%20%E7%9A%84%E5%90%AB%E4%B9%89",target:"_blank",rel:"noopener noreferrer"}},[e._v("Promise 的含义"),n("OutboundLink")],1)]),e._v(" "),n("li",[n("a",{attrs:{href:"https://es6.ruanyifeng.com/#docs/promise#%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95",target:"_blank",rel:"noopener noreferrer"}},[e._v("基本用法"),n("OutboundLink")],1)]),e._v(" "),n("li",[n("a",{attrs:{href:"https://es6.ruanyifeng.com/#docs/promise#Promise.prototype.then()",target:"_blank",rel:"noopener noreferrer"}},[e._v("Promise.prototype.then()"),n("OutboundLink")],1)]),e._v(" "),n("li",[n("a",{attrs:{href:"https://es6.ruanyifeng.com/#docs/promise#Promise.prototype.catch()",target:"_blank",rel:"noopener noreferrer"}},[e._v("Promise.prototype.catch()"),n("OutboundLink")],1)]),e._v(" "),n("li",[n("a",{attrs:{href:"https://es6.ruanyifeng.com/#docs/promise#Promise.prototype.finally()",target:"_blank",rel:"noopener noreferrer"}},[e._v("Promise.prototype.finally()"),n("OutboundLink")],1)]),e._v(" "),n("li",[n("a",{attrs:{href:"https://es6.ruanyifeng.com/#docs/promise#Promise.all()",target:"_blank",rel:"noopener noreferrer"}},[e._v("Promise.all()"),n("OutboundLink")],1)]),e._v(" "),n("li",[n("a",{attrs:{href:"https://es6.ruanyifeng.com/#docs/promise#Promise.race()",target:"_blank",rel:"noopener noreferrer"}},[e._v("Promise.race()"),n("OutboundLink")],1)]),e._v(" "),n("li",[n("a",{attrs:{href:"https://es6.ruanyifeng.com/#docs/promise#Promise.allSettled()",target:"_blank",rel:"noopener noreferrer"}},[e._v("Promise.allSettled()"),n("OutboundLink")],1)]),e._v(" "),n("li",[n("a",{attrs:{href:"https://es6.ruanyifeng.com/#docs/promise#Promise.any()",target:"_blank",rel:"noopener noreferrer"}},[e._v("Promise.any()"),n("OutboundLink")],1)]),e._v(" "),n("li",[n("a",{attrs:{href:"https://es6.ruanyifeng.com/#docs/promise#Promise.resolve()",target:"_blank",rel:"noopener noreferrer"}},[e._v("Promise.resolve()"),n("OutboundLink")],1)]),e._v(" "),n("li",[n("a",{attrs:{href:"https://es6.ruanyifeng.com/#docs/promise#Promise.reject()",target:"_blank",rel:"noopener noreferrer"}},[e._v("Promise.reject()"),n("OutboundLink")],1)]),e._v(" "),n("li",[n("a",{attrs:{href:"https://es6.ruanyifeng.com/#docs/promise#%E5%BA%94%E7%94%A8",target:"_blank",rel:"noopener noreferrer"}},[e._v("应用"),n("OutboundLink")],1)]),e._v(" "),n("li",[n("a",{attrs:{href:"https://es6.ruanyifeng.com/#docs/promise#Promise.try()",target:"_blank",rel:"noopener noreferrer"}},[e._v("Promise.try()"),n("OutboundLink")],1)])]),e._v(" "),n("h2",{attrs:{id:"promise-的含义"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#promise-的含义"}},[e._v("#")]),e._v(" Promise 的含义")]),e._v(" "),n("p",[e._v("Promise 是异步编程的一种解决方案，比传统的解决方案——回调函数和事件——更合理和更强大。它由社区最早提出和实现，ES6 将其写进了语言标准，统一了用法，原生提供了"),n("code",[e._v("Promise")]),e._v("对象。")]),e._v(" "),n("p",[e._v("所谓"),n("code",[e._v("Promise")]),e._v("，简单说就是一个容器，里面保存着某个未来才会结束的事件（通常是一个异步操作）的结果。从语法上说，Promise 是一个对象，从它可以获取异步操作的消息。Promise 提供统一的 API，各种异步操作都可以用同样的方法进行处理。")]),e._v(" "),n("p",[n("code",[e._v("Promise")]),e._v("对象有以下两个特点。")]),e._v(" "),n("p",[e._v("（1）对象的状态不受外界影响。"),n("code",[e._v("Promise")]),e._v("对象代表一个异步操作，有三种状态："),n("code",[e._v("pending")]),e._v("（进行中）、"),n("code",[e._v("fulfilled")]),e._v("（已成功）和"),n("code",[e._v("rejected")]),e._v("（已失败）。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。这也是"),n("code",[e._v("Promise")]),e._v("这个名字的由来，它的英语意思就是“承诺”，表示其他手段无法改变。")]),e._v(" "),n("p",[e._v("（2）一旦状态改变，就不会再变，任何时候都可以得到这个结果。"),n("code",[e._v("Promise")]),e._v("对象的状态改变，只有两种可能：从"),n("code",[e._v("pending")]),e._v("变为"),n("code",[e._v("fulfilled")]),e._v("和从"),n("code",[e._v("pending")]),e._v("变为"),n("code",[e._v("rejected")]),e._v("。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果，这时就称为 resolved（已定型）。如果改变已经发生了，你再对"),n("code",[e._v("Promise")]),e._v("对象添加回调函数，也会立即得到这个结果。这与事件（Event）完全不同，事件的特点是，如果你错过了它，再去监听，是得不到结果的。")]),e._v(" "),n("p",[e._v("注意，为了行文方便，本章后面的"),n("code",[e._v("resolved")]),e._v("统一只指"),n("code",[e._v("fulfilled")]),e._v("状态，不包含"),n("code",[e._v("rejected")]),e._v("状态。")]),e._v(" "),n("p",[e._v("有了"),n("code",[e._v("Promise")]),e._v("对象，就可以将异步操作以同步操作的流程表达出来，避免了层层嵌套的回调函数。此外，"),n("code",[e._v("Promise")]),e._v("对象提供统一的接口，使得控制异步操作更加容易。")]),e._v(" "),n("p",[n("code",[e._v("Promise")]),e._v("也有一些缺点。首先，无法取消"),n("code",[e._v("Promise")]),e._v("，一旦新建它就会立即执行，无法中途取消。其次，如果不设置回调函数，"),n("code",[e._v("Promise")]),e._v("内部抛出的错误，不会反应到外部。第三，当处于"),n("code",[e._v("pending")]),e._v("状态时，无法得知目前进展到哪一个阶段（刚刚开始还是即将完成）。")]),e._v(" "),n("p",[e._v("如果某些事件不断地反复发生，一般来说，使用 "),n("a",{attrs:{href:"https://nodejs.org/api/stream.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Stream"),n("OutboundLink")],1),e._v(" 模式是比部署"),n("code",[e._v("Promise")]),e._v("更好的选择。")]),e._v(" "),n("h2",{attrs:{id:"基本用法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#基本用法"}},[e._v("#")]),e._v(" 基本用法")]),e._v(" "),n("p",[e._v("ES6 规定，"),n("code",[e._v("Promise")]),e._v("对象是一个构造函数，用来生成"),n("code",[e._v("Promise")]),e._v("实例。")]),e._v(" "),n("p",[e._v("下面代码创造了一个"),n("code",[e._v("Promise")]),e._v("实例。")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const promise = new Promise(function(resolve, reject) {\n  // ... some code\n\n  if (/* 异步操作成功 */){\n    resolve(value);\n  } else {\n    reject(error);\n  }\n});\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br")])]),n("p",[n("code",[e._v("Promise")]),e._v("构造函数接受一个函数作为参数，该函数的两个参数分别是"),n("code",[e._v("resolve")]),e._v("和"),n("code",[e._v("reject")]),e._v("。它们是两个函数，由 JavaScript 引擎提供，不用自己部署。")]),e._v(" "),n("p",[n("code",[e._v("resolve")]),e._v("函数的作用是，将"),n("code",[e._v("Promise")]),e._v("对象的状态从“未完成”变为“成功”（即从 pending 变为 resolved），在异步操作成功时调用，并将异步操作的结果，作为参数传递出去；"),n("code",[e._v("reject")]),e._v("函数的作用是，将"),n("code",[e._v("Promise")]),e._v("对象的状态从“未完成”变为“失败”（即从 pending 变为 rejected），在异步操作失败时调用，并将异步操作报出的错误，作为参数传递出去。")]),e._v(" "),n("p",[n("code",[e._v("Promise")]),e._v("实例生成以后，可以用"),n("code",[e._v("then")]),e._v("方法分别指定"),n("code",[e._v("resolved")]),e._v("状态和"),n("code",[e._v("rejected")]),e._v("状态的回调函数。")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("promise.then(function(value) {\n  // success\n}, function(error) {\n  // failure\n});\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br")])]),n("p",[n("code",[e._v("then")]),e._v("方法可以接受两个回调函数作为参数。第一个回调函数是"),n("code",[e._v("Promise")]),e._v("对象的状态变为"),n("code",[e._v("resolved")]),e._v("时调用，第二个回调函数是"),n("code",[e._v("Promise")]),e._v("对象的状态变为"),n("code",[e._v("rejected")]),e._v("时调用。这两个函数都是可选的，不一定要提供。它们都接受"),n("code",[e._v("Promise")]),e._v("对象传出的值作为参数。")]),e._v(" "),n("p",[e._v("下面是一个"),n("code",[e._v("Promise")]),e._v("对象的简单例子。")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("function timeout(ms) {\n  return new Promise((resolve, reject) => {\n    setTimeout(resolve, ms, 'done');\n  });\n}\n\ntimeout(100).then((value) => {\n  console.log(value);\n});\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br")])]),n("p",[e._v("上面代码中，"),n("code",[e._v("timeout")]),e._v("方法返回一个"),n("code",[e._v("Promise")]),e._v("实例，表示一段时间以后才会发生的结果。过了指定的时间（"),n("code",[e._v("ms")]),e._v("参数）以后，"),n("code",[e._v("Promise")]),e._v("实例的状态变为"),n("code",[e._v("resolved")]),e._v("，就会触发"),n("code",[e._v("then")]),e._v("方法绑定的回调函数。")]),e._v(" "),n("p",[e._v("Promise 新建后就会立即执行。")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("let promise = new Promise(function(resolve, reject) {\n  console.log('Promise');\n  resolve();\n});\n\npromise.then(function() {\n  console.log('resolved.');\n});\n\nconsole.log('Hi!');\n\n// Promise\n// Hi!\n// resolved\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br")])]),n("p",[e._v("上面代码中，Promise 新建后立即执行，所以首先输出的是"),n("code",[e._v("Promise")]),e._v("。然后，"),n("code",[e._v("then")]),e._v("方法指定的回调函数，将在当前脚本所有同步任务执行完才会执行，所以"),n("code",[e._v("resolved")]),e._v("最后输出。")]),e._v(" "),n("p",[e._v("下面是异步加载图片的例子。")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("function loadImageAsync(url) {\n  return new Promise(function(resolve, reject) {\n    const image = new Image();\n\n    image.onload = function() {\n      resolve(image);\n    };\n\n    image.onerror = function() {\n      reject(new Error('Could not load image at ' + url));\n    };\n\n    image.src = url;\n  });\n}\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br")])]),n("p",[e._v("上面代码中，使用"),n("code",[e._v("Promise")]),e._v("包装了一个图片加载的异步操作。如果加载成功，就调用"),n("code",[e._v("resolve")]),e._v("方法，否则就调用"),n("code",[e._v("reject")]),e._v("方法。")]),e._v(" "),n("p",[e._v("下面是一个用"),n("code",[e._v("Promise")]),e._v("对象实现的 Ajax 操作的例子。")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('const getJSON = function(url) {\n  const promise = new Promise(function(resolve, reject){\n    const handler = function() {\n      if (this.readyState !== 4) {\n        return;\n      }\n      if (this.status === 200) {\n        resolve(this.response);\n      } else {\n        reject(new Error(this.statusText));\n      }\n    };\n    const client = new XMLHttpRequest();\n    client.open("GET", url);\n    client.onreadystatechange = handler;\n    client.responseType = "json";\n    client.setRequestHeader("Accept", "application/json");\n    client.send();\n\n  });\n\n  return promise;\n};\n\ngetJSON("/posts.json").then(function(json) {\n  console.log(\'Contents: \' + json);\n}, function(error) {\n  console.error(\'出错了\', error);\n});\n')])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br"),n("span",{staticClass:"line-number"},[e._v("17")]),n("br"),n("span",{staticClass:"line-number"},[e._v("18")]),n("br"),n("span",{staticClass:"line-number"},[e._v("19")]),n("br"),n("span",{staticClass:"line-number"},[e._v("20")]),n("br"),n("span",{staticClass:"line-number"},[e._v("21")]),n("br"),n("span",{staticClass:"line-number"},[e._v("22")]),n("br"),n("span",{staticClass:"line-number"},[e._v("23")]),n("br"),n("span",{staticClass:"line-number"},[e._v("24")]),n("br"),n("span",{staticClass:"line-number"},[e._v("25")]),n("br"),n("span",{staticClass:"line-number"},[e._v("26")]),n("br"),n("span",{staticClass:"line-number"},[e._v("27")]),n("br"),n("span",{staticClass:"line-number"},[e._v("28")]),n("br"),n("span",{staticClass:"line-number"},[e._v("29")]),n("br")])]),n("p",[e._v("上面代码中，"),n("code",[e._v("getJSON")]),e._v("是对 XMLHttpRequest 对象的封装，用于发出一个针对 JSON 数据的 HTTP 请求，并且返回一个"),n("code",[e._v("Promise")]),e._v("对象。需要注意的是，在"),n("code",[e._v("getJSON")]),e._v("内部，"),n("code",[e._v("resolve")]),e._v("函数和"),n("code",[e._v("reject")]),e._v("函数调用时，都带有参数。")]),e._v(" "),n("p",[e._v("如果调用"),n("code",[e._v("resolve")]),e._v("函数和"),n("code",[e._v("reject")]),e._v("函数时带有参数，那么它们的参数会被传递给回调函数。"),n("code",[e._v("reject")]),e._v("函数的参数通常是"),n("code",[e._v("Error")]),e._v("对象的实例，表示抛出的错误；"),n("code",[e._v("resolve")]),e._v("函数的参数除了正常的值以外，还可能是另一个 Promise 实例，比如像下面这样。")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const p1 = new Promise(function (resolve, reject) {\n  // ...\n});\n\nconst p2 = new Promise(function (resolve, reject) {\n  // ...\n  resolve(p1);\n})\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br")])]),n("p",[e._v("上面代码中，"),n("code",[e._v("p1")]),e._v("和"),n("code",[e._v("p2")]),e._v("都是 Promise 的实例，但是"),n("code",[e._v("p2")]),e._v("的"),n("code",[e._v("resolve")]),e._v("方法将"),n("code",[e._v("p1")]),e._v("作为参数，即一个异步操作的结果是返回另一个异步操作。")]),e._v(" "),n("p",[e._v("注意，这时"),n("code",[e._v("p1")]),e._v("的状态就会传递给"),n("code",[e._v("p2")]),e._v("，也就是说，"),n("code",[e._v("p1")]),e._v("的状态决定了"),n("code",[e._v("p2")]),e._v("的状态。如果"),n("code",[e._v("p1")]),e._v("的状态是"),n("code",[e._v("pending")]),e._v("，那么"),n("code",[e._v("p2")]),e._v("的回调函数就会等待"),n("code",[e._v("p1")]),e._v("的状态改变；如果"),n("code",[e._v("p1")]),e._v("的状态已经是"),n("code",[e._v("resolved")]),e._v("或者"),n("code",[e._v("rejected")]),e._v("，那么"),n("code",[e._v("p2")]),e._v("的回调函数将会立刻执行。")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const p1 = new Promise(function (resolve, reject) {\n  setTimeout(() => reject(new Error('fail')), 3000)\n})\n\nconst p2 = new Promise(function (resolve, reject) {\n  setTimeout(() => resolve(p1), 1000)\n})\n\np2\n  .then(result => console.log(result))\n  .catch(error => console.log(error))\n// Error: fail\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br")])]),n("p",[e._v("上面代码中，"),n("code",[e._v("p1")]),e._v("是一个 Promise，3 秒之后变为"),n("code",[e._v("rejected")]),e._v("。"),n("code",[e._v("p2")]),e._v("的状态在 1 秒之后改变，"),n("code",[e._v("resolve")]),e._v("方法返回的是"),n("code",[e._v("p1")]),e._v("。由于"),n("code",[e._v("p2")]),e._v("返回的是另一个 Promise，导致"),n("code",[e._v("p2")]),e._v("自己的状态无效了，由"),n("code",[e._v("p1")]),e._v("的状态决定"),n("code",[e._v("p2")]),e._v("的状态。所以，后面的"),n("code",[e._v("then")]),e._v("语句都变成针对后者（"),n("code",[e._v("p1")]),e._v("）。又过了 2 秒，"),n("code",[e._v("p1")]),e._v("变为"),n("code",[e._v("rejected")]),e._v("，导致触发"),n("code",[e._v("catch")]),e._v("方法指定的回调函数。")]),e._v(" "),n("p",[e._v("注意，调用"),n("code",[e._v("resolve")]),e._v("或"),n("code",[e._v("reject")]),e._v("并不会终结 Promise 的参数函数的执行。")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("new Promise((resolve, reject) => {\n  resolve(1);\n  console.log(2);\n}).then(r => {\n  console.log(r);\n});\n// 2\n// 1\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br")])]),n("p",[e._v("上面代码中，调用"),n("code",[e._v("resolve(1)")]),e._v("以后，后面的"),n("code",[e._v("console.log(2)")]),e._v("还是会执行，并且会首先打印出来。这是因为立即 resolved 的 Promise 是在本轮事件循环的末尾执行，总是晚于本轮循环的同步任务。")]),e._v(" "),n("p",[e._v("一般来说，调用"),n("code",[e._v("resolve")]),e._v("或"),n("code",[e._v("reject")]),e._v("以后，Promise 的使命就完成了，后继操作应该放到"),n("code",[e._v("then")]),e._v("方法里面，而不应该直接写在"),n("code",[e._v("resolve")]),e._v("或"),n("code",[e._v("reject")]),e._v("的后面。所以，最好在它们前面加上"),n("code",[e._v("return")]),e._v("语句，这样就不会有意外。")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("new Promise((resolve, reject) => {\n  return resolve(1);\n  // 后面的语句不会执行\n  console.log(2);\n})\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br")])]),n("h2",{attrs:{id:"promise-prototype-then"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#promise-prototype-then"}},[e._v("#")]),e._v(" Promise.prototype.then()")]),e._v(" "),n("p",[e._v("Promise 实例具有"),n("code",[e._v("then")]),e._v("方法，也就是说，"),n("code",[e._v("then")]),e._v("方法是定义在原型对象"),n("code",[e._v("Promise.prototype")]),e._v("上的。它的作用是为 Promise 实例添加状态改变时的回调函数。前面说过，"),n("code",[e._v("then")]),e._v("方法的第一个参数是"),n("code",[e._v("resolved")]),e._v("状态的回调函数，第二个参数是"),n("code",[e._v("rejected")]),e._v("状态的回调函数，它们都是可选的。")]),e._v(" "),n("p",[n("code",[e._v("then")]),e._v("方法返回的是一个新的"),n("code",[e._v("Promise")]),e._v("实例（注意，不是原来那个"),n("code",[e._v("Promise")]),e._v("实例）。因此可以采用链式写法，即"),n("code",[e._v("then")]),e._v("方法后面再调用另一个"),n("code",[e._v("then")]),e._v("方法。")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('getJSON("/posts.json").then(function(json) {\n  return json.post;\n}).then(function(post) {\n  // ...\n});\n')])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br")])]),n("p",[e._v("上面的代码使用"),n("code",[e._v("then")]),e._v("方法，依次指定了两个回调函数。第一个回调函数完成以后，会将返回结果作为参数，传入第二个回调函数。")]),e._v(" "),n("p",[e._v("采用链式的"),n("code",[e._v("then")]),e._v("，可以指定一组按照次序调用的回调函数。这时，前一个回调函数，有可能返回的还是一个"),n("code",[e._v("Promise")]),e._v("对象（即有异步操作），这时后一个回调函数，就会等待该"),n("code",[e._v("Promise")]),e._v("对象的状态发生变化，才会被调用。")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('getJSON("/post/1.json").then(function(post) {\n  return getJSON(post.commentURL);\n}).then(function (comments) {\n  console.log("resolved: ", comments);\n}, function (err){\n  console.log("rejected: ", err);\n});\n')])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br")])]),n("p",[e._v("上面代码中，第一个"),n("code",[e._v("then")]),e._v("方法指定的回调函数，返回的是另一个"),n("code",[e._v("Promise")]),e._v("对象。这时，第二个"),n("code",[e._v("then")]),e._v("方法指定的回调函数，就会等待这个新的"),n("code",[e._v("Promise")]),e._v("对象状态发生变化。如果变为"),n("code",[e._v("resolved")]),e._v("，就调用第一个回调函数，如果状态变为"),n("code",[e._v("rejected")]),e._v("，就调用第二个回调函数。")]),e._v(" "),n("p",[e._v("如果采用箭头函数，上面的代码可以写得更简洁。")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('getJSON("/post/1.json").then(\n  post => getJSON(post.commentURL)\n).then(\n  comments => console.log("resolved: ", comments),\n  err => console.log("rejected: ", err)\n);\n')])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br")])]),n("h2",{attrs:{id:"promise-prototype-catch"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#promise-prototype-catch"}},[e._v("#")]),e._v(" Promise.prototype.catch()")]),e._v(" "),n("p",[n("code",[e._v("Promise.prototype.catch()")]),e._v("方法是"),n("code",[e._v(".then(null, rejection)")]),e._v("或"),n("code",[e._v(".then(undefined, rejection)")]),e._v("的别名，用于指定发生错误时的回调函数。")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("getJSON('/posts.json').then(function(posts) {\n  // ...\n}).catch(function(error) {\n  // 处理 getJSON 和 前一个回调函数运行时发生的错误\n  console.log('发生错误！', error);\n});\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br")])]),n("p",[e._v("上面代码中，"),n("code",[e._v("getJSON()")]),e._v("方法返回一个 Promise 对象，如果该对象状态变为"),n("code",[e._v("resolved")]),e._v("，则会调用"),n("code",[e._v("then()")]),e._v("方法指定的回调函数；如果异步操作抛出错误，状态就会变为"),n("code",[e._v("rejected")]),e._v("，就会调用"),n("code",[e._v("catch()")]),e._v("方法指定的回调函数，处理这个错误。另外，"),n("code",[e._v("then()")]),e._v("方法指定的回调函数，如果运行中抛出错误，也会被"),n("code",[e._v("catch()")]),e._v("方法捕获。")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("p.then((val) => console.log('fulfilled:', val))\n  .catch((err) => console.log('rejected', err));\n\n// 等同于\np.then((val) => console.log('fulfilled:', val))\n  .then(null, (err) => console.log(\"rejected:\", err));\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br")])]),n("p",[e._v("下面是一个例子。")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const promise = new Promise(function(resolve, reject) {\n  throw new Error('test');\n});\npromise.catch(function(error) {\n  console.log(error);\n});\n// Error: test\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br")])]),n("p",[e._v("上面代码中，"),n("code",[e._v("promise")]),e._v("抛出一个错误，就被"),n("code",[e._v("catch()")]),e._v("方法指定的回调函数捕获。注意，上面的写法与下面两种写法是等价的。")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// 写法一\nconst promise = new Promise(function(resolve, reject) {\n  try {\n    throw new Error('test');\n  } catch(e) {\n    reject(e);\n  }\n});\npromise.catch(function(error) {\n  console.log(error);\n});\n\n// 写法二\nconst promise = new Promise(function(resolve, reject) {\n  reject(new Error('test'));\n});\npromise.catch(function(error) {\n  console.log(error);\n});\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br"),n("span",{staticClass:"line-number"},[e._v("17")]),n("br"),n("span",{staticClass:"line-number"},[e._v("18")]),n("br"),n("span",{staticClass:"line-number"},[e._v("19")]),n("br")])]),n("p",[e._v("比较上面两种写法，可以发现"),n("code",[e._v("reject()")]),e._v("方法的作用，等同于抛出错误。")]),e._v(" "),n("p",[e._v("如果 Promise 状态已经变成"),n("code",[e._v("resolved")]),e._v("，再抛出错误是无效的。")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const promise = new Promise(function(resolve, reject) {\n  resolve('ok');\n  throw new Error('test');\n});\npromise\n  .then(function(value) { console.log(value) })\n  .catch(function(error) { console.log(error) });\n// ok\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br")])]),n("p",[e._v("上面代码中，Promise 在"),n("code",[e._v("resolve")]),e._v("语句后面，再抛出错误，不会被捕获，等于没有抛出。因为 Promise 的状态一旦改变，就永久保持该状态，不会再变了。")]),e._v(" "),n("p",[e._v("Promise 对象的错误具有“冒泡”性质，会一直向后传递，直到被捕获为止。也就是说，错误总是会被下一个"),n("code",[e._v("catch")]),e._v("语句捕获。")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("getJSON('/post/1.json').then(function(post) {\n  return getJSON(post.commentURL);\n}).then(function(comments) {\n  // some code\n}).catch(function(error) {\n  // 处理前面三个Promise产生的错误\n});\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br")])]),n("p",[e._v("上面代码中，一共有三个 Promise 对象：一个由"),n("code",[e._v("getJSON()")]),e._v("产生，两个由"),n("code",[e._v("then()")]),e._v("产生。它们之中任何一个抛出的错误，都会被最后一个"),n("code",[e._v("catch()")]),e._v("捕获。")]),e._v(" "),n("p",[e._v("一般来说，不要在"),n("code",[e._v("then()")]),e._v("方法里面定义 Reject 状态的回调函数（即"),n("code",[e._v("then")]),e._v("的第二个参数），总是使用"),n("code",[e._v("catch")]),e._v("方法。")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// bad\npromise\n  .then(function(data) {\n    // success\n  }, function(err) {\n    // error\n  });\n\n// good\npromise\n  .then(function(data) { //cb\n    // success\n  })\n  .catch(function(err) {\n    // error\n  });\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br")])]),n("p",[e._v("上面代码中，第二种写法要好于第一种写法，理由是第二种写法可以捕获前面"),n("code",[e._v("then")]),e._v("方法执行中的错误，也更接近同步的写法（"),n("code",[e._v("try/catch")]),e._v("）。因此，建议总是使用"),n("code",[e._v("catch()")]),e._v("方法，而不使用"),n("code",[e._v("then()")]),e._v("方法的第二个参数。")]),e._v(" "),n("p",[e._v("跟传统的"),n("code",[e._v("try/catch")]),e._v("代码块不同的是，如果没有使用"),n("code",[e._v("catch()")]),e._v("方法指定错误处理的回调函数，Promise 对象抛出的错误不会传递到外层代码，即不会有任何反应。")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const someAsyncThing = function() {\n  return new Promise(function(resolve, reject) {\n    // 下面一行会报错，因为x没有声明\n    resolve(x + 2);\n  });\n};\n\nsomeAsyncThing().then(function() {\n  console.log('everything is great');\n});\n\nsetTimeout(() => { console.log(123) }, 2000);\n// Uncaught (in promise) ReferenceError: x is not defined\n// 123\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br")])]),n("p",[e._v("上面代码中，"),n("code",[e._v("someAsyncThing()")]),e._v("函数产生的 Promise 对象，内部有语法错误。浏览器运行到这一行，会打印出错误提示"),n("code",[e._v("ReferenceError: x is not defined")]),e._v("，但是不会退出进程、终止脚本执行，2 秒之后还是会输出"),n("code",[e._v("123")]),e._v("。这就是说，Promise 内部的错误不会影响到 Promise 外部的代码，通俗的说法就是“Promise 会吃掉错误”。")]),e._v(" "),n("p",[e._v("这个脚本放在服务器执行，退出码就是"),n("code",[e._v("0")]),e._v("（即表示执行成功）。不过，Node.js 有一个"),n("code",[e._v("unhandledRejection")]),e._v("事件，专门监听未捕获的"),n("code",[e._v("reject")]),e._v("错误，上面的脚本会触发这个事件的监听函数，可以在监听函数里面抛出错误。")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("process.on('unhandledRejection', function (err, p) {\n  throw err;\n});\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br")])]),n("p",[e._v("上面代码中，"),n("code",[e._v("unhandledRejection")]),e._v("事件的监听函数有两个参数，第一个是错误对象，第二个是报错的 Promise 实例，它可以用来了解发生错误的环境信息。")]),e._v(" "),n("p",[e._v("注意，Node 有计划在未来废除"),n("code",[e._v("unhandledRejection")]),e._v("事件。如果 Promise 内部有未捕获的错误，会直接终止进程，并且进程的退出码不为 0。")]),e._v(" "),n("p",[e._v("再看下面的例子。")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const promise = new Promise(function (resolve, reject) {\n  resolve('ok');\n  setTimeout(function () { throw new Error('test') }, 0)\n});\npromise.then(function (value) { console.log(value) });\n// ok\n// Uncaught Error: test\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br")])]),n("p",[e._v("上面代码中，Promise 指定在下一轮“事件循环”再抛出错误。到了那个时候，Promise 的运行已经结束了，所以这个错误是在 Promise 函数体外抛出的，会冒泡到最外层，成了未捕获的错误。")]),e._v(" "),n("p",[e._v("一般总是建议，Promise 对象后面要跟"),n("code",[e._v("catch()")]),e._v("方法，这样可以处理 Promise 内部发生的错误。"),n("code",[e._v("catch()")]),e._v("方法返回的还是一个 Promise 对象，因此后面还可以接着调用"),n("code",[e._v("then()")]),e._v("方法。")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const someAsyncThing = function() {\n  return new Promise(function(resolve, reject) {\n    // 下面一行会报错，因为x没有声明\n    resolve(x + 2);\n  });\n};\n\nsomeAsyncThing()\n.catch(function(error) {\n  console.log('oh no', error);\n})\n.then(function() {\n  console.log('carry on');\n});\n// oh no [ReferenceError: x is not defined]\n// carry on\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br")])]),n("p",[e._v("上面代码运行完"),n("code",[e._v("catch()")]),e._v("方法指定的回调函数，会接着运行后面那个"),n("code",[e._v("then()")]),e._v("方法指定的回调函数。如果没有报错，则会跳过"),n("code",[e._v("catch()")]),e._v("方法。")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Promise.resolve()\n.catch(function(error) {\n  console.log('oh no', error);\n})\n.then(function() {\n  console.log('carry on');\n});\n// carry on\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br")])]),n("p",[e._v("上面的代码因为没有报错，跳过了"),n("code",[e._v("catch()")]),e._v("方法，直接执行后面的"),n("code",[e._v("then()")]),e._v("方法。此时，要是"),n("code",[e._v("then()")]),e._v("方法里面报错，就与前面的"),n("code",[e._v("catch()")]),e._v("无关了。")]),e._v(" "),n("p",[n("code",[e._v("catch()")]),e._v("方法之中，还能再抛出错误。")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const someAsyncThing = function() {\n  return new Promise(function(resolve, reject) {\n    // 下面一行会报错，因为x没有声明\n    resolve(x + 2);\n  });\n};\n\nsomeAsyncThing().then(function() {\n  return someOtherAsyncThing();\n}).catch(function(error) {\n  console.log('oh no', error);\n  // 下面一行会报错，因为 y 没有声明\n  y + 2;\n}).then(function() {\n  console.log('carry on');\n});\n// oh no [ReferenceError: x is not defined]\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br"),n("span",{staticClass:"line-number"},[e._v("17")]),n("br")])]),n("p",[e._v("上面代码中，"),n("code",[e._v("catch()")]),e._v("方法抛出一个错误，因为后面没有别的"),n("code",[e._v("catch()")]),e._v("方法了，导致这个错误不会被捕获，也不会传递到外层。如果改写一下，结果就不一样了。")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("someAsyncThing().then(function() {\n  return someOtherAsyncThing();\n}).catch(function(error) {\n  console.log('oh no', error);\n  // 下面一行会报错，因为y没有声明\n  y + 2;\n}).catch(function(error) {\n  console.log('carry on', error);\n});\n// oh no [ReferenceError: x is not defined]\n// carry on [ReferenceError: y is not defined]\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br")])]),n("p",[e._v("上面代码中，第二个"),n("code",[e._v("catch()")]),e._v("方法用来捕获前一个"),n("code",[e._v("catch()")]),e._v("方法抛出的错误。")]),e._v(" "),n("h2",{attrs:{id:"promise-prototype-finally"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#promise-prototype-finally"}},[e._v("#")]),e._v(" Promise.prototype.finally()")]),e._v(" "),n("p",[n("code",[e._v("finally()")]),e._v("方法用于指定不管 Promise 对象最后状态如何，都会执行的操作。该方法是 ES2018 引入标准的。")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("promise\n.then(result => {···})\n.catch(error => {···})\n.finally(() => {···});\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br")])]),n("p",[e._v("上面代码中，不管"),n("code",[e._v("promise")]),e._v("最后的状态，在执行完"),n("code",[e._v("then")]),e._v("或"),n("code",[e._v("catch")]),e._v("指定的回调函数以后，都会执行"),n("code",[e._v("finally")]),e._v("方法指定的回调函数。")]),e._v(" "),n("p",[e._v("下面是一个例子，服务器使用 Promise 处理请求，然后使用"),n("code",[e._v("finally")]),e._v("方法关掉服务器。")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("server.listen(port)\n  .then(function () {\n    // ...\n  })\n  .finally(server.stop);\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br")])]),n("p",[n("code",[e._v("finally")]),e._v("方法的回调函数不接受任何参数，这意味着没有办法知道，前面的 Promise 状态到底是"),n("code",[e._v("fulfilled")]),e._v("还是"),n("code",[e._v("rejected")]),e._v("。这表明，"),n("code",[e._v("finally")]),e._v("方法里面的操作，应该是与状态无关的，不依赖于 Promise 的执行结果。")]),e._v(" "),n("p",[n("code",[e._v("finally")]),e._v("本质上是"),n("code",[e._v("then")]),e._v("方法的特例。")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("promise\n.finally(() => {\n  // 语句\n});\n\n// 等同于\npromise\n.then(\n  result => {\n    // 语句\n    return result;\n  },\n  error => {\n    // 语句\n    throw error;\n  }\n);\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br"),n("span",{staticClass:"line-number"},[e._v("17")]),n("br")])]),n("p",[e._v("上面代码中，如果不使用"),n("code",[e._v("finally")]),e._v("方法，同样的语句需要为成功和失败两种情况各写一次。有了"),n("code",[e._v("finally")]),e._v("方法，则只需要写一次。")]),e._v(" "),n("p",[e._v("它的实现也很简单。")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Promise.prototype.finally = function (callback) {\n  let P = this.constructor;\n  return this.then(\n    value  => P.resolve(callback()).then(() => value),\n    reason => P.resolve(callback()).then(() => { throw reason })\n  );\n};\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br")])]),n("p",[e._v("上面代码中，不管前面的 Promise 是"),n("code",[e._v("fulfilled")]),e._v("还是"),n("code",[e._v("rejected")]),e._v("，都会执行回调函数"),n("code",[e._v("callback")]),e._v("。")]),e._v(" "),n("p",[e._v("从上面的实现还可以看到，"),n("code",[e._v("finally")]),e._v("方法总是会返回原来的值。")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// resolve 的值是 undefined\nPromise.resolve(2).then(() => {}, () => {})\n\n// resolve 的值是 2\nPromise.resolve(2).finally(() => {})\n\n// reject 的值是 undefined\nPromise.reject(3).then(() => {}, () => {})\n\n// reject 的值是 3\nPromise.reject(3).finally(() => {})\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br")])]),n("h2",{attrs:{id:"promise-all"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#promise-all"}},[e._v("#")]),e._v(" Promise.all()")]),e._v(" "),n("p",[n("code",[e._v("Promise.all()")]),e._v("方法用于将多个 Promise 实例，包装成一个新的 Promise 实例。")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const p = Promise.all([p1, p2, p3]);\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br")])]),n("p",[e._v("上面代码中，"),n("code",[e._v("Promise.all()")]),e._v("方法接受一个数组作为参数，"),n("code",[e._v("p1")]),e._v("、"),n("code",[e._v("p2")]),e._v("、"),n("code",[e._v("p3")]),e._v("都是 Promise 实例，如果不是，就会先调用下面讲到的"),n("code",[e._v("Promise.resolve")]),e._v("方法，将参数转为 Promise 实例，再进一步处理。另外，"),n("code",[e._v("Promise.all()")]),e._v("方法的参数可以不是数组，但必须具有 Iterator 接口，且返回的每个成员都是 Promise 实例。")]),e._v(" "),n("p",[n("code",[e._v("p")]),e._v("的状态由"),n("code",[e._v("p1")]),e._v("、"),n("code",[e._v("p2")]),e._v("、"),n("code",[e._v("p3")]),e._v("决定，分成两种情况。")]),e._v(" "),n("p",[e._v("（1）只有"),n("code",[e._v("p1")]),e._v("、"),n("code",[e._v("p2")]),e._v("、"),n("code",[e._v("p3")]),e._v("的状态都变成"),n("code",[e._v("fulfilled")]),e._v("，"),n("code",[e._v("p")]),e._v("的状态才会变成"),n("code",[e._v("fulfilled")]),e._v("，此时"),n("code",[e._v("p1")]),e._v("、"),n("code",[e._v("p2")]),e._v("、"),n("code",[e._v("p3")]),e._v("的返回值组成一个数组，传递给"),n("code",[e._v("p")]),e._v("的回调函数。")]),e._v(" "),n("p",[e._v("（2）只要"),n("code",[e._v("p1")]),e._v("、"),n("code",[e._v("p2")]),e._v("、"),n("code",[e._v("p3")]),e._v("之中有一个被"),n("code",[e._v("rejected")]),e._v("，"),n("code",[e._v("p")]),e._v("的状态就变成"),n("code",[e._v("rejected")]),e._v("，此时第一个被"),n("code",[e._v("reject")]),e._v("的实例的返回值，会传递给"),n("code",[e._v("p")]),e._v("的回调函数。")]),e._v(" "),n("p",[e._v("下面是一个具体的例子。")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// 生成一个Promise对象的数组\nconst promises = [2, 3, 5, 7, 11, 13].map(function (id) {\n  return getJSON('/post/' + id + \".json\");\n});\n\nPromise.all(promises).then(function (posts) {\n  // ...\n}).catch(function(reason){\n  // ...\n});\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br")])]),n("p",[e._v("上面代码中，"),n("code",[e._v("promises")]),e._v("是包含 6 个 Promise 实例的数组，只有这 6 个实例的状态都变成"),n("code",[e._v("fulfilled")]),e._v("，或者其中有一个变为"),n("code",[e._v("rejected")]),e._v("，才会调用"),n("code",[e._v("Promise.all")]),e._v("方法后面的回调函数。")]),e._v(" "),n("p",[e._v("下面是另一个例子。")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const databasePromise = connectDatabase();\n\nconst booksPromise = databasePromise\n  .then(findAllBooks);\n\nconst userPromise = databasePromise\n  .then(getCurrentUser);\n\nPromise.all([\n  booksPromise,\n  userPromise\n])\n.then(([books, user]) => pickTopRecommendations(books, user));\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br")])]),n("p",[e._v("上面代码中，"),n("code",[e._v("booksPromise")]),e._v("和"),n("code",[e._v("userPromise")]),e._v("是两个异步操作，只有等到它们的结果都返回了，才会触发"),n("code",[e._v("pickTopRecommendations")]),e._v("这个回调函数。")]),e._v(" "),n("p",[e._v("注意，如果作为参数的 Promise 实例，自己定义了"),n("code",[e._v("catch")]),e._v("方法，那么它一旦被"),n("code",[e._v("rejected")]),e._v("，并不会触发"),n("code",[e._v("Promise.all()")]),e._v("的"),n("code",[e._v("catch")]),e._v("方法。")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const p1 = new Promise((resolve, reject) => {\n  resolve('hello');\n})\n.then(result => result)\n.catch(e => e);\n\nconst p2 = new Promise((resolve, reject) => {\n  throw new Error('报错了');\n})\n.then(result => result)\n.catch(e => e);\n\nPromise.all([p1, p2])\n.then(result => console.log(result))\n.catch(e => console.log(e));\n// [\"hello\", Error: 报错了]\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br")])]),n("p",[e._v("上面代码中，"),n("code",[e._v("p1")]),e._v("会"),n("code",[e._v("resolved")]),e._v("，"),n("code",[e._v("p2")]),e._v("首先会"),n("code",[e._v("rejected")]),e._v("，但是"),n("code",[e._v("p2")]),e._v("有自己的"),n("code",[e._v("catch")]),e._v("方法，该方法返回的是一个新的 Promise 实例，"),n("code",[e._v("p2")]),e._v("指向的实际上是这个实例。该实例执行完"),n("code",[e._v("catch")]),e._v("方法后，也会变成"),n("code",[e._v("resolved")]),e._v("，导致"),n("code",[e._v("Promise.all()")]),e._v("方法参数里面的两个实例都会"),n("code",[e._v("resolved")]),e._v("，因此会调用"),n("code",[e._v("then")]),e._v("方法指定的回调函数，而不会调用"),n("code",[e._v("catch")]),e._v("方法指定的回调函数。")]),e._v(" "),n("p",[e._v("如果"),n("code",[e._v("p2")]),e._v("没有自己的"),n("code",[e._v("catch")]),e._v("方法，就会调用"),n("code",[e._v("Promise.all()")]),e._v("的"),n("code",[e._v("catch")]),e._v("方法。")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const p1 = new Promise((resolve, reject) => {\n  resolve('hello');\n})\n.then(result => result);\n\nconst p2 = new Promise((resolve, reject) => {\n  throw new Error('报错了');\n})\n.then(result => result);\n\nPromise.all([p1, p2])\n.then(result => console.log(result))\n.catch(e => console.log(e));\n// Error: 报错了\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br")])]),n("h2",{attrs:{id:"promise-race"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#promise-race"}},[e._v("#")]),e._v(" Promise.race()")]),e._v(" "),n("p",[n("code",[e._v("Promise.race()")]),e._v("方法同样是将多个 Promise 实例，包装成一个新的 Promise 实例。")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const p = Promise.race([p1, p2, p3]);\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br")])]),n("p",[e._v("上面代码中，只要"),n("code",[e._v("p1")]),e._v("、"),n("code",[e._v("p2")]),e._v("、"),n("code",[e._v("p3")]),e._v("之中有一个实例率先改变状态，"),n("code",[e._v("p")]),e._v("的状态就跟着改变。那个率先改变的 Promise 实例的返回值，就传递给"),n("code",[e._v("p")]),e._v("的回调函数。")]),e._v(" "),n("p",[n("code",[e._v("Promise.race()")]),e._v("方法的参数与"),n("code",[e._v("Promise.all()")]),e._v("方法一样，如果不是 Promise 实例，就会先调用下面讲到的"),n("code",[e._v("Promise.resolve()")]),e._v("方法，将参数转为 Promise 实例，再进一步处理。")]),e._v(" "),n("p",[e._v("下面是一个例子，如果指定时间内没有获得结果，就将 Promise 的状态变为"),n("code",[e._v("reject")]),e._v("，否则变为"),n("code",[e._v("resolve")]),e._v("。")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const p = Promise.race([\n  fetch('/resource-that-may-take-a-while'),\n  new Promise(function (resolve, reject) {\n    setTimeout(() => reject(new Error('request timeout')), 5000)\n  })\n]);\n\np\n.then(console.log)\n.catch(console.error);\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br")])]),n("p",[e._v("上面代码中，如果 5 秒之内"),n("code",[e._v("fetch")]),e._v("方法无法返回结果，变量"),n("code",[e._v("p")]),e._v("的状态就会变为"),n("code",[e._v("rejected")]),e._v("，从而触发"),n("code",[e._v("catch")]),e._v("方法指定的回调函数。")]),e._v(" "),n("h2",{attrs:{id:"promise-allsettled"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#promise-allsettled"}},[e._v("#")]),e._v(" Promise.allSettled()")]),e._v(" "),n("p",[e._v("有时候，我们希望等到一组异步操作都结束了，不管每一个操作是成功还是失败，再进行下一步操作。但是，现有的 Promise 方法很难实现这个要求。")]),e._v(" "),n("p",[n("code",[e._v("Promise.all()")]),e._v("方法只适合所有异步操作都成功的情况，如果有一个操作失败，就无法满足要求。")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const urls = [url_1, url_2, url_3];\nconst requests = urls.map(x => fetch(x));\n\ntry {\n  await Promise.all(requests);\n  console.log('所有请求都成功。');\n} catch {\n  console.log('至少一个请求失败，其他请求可能还没结束。');\n}\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br")])]),n("p",[e._v("上面示例中，"),n("code",[e._v("Promise.all()")]),e._v("可以确定所有请求都成功了，但是只要有一个请求失败，它就会报错，而不管另外的请求是否结束。")]),e._v(" "),n("p",[e._v("为了解决这个问题，"),n("a",{attrs:{href:"https://github.com/tc39/proposal-promise-allSettled",target:"_blank",rel:"noopener noreferrer"}},[e._v("ES2020"),n("OutboundLink")],1),e._v(" 引入了"),n("code",[e._v("Promise.allSettled()")]),e._v("方法，用来确定一组异步操作是否都结束了（不管成功或失败）。所以，它的名字叫做”Settled“，包含了”fulfilled“和”rejected“两种情况。")]),e._v(" "),n("p",[n("code",[e._v("Promise.allSettled()")]),e._v("方法接受一个数组作为参数，数组的每个成员都是一个 Promise 对象，并返回一个新的 Promise 对象。只有等到参数数组的所有 Promise 对象都发生状态变更（不管是"),n("code",[e._v("fulfilled")]),e._v("还是"),n("code",[e._v("rejected")]),e._v("），返回的 Promise 对象才会发生状态变更。")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const promises = [\n  fetch('/api-1'),\n  fetch('/api-2'),\n  fetch('/api-3'),\n];\n\nawait Promise.allSettled(promises);\nremoveLoadingIndicator();\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br")])]),n("p",[e._v("上面示例中，数组"),n("code",[e._v("promises")]),e._v("包含了三个请求，只有等到这三个请求都结束了（不管请求成功还是失败），"),n("code",[e._v("removeLoadingIndicator()")]),e._v("才会执行。")]),e._v(" "),n("p",[e._v("该方法返回的新的 Promise 实例，一旦发生状态变更，状态总是"),n("code",[e._v("fulfilled")]),e._v("，不会变成"),n("code",[e._v("rejected")]),e._v("。状态变成"),n("code",[e._v("fulfilled")]),e._v("后，它的回调函数会接收到一个数组作为参数，该数组的每个成员对应前面数组的每个 Promise 对象。")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const resolved = Promise.resolve(42);\nconst rejected = Promise.reject(-1);\n\nconst allSettledPromise = Promise.allSettled([resolved, rejected]);\n\nallSettledPromise.then(function (results) {\n  console.log(results);\n});\n// [\n//    { status: 'fulfilled', value: 42 },\n//    { status: 'rejected', reason: -1 }\n// ]\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br")])]),n("p",[e._v("上面代码中，"),n("code",[e._v("Promise.allSettled()")]),e._v("的返回值"),n("code",[e._v("allSettledPromise")]),e._v("，状态只可能变成"),n("code",[e._v("fulfilled")]),e._v("。它的回调函数接收到的参数是数组"),n("code",[e._v("results")]),e._v("。该数组的每个成员都是一个对象，对应传入"),n("code",[e._v("Promise.allSettled()")]),e._v("的数组里面的两个 Promise 对象。")]),e._v(" "),n("p",[n("code",[e._v("results")]),e._v("的每个成员是一个对象，对象的格式是固定的，对应异步操作的结果。")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// 异步操作成功时\n{status: 'fulfilled', value: value}\n\n// 异步操作失败时\n{status: 'rejected', reason: reason}\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br")])]),n("p",[e._v("成员对象的"),n("code",[e._v("status")]),e._v("属性的值只可能是字符串"),n("code",[e._v("fulfilled")]),e._v("或字符串"),n("code",[e._v("rejected")]),e._v("，用来区分异步操作是成功还是失败。如果是成功（"),n("code",[e._v("fulfilled")]),e._v("），对象会有"),n("code",[e._v("value")]),e._v("属性，如果是失败（"),n("code",[e._v("rejected")]),e._v("），会有"),n("code",[e._v("reason")]),e._v("属性，对应两种状态时前面异步操作的返回值。")]),e._v(" "),n("p",[e._v("下面是返回值的用法例子。")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const promises = [ fetch('index.html'), fetch('https://does-not-exist/') ];\nconst results = await Promise.allSettled(promises);\n\n// 过滤出成功的请求\nconst successfulPromises = results.filter(p => p.status === 'fulfilled');\n\n// 过滤出失败的请求，并输出原因\nconst errors = results\n  .filter(p => p.status === 'rejected')\n  .map(p => p.reason);\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br")])]),n("h2",{attrs:{id:"promise-any"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#promise-any"}},[e._v("#")]),e._v(" Promise.any()")]),e._v(" "),n("p",[e._v("ES2021 引入了"),n("a",{attrs:{href:"https://github.com/tc39/proposal-promise-any",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("Promise.any()")]),e._v("方法"),n("OutboundLink")],1),e._v("。该方法接受一组 Promise 实例作为参数，包装成一个新的 Promise 实例返回。")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Promise.any([\n  fetch('https://v8.dev/').then(() => 'home'),\n  fetch('https://v8.dev/blog').then(() => 'blog'),\n  fetch('https://v8.dev/docs').then(() => 'docs')\n]).then((first) => {  // 只要有一个 fetch() 请求成功\n  console.log(first);\n}).catch((error) => { // 所有三个 fetch() 全部请求失败\n  console.log(error);\n});\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br")])]),n("p",[e._v("只要参数实例有一个变成"),n("code",[e._v("fulfilled")]),e._v("状态，包装实例就会变成"),n("code",[e._v("fulfilled")]),e._v("状态；如果所有参数实例都变成"),n("code",[e._v("rejected")]),e._v("状态，包装实例就会变成"),n("code",[e._v("rejected")]),e._v("状态。")]),e._v(" "),n("p",[n("code",[e._v("Promise.any()")]),e._v("跟"),n("code",[e._v("Promise.race()")]),e._v("方法很像，只有一点不同，就是"),n("code",[e._v("Promise.any()")]),e._v("不会因为某个 Promise 变成"),n("code",[e._v("rejected")]),e._v("状态而结束，必须等到所有参数 Promise 变成"),n("code",[e._v("rejected")]),e._v("状态才会结束。")]),e._v(" "),n("p",[e._v("下面是"),n("code",[e._v("Promise()")]),e._v("与"),n("code",[e._v("await")]),e._v("命令结合使用的例子。")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const promises = [\n  fetch('/endpoint-a').then(() => 'a'),\n  fetch('/endpoint-b').then(() => 'b'),\n  fetch('/endpoint-c').then(() => 'c'),\n];\n\ntry {\n  const first = await Promise.any(promises);\n  console.log(first);\n} catch (error) {\n  console.log(error);\n}\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br")])]),n("p",[e._v("上面代码中，"),n("code",[e._v("Promise.any()")]),e._v("方法的参数数组包含三个 Promise 操作。其中只要有一个变成"),n("code",[e._v("fulfilled")]),e._v("，"),n("code",[e._v("Promise.any()")]),e._v("返回的 Promise 对象就变成"),n("code",[e._v("fulfilled")]),e._v("。如果所有三个操作都变成"),n("code",[e._v("rejected")]),e._v("，那么"),n("code",[e._v("await")]),e._v("命令就会抛出错误。")]),e._v(" "),n("p",[n("code",[e._v("Promise.any()")]),e._v("抛出的错误是一个 AggregateError 实例（详见《对象的扩展》一章），这个 AggregateError 实例对象的"),n("code",[e._v("errors")]),e._v("属性是一个数组，包含了所有成员的错误。")]),e._v(" "),n("p",[e._v("下面是一个例子。")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("var resolved = Promise.resolve(42);\nvar rejected = Promise.reject(-1);\nvar alsoRejected = Promise.reject(Infinity);\n\nPromise.any([resolved, rejected, alsoRejected]).then(function (result) {\n  console.log(result); // 42\n});\n\nPromise.any([rejected, alsoRejected]).catch(function (results) {\n  console.log(results instanceof AggregateError); // true\n  console.log(results.errors); // [-1, Infinity]\n});\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br")])]),n("h2",{attrs:{id:"promise-resolve"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#promise-resolve"}},[e._v("#")]),e._v(" Promise.resolve()")]),e._v(" "),n("p",[e._v("有时需要将现有对象转为 Promise 对象，"),n("code",[e._v("Promise.resolve()")]),e._v("方法就起到这个作用。")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const jsPromise = Promise.resolve($.ajax('/whatever.json'));\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br")])]),n("p",[e._v("上面代码将 jQuery 生成的"),n("code",[e._v("deferred")]),e._v("对象，转为一个新的 Promise 对象。")]),e._v(" "),n("p",[n("code",[e._v("Promise.resolve()")]),e._v("等价于下面的写法。")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Promise.resolve('foo')\n// 等价于\nnew Promise(resolve => resolve('foo'))\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br")])]),n("p",[n("code",[e._v("Promise.resolve()")]),e._v("方法的参数分成四种情况。")]),e._v(" "),n("p",[n("strong",[e._v("（1）参数是一个 Promise 实例")])]),e._v(" "),n("p",[e._v("如果参数是 Promise 实例，那么"),n("code",[e._v("Promise.resolve")]),e._v("将不做任何修改、原封不动地返回这个实例。")]),e._v(" "),n("p",[n("strong",[e._v("（2）参数是一个"),n("code",[e._v("thenable")]),e._v("对象")])]),e._v(" "),n("p",[n("code",[e._v("thenable")]),e._v("对象指的是具有"),n("code",[e._v("then")]),e._v("方法的对象，比如下面这个对象。")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("let thenable = {\n  then: function(resolve, reject) {\n    resolve(42);\n  }\n};\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br")])]),n("p",[n("code",[e._v("Promise.resolve()")]),e._v("方法会将这个对象转为 Promise 对象，然后就立即执行"),n("code",[e._v("thenable")]),e._v("对象的"),n("code",[e._v("then()")]),e._v("方法。")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("let thenable = {\n  then: function(resolve, reject) {\n    resolve(42);\n  }\n};\n\nlet p1 = Promise.resolve(thenable);\np1.then(function (value) {\n  console.log(value);  // 42\n});\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br")])]),n("p",[e._v("上面代码中，"),n("code",[e._v("thenable")]),e._v("对象的"),n("code",[e._v("then()")]),e._v("方法执行后，对象"),n("code",[e._v("p1")]),e._v("的状态就变为"),n("code",[e._v("resolved")]),e._v("，从而立即执行最后那个"),n("code",[e._v("then()")]),e._v("方法指定的回调函数，输出 42。")]),e._v(" "),n("p",[n("strong",[e._v("（3）参数不是具有"),n("code",[e._v("then()")]),e._v("方法的对象，或根本就不是对象")])]),e._v(" "),n("p",[e._v("如果参数是一个原始值，或者是一个不具有"),n("code",[e._v("then()")]),e._v("方法的对象，则"),n("code",[e._v("Promise.resolve()")]),e._v("方法返回一个新的 Promise 对象，状态为"),n("code",[e._v("resolved")]),e._v("。")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const p = Promise.resolve('Hello');\n\np.then(function (s) {\n  console.log(s)\n});\n// Hello\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br")])]),n("p",[e._v("上面代码生成一个新的 Promise 对象的实例"),n("code",[e._v("p")]),e._v("。由于字符串"),n("code",[e._v("Hello")]),e._v("不属于异步操作（判断方法是字符串对象不具有 then 方法），返回 Promise 实例的状态从一生成就是"),n("code",[e._v("resolved")]),e._v("，所以回调函数会立即执行。"),n("code",[e._v("Promise.resolve()")]),e._v("方法的参数，会同时传给回调函数。")]),e._v(" "),n("p",[n("strong",[e._v("（4）不带有任何参数")])]),e._v(" "),n("p",[n("code",[e._v("Promise.resolve()")]),e._v("方法允许调用时不带参数，直接返回一个"),n("code",[e._v("resolved")]),e._v("状态的 Promise 对象。")]),e._v(" "),n("p",[e._v("所以，如果希望得到一个 Promise 对象，比较方便的方法就是直接调用"),n("code",[e._v("Promise.resolve()")]),e._v("方法。")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const p = Promise.resolve();\n\np.then(function () {\n  // ...\n});\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br")])]),n("p",[e._v("上面代码的变量"),n("code",[e._v("p")]),e._v("就是一个 Promise 对象。")]),e._v(" "),n("p",[e._v("需要注意的是，立即"),n("code",[e._v("resolve()")]),e._v("的 Promise 对象，是在本轮“事件循环”（event loop）的结束时执行，而不是在下一轮“事件循环”的开始时。")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("setTimeout(function () {\n  console.log('three');\n}, 0);\n\nPromise.resolve().then(function () {\n  console.log('two');\n});\n\nconsole.log('one');\n\n// one\n// two\n// three\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br")])]),n("p",[e._v("上面代码中，"),n("code",[e._v("setTimeout(fn, 0)")]),e._v("在下一轮“事件循环”开始时执行，"),n("code",[e._v("Promise.resolve()")]),e._v("在本轮“事件循环”结束时执行，"),n("code",[e._v("console.log('one')")]),e._v("则是立即执行，因此最先输出。")]),e._v(" "),n("h2",{attrs:{id:"promise-reject"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#promise-reject"}},[e._v("#")]),e._v(" Promise.reject()")]),e._v(" "),n("p",[n("code",[e._v("Promise.reject(reason)")]),e._v("方法也会返回一个新的 Promise 实例，该实例的状态为"),n("code",[e._v("rejected")]),e._v("。")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const p = Promise.reject('出错了');\n// 等同于\nconst p = new Promise((resolve, reject) => reject('出错了'))\n\np.then(null, function (s) {\n  console.log(s)\n});\n// 出错了\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br")])]),n("p",[e._v("上面代码生成一个 Promise 对象的实例"),n("code",[e._v("p")]),e._v("，状态为"),n("code",[e._v("rejected")]),e._v("，回调函数会立即执行。")]),e._v(" "),n("p",[n("code",[e._v("Promise.reject()")]),e._v("方法的参数，会原封不动地作为"),n("code",[e._v("reject")]),e._v("的理由，变成后续方法的参数。")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Promise.reject('出错了')\n.catch(e => {\n  console.log(e === '出错了')\n})\n// true\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br")])]),n("p",[e._v("上面代码中，"),n("code",[e._v("Promise.reject()")]),e._v("方法的参数是一个字符串，后面"),n("code",[e._v("catch()")]),e._v("方法的参数"),n("code",[e._v("e")]),e._v("就是这个字符串。")]),e._v(" "),n("h2",{attrs:{id:"应用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#应用"}},[e._v("#")]),e._v(" 应用")]),e._v(" "),n("h3",{attrs:{id:"加载图片"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#加载图片"}},[e._v("#")]),e._v(" 加载图片")]),e._v(" "),n("p",[e._v("我们可以将图片的加载写成一个"),n("code",[e._v("Promise")]),e._v("，一旦加载完成，"),n("code",[e._v("Promise")]),e._v("的状态就发生变化。")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const preloadImage = function (path) {\n  return new Promise(function (resolve, reject) {\n    const image = new Image();\n    image.onload  = resolve;\n    image.onerror = reject;\n    image.src = path;\n  });\n};\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br")])]),n("h3",{attrs:{id:"generator-函数与-promise-的结合"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#generator-函数与-promise-的结合"}},[e._v("#")]),e._v(" Generator 函数与 Promise 的结合")]),e._v(" "),n("p",[e._v("使用 Generator 函数管理流程，遇到异步操作的时候，通常返回一个"),n("code",[e._v("Promise")]),e._v("对象。")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("function getFoo () {\n  return new Promise(function (resolve, reject){\n    resolve('foo');\n  });\n}\n\nconst g = function* () {\n  try {\n    const foo = yield getFoo();\n    console.log(foo);\n  } catch (e) {\n    console.log(e);\n  }\n};\n\nfunction run (generator) {\n  const it = generator();\n\n  function go(result) {\n    if (result.done) return result.value;\n\n    return result.value.then(function (value) {\n      return go(it.next(value));\n    }, function (error) {\n      return go(it.throw(error));\n    });\n  }\n\n  go(it.next());\n}\n\nrun(g);\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br"),n("span",{staticClass:"line-number"},[e._v("17")]),n("br"),n("span",{staticClass:"line-number"},[e._v("18")]),n("br"),n("span",{staticClass:"line-number"},[e._v("19")]),n("br"),n("span",{staticClass:"line-number"},[e._v("20")]),n("br"),n("span",{staticClass:"line-number"},[e._v("21")]),n("br"),n("span",{staticClass:"line-number"},[e._v("22")]),n("br"),n("span",{staticClass:"line-number"},[e._v("23")]),n("br"),n("span",{staticClass:"line-number"},[e._v("24")]),n("br"),n("span",{staticClass:"line-number"},[e._v("25")]),n("br"),n("span",{staticClass:"line-number"},[e._v("26")]),n("br"),n("span",{staticClass:"line-number"},[e._v("27")]),n("br"),n("span",{staticClass:"line-number"},[e._v("28")]),n("br"),n("span",{staticClass:"line-number"},[e._v("29")]),n("br"),n("span",{staticClass:"line-number"},[e._v("30")]),n("br"),n("span",{staticClass:"line-number"},[e._v("31")]),n("br"),n("span",{staticClass:"line-number"},[e._v("32")]),n("br")])]),n("p",[e._v("上面代码的 Generator 函数"),n("code",[e._v("g")]),e._v("之中，有一个异步操作"),n("code",[e._v("getFoo")]),e._v("，它返回的就是一个"),n("code",[e._v("Promise")]),e._v("对象。函数"),n("code",[e._v("run")]),e._v("用来处理这个"),n("code",[e._v("Promise")]),e._v("对象，并调用下一个"),n("code",[e._v("next")]),e._v("方法。")]),e._v(" "),n("h2",{attrs:{id:"promise-try"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#promise-try"}},[e._v("#")]),e._v(" Promise.try()")]),e._v(" "),n("p",[e._v("实际开发中，经常遇到一种情况：不知道或者不想区分，函数"),n("code",[e._v("f")]),e._v("是同步函数还是异步操作，但是想用 Promise 来处理它。因为这样就可以不管"),n("code",[e._v("f")]),e._v("是否包含异步操作，都用"),n("code",[e._v("then")]),e._v("方法指定下一步流程，用"),n("code",[e._v("catch")]),e._v("方法处理"),n("code",[e._v("f")]),e._v("抛出的错误。一般就会采用下面的写法。")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Promise.resolve().then(f)\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br")])]),n("p",[e._v("上面的写法有一个缺点，就是如果"),n("code",[e._v("f")]),e._v("是同步函数，那么它会在本轮事件循环的末尾执行。")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const f = () => console.log('now');\nPromise.resolve().then(f);\nconsole.log('next');\n// next\n// now\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br")])]),n("p",[e._v("上面代码中，函数"),n("code",[e._v("f")]),e._v("是同步的，但是用 Promise 包装了以后，就变成异步执行了。")]),e._v(" "),n("p",[e._v("那么有没有一种方法，让同步函数同步执行，异步函数异步执行，并且让它们具有统一的 API 呢？回答是可以的，并且还有两种写法。第一种写法是用"),n("code",[e._v("async")]),e._v("函数来写。")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const f = () => console.log('now');\n(async () => f())();\nconsole.log('next');\n// now\n// next\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br")])]),n("p",[e._v("上面代码中，第二行是一个立即执行的匿名函数，会立即执行里面的"),n("code",[e._v("async")]),e._v("函数，因此如果"),n("code",[e._v("f")]),e._v("是同步的，就会得到同步的结果；如果"),n("code",[e._v("f")]),e._v("是异步的，就可以用"),n("code",[e._v("then")]),e._v("指定下一步，就像下面的写法。")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("(async () => f())()\n.then(...)\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br")])]),n("p",[e._v("需要注意的是，"),n("code",[e._v("async () => f()")]),e._v("会吃掉"),n("code",[e._v("f()")]),e._v("抛出的错误。所以，如果想捕获错误，要使用"),n("code",[e._v("promise.catch")]),e._v("方法。")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("(async () => f())()\n.then(...)\n.catch(...)\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br")])]),n("p",[e._v("第二种写法是使用"),n("code",[e._v("new Promise()")]),e._v("。")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const f = () => console.log('now');\n(\n  () => new Promise(\n    resolve => resolve(f())\n  )\n)();\nconsole.log('next');\n// now\n// next\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br")])]),n("p",[e._v("上面代码也是使用立即执行的匿名函数，执行"),n("code",[e._v("new Promise()")]),e._v("。这种情况下，同步函数也是同步执行的。")]),e._v(" "),n("p",[e._v("鉴于这是一个很常见的需求，所以现在有一个"),n("a",{attrs:{href:"https://github.com/ljharb/proposal-promise-try",target:"_blank",rel:"noopener noreferrer"}},[e._v("提案"),n("OutboundLink")],1),e._v("，提供"),n("code",[e._v("Promise.try")]),e._v("方法替代上面的写法。")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const f = () => console.log('now');\nPromise.try(f);\nconsole.log('next');\n// now\n// next\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br")])]),n("p",[e._v("事实上，"),n("code",[e._v("Promise.try")]),e._v("存在已久，Promise 库"),n("a",{attrs:{href:"http://bluebirdjs.com/docs/api/promise.try.html",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("Bluebird")]),n("OutboundLink")],1),e._v("、"),n("a",{attrs:{href:"https://github.com/kriskowal/q/wiki/API-Reference#promisefcallargs",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("Q")]),n("OutboundLink")],1),e._v("和"),n("a",{attrs:{href:"https://github.com/cujojs/when/blob/master/docs/api.md#whentry",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("when")]),n("OutboundLink")],1),e._v("，早就提供了这个方法。")]),e._v(" "),n("p",[e._v("由于"),n("code",[e._v("Promise.try")]),e._v("为所有操作提供了统一的处理机制，所以如果想用"),n("code",[e._v("then")]),e._v("方法管理流程，最好都用"),n("code",[e._v("Promise.try")]),e._v("包装一下。这样有"),n("a",{attrs:{href:"http://cryto.net/~joepie91/blog/2016/05/11/what-is-promise-try-and-why-does-it-matter/",target:"_blank",rel:"noopener noreferrer"}},[e._v("许多好处"),n("OutboundLink")],1),e._v("，其中一点就是可以更好地管理异常。")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("function getUsername(userId) {\n  return database.users.get({id: userId})\n  .then(function(user) {\n    return user.name;\n  });\n}\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br")])]),n("p",[e._v("上面代码中，"),n("code",[e._v("database.users.get()")]),e._v("返回一个 Promise 对象，如果抛出异步错误，可以用"),n("code",[e._v("catch")]),e._v("方法捕获，就像下面这样写。")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("database.users.get({id: userId})\n.then(...)\n.catch(...)\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br")])]),n("p",[e._v("但是"),n("code",[e._v("database.users.get()")]),e._v("可能还会抛出同步错误（比如数据库连接错误，具体要看实现方法），这时你就不得不用"),n("code",[e._v("try...catch")]),e._v("去捕获。")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("try {\n  database.users.get({id: userId})\n  .then(...)\n  .catch(...)\n} catch (e) {\n  // ...\n}\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br")])]),n("p",[e._v("上面这样的写法就很笨拙了，这时就可以统一用"),n("code",[e._v("promise.catch()")]),e._v("捕获所有同步和异步的错误。")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Promise.try(() => database.users.get({id: userId}))\n  .then(...)\n  .catch(...)\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br")])]),n("p",[e._v("事实上，"),n("code",[e._v("Promise.try")]),e._v("就是模拟"),n("code",[e._v("try")]),e._v("代码块，就像"),n("code",[e._v("promise.catch")]),e._v("模拟的是"),n("code",[e._v("catch")]),e._v("代码块。")]),e._v(" "),n("h3",{attrs:{id:"留言"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#留言"}},[e._v("#")]),e._v(" 留言")])])}),[],!1,null,null,null);s.default=r.exports}}]);