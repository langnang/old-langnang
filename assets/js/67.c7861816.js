(window.webpackJsonp=window.webpackJsonp||[]).push([[67],{536:function(s,e,n){"use strict";n.r(e);var t=n(18),a=Object(t.a)({},(function(){var s=this,e=s.$createElement,n=s._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h1",{attrs:{id:"对象的新增方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#对象的新增方法"}},[s._v("#")]),s._v(" 对象的新增方法")]),s._v(" "),n("ol",[n("li",[n("a",{attrs:{href:"https://es6.ruanyifeng.com/#docs/object-methods#Object.is()",target:"_blank",rel:"noopener noreferrer"}},[s._v("Object.is()"),n("OutboundLink")],1)]),s._v(" "),n("li",[n("a",{attrs:{href:"https://es6.ruanyifeng.com/#docs/object-methods#Object.assign()",target:"_blank",rel:"noopener noreferrer"}},[s._v("Object.assign()"),n("OutboundLink")],1)]),s._v(" "),n("li",[n("a",{attrs:{href:"https://es6.ruanyifeng.com/#docs/object-methods#Object.getOwnPropertyDescriptors()",target:"_blank",rel:"noopener noreferrer"}},[s._v("Object.getOwnPropertyDescriptors()"),n("OutboundLink")],1)]),s._v(" "),n("li",[n("a",{attrs:{href:"https://es6.ruanyifeng.com/#docs/object-methods#__proto__%E5%B1%9E%E6%80%A7%EF%BC%8CObject.setPrototypeOf()%EF%BC%8CObject.getPrototypeOf()",target:"_blank",rel:"noopener noreferrer"}},[s._v("__proto__属性，Object.setPrototypeOf()，Object.getPrototypeOf()"),n("OutboundLink")],1)]),s._v(" "),n("li",[n("a",{attrs:{href:"https://es6.ruanyifeng.com/#docs/object-methods#Object.keys()%EF%BC%8CObject.values()%EF%BC%8CObject.entries()",target:"_blank",rel:"noopener noreferrer"}},[s._v("Object.keys()，Object.values()，Object.entries()"),n("OutboundLink")],1)]),s._v(" "),n("li",[n("a",{attrs:{href:"https://es6.ruanyifeng.com/#docs/object-methods#Object.fromEntries()",target:"_blank",rel:"noopener noreferrer"}},[s._v("Object.fromEntries()"),n("OutboundLink")],1)]),s._v(" "),n("li",[n("a",{attrs:{href:"https://es6.ruanyifeng.com/#docs/object-methods#Object.hasOwn()",target:"_blank",rel:"noopener noreferrer"}},[s._v("Object.hasOwn()"),n("OutboundLink")],1)])]),s._v(" "),n("p",[s._v("本章介绍 Object 对象的新增方法。")]),s._v(" "),n("h2",{attrs:{id:"object-is"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#object-is"}},[s._v("#")]),s._v(" Object.is()")]),s._v(" "),n("p",[s._v("ES5 比较两个值是否相等，只有两个运算符：相等运算符（"),n("code",[s._v("==")]),s._v("）和严格相等运算符（"),n("code",[s._v("===")]),s._v("）。它们都有缺点，前者会自动转换数据类型，后者的"),n("code",[s._v("NaN")]),s._v("不等于自身，以及"),n("code",[s._v("+0")]),s._v("等于"),n("code",[s._v("-0")]),s._v("。JavaScript 缺乏一种运算，在所有环境中，只要两个值是一样的，它们就应该相等。")]),s._v(" "),n("p",[s._v("ES6 提出“Same-value equality”（同值相等）算法，用来解决这个问题。"),n("code",[s._v("Object.is")]),s._v("就是部署这个算法的新方法。它用来比较两个值是否严格相等，与严格比较运算符（===）的行为基本一致。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("Object.is('foo', 'foo')\n// true\nObject.is({}, {})\n// false\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("p",[s._v("不同之处只有两个：一是"),n("code",[s._v("+0")]),s._v("不等于"),n("code",[s._v("-0")]),s._v("，二是"),n("code",[s._v("NaN")]),s._v("等于自身。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("+0 === -0 //true\nNaN === NaN // false\n\nObject.is(+0, -0) // false\nObject.is(NaN, NaN) // true\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("p",[s._v("ES5 可以通过下面的代码，部署"),n("code",[s._v("Object.is")]),s._v("。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("Object.defineProperty(Object, 'is', {\n  value: function(x, y) {\n    if (x === y) {\n      // 针对+0 不等于 -0的情况\n      return x !== 0 || 1 / x === 1 / y;\n    }\n    // 针对NaN的情况\n    return x !== x && y !== y;\n  },\n  configurable: true,\n  enumerable: false,\n  writable: true\n});\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br")])]),n("h2",{attrs:{id:"object-assign"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#object-assign"}},[s._v("#")]),s._v(" Object.assign()")]),s._v(" "),n("h3",{attrs:{id:"基本用法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#基本用法"}},[s._v("#")]),s._v(" 基本用法")]),s._v(" "),n("p",[n("code",[s._v("Object.assign()")]),s._v("方法用于对象的合并，将源对象（source）的所有可枚举属性，复制到目标对象（target）。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("const target = { a: 1 };\n\nconst source1 = { b: 2 };\nconst source2 = { c: 3 };\n\nObject.assign(target, source1, source2);\ntarget // {a:1, b:2, c:3}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("p",[n("code",[s._v("Object.assign()")]),s._v("方法的第一个参数是目标对象，后面的参数都是源对象。")]),s._v(" "),n("p",[s._v("注意，如果目标对象与源对象有同名属性，或多个源对象有同名属性，则后面的属性会覆盖前面的属性。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("const target = { a: 1, b: 1 };\n\nconst source1 = { b: 2, c: 2 };\nconst source2 = { c: 3 };\n\nObject.assign(target, source1, source2);\ntarget // {a:1, b:2, c:3}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("p",[s._v("如果只有一个参数，"),n("code",[s._v("Object.assign()")]),s._v("会直接返回该参数。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("const obj = {a: 1};\nObject.assign(obj) === obj // true\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[s._v("如果该参数不是对象，则会先转成对象，然后返回。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('typeof Object.assign(2) // "object"\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[s._v("由于"),n("code",[s._v("undefined")]),s._v("和"),n("code",[s._v("null")]),s._v("无法转成对象，所以如果它们作为参数，就会报错。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("Object.assign(undefined) // 报错\nObject.assign(null) // 报错\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[s._v("如果非对象参数出现在源对象的位置（即非首参数），那么处理规则有所不同。首先，这些参数都会转成对象，如果无法转成对象，就会跳过。这意味着，如果"),n("code",[s._v("undefined")]),s._v("和"),n("code",[s._v("null")]),s._v("不在首参数，就不会报错。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("let obj = {a: 1};\nObject.assign(obj, undefined) === obj // true\nObject.assign(obj, null) === obj // true\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[s._v("其他类型的值（即数值、字符串和布尔值）不在首参数，也不会报错。但是，除了字符串会以数组形式，拷贝入目标对象，其他值都不会产生效果。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('const v1 = \'abc\';\nconst v2 = true;\nconst v3 = 10;\n\nconst obj = Object.assign({}, v1, v2, v3);\nconsole.log(obj); // { "0": "a", "1": "b", "2": "c" }\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("p",[s._v("上面代码中，"),n("code",[s._v("v1")]),s._v("、"),n("code",[s._v("v2")]),s._v("、"),n("code",[s._v("v3")]),s._v("分别是字符串、布尔值和数值，结果只有字符串合入目标对象（以字符数组的形式），数值和布尔值都会被忽略。这是因为只有字符串的包装对象，会产生可枚举属性。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('Object(true) // {[[PrimitiveValue]]: true}\nObject(10)  //  {[[PrimitiveValue]]: 10}\nObject(\'abc\') // {0: "a", 1: "b", 2: "c", length: 3, [[PrimitiveValue]]: "abc"}\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[s._v("上面代码中，布尔值、数值、字符串分别转成对应的包装对象，可以看到它们的原始值都在包装对象的内部属性"),n("code",[s._v("[[PrimitiveValue]]")]),s._v("上面，这个属性是不会被"),n("code",[s._v("Object.assign()")]),s._v("拷贝的。只有字符串的包装对象，会产生可枚举的实义属性，那些属性则会被拷贝。")]),s._v(" "),n("p",[n("code",[s._v("Object.assign()")]),s._v("拷贝的属性是有限制的，只拷贝源对象的自身属性（不拷贝继承属性），也不拷贝不可枚举的属性（"),n("code",[s._v("enumerable: false")]),s._v("）。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("Object.assign({b: 'c'},\n  Object.defineProperty({}, 'invisible', {\n    enumerable: false,\n    value: 'hello'\n  })\n)\n// { b: 'c' }\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("p",[s._v("上面代码中，"),n("code",[s._v("Object.assign()")]),s._v("要拷贝的对象只有一个不可枚举属性"),n("code",[s._v("invisible")]),s._v("，这个属性并没有被拷贝进去。")]),s._v(" "),n("p",[s._v("属性名为 Symbol 值的属性，也会被"),n("code",[s._v("Object.assign()")]),s._v("拷贝。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("Object.assign({ a: 'b' }, { [Symbol('c')]: 'd' })\n// { a: 'b', Symbol(c): 'd' }\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("h3",{attrs:{id:"注意点"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#注意点"}},[s._v("#")]),s._v(" 注意点")]),s._v(" "),n("p",[n("strong",[s._v("（1）浅拷贝")])]),s._v(" "),n("p",[n("code",[s._v("Object.assign()")]),s._v("方法实行的是浅拷贝，而不是深拷贝。也就是说，如果源对象某个属性的值是对象，那么目标对象拷贝得到的是这个对象的引用。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("const obj1 = {a: {b: 1}};\nconst obj2 = Object.assign({}, obj1);\n\nobj1.a.b = 2;\nobj2.a.b // 2\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("p",[s._v("上面代码中，源对象"),n("code",[s._v("obj1")]),s._v("的"),n("code",[s._v("a")]),s._v("属性的值是一个对象，"),n("code",[s._v("Object.assign()")]),s._v("拷贝得到的是这个对象的引用。这个对象的任何变化，都会反映到目标对象上面。")]),s._v(" "),n("p",[n("strong",[s._v("（2）同名属性的替换")])]),s._v(" "),n("p",[s._v("对于这种嵌套的对象，一旦遇到同名属性，"),n("code",[s._v("Object.assign()")]),s._v("的处理方法是替换，而不是添加。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("const target = { a: { b: 'c', d: 'e' } }\nconst source = { a: { b: 'hello' } }\nObject.assign(target, source)\n// { a: { b: 'hello' } }\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("p",[s._v("上面代码中，"),n("code",[s._v("target")]),s._v("对象的"),n("code",[s._v("a")]),s._v("属性被"),n("code",[s._v("source")]),s._v("对象的"),n("code",[s._v("a")]),s._v("属性整个替换掉了，而不会得到"),n("code",[s._v("{ a: { b: 'hello', d: 'e' } }")]),s._v("的结果。这通常不是开发者想要的，需要特别小心。")]),s._v(" "),n("p",[s._v("一些函数库提供"),n("code",[s._v("Object.assign()")]),s._v("的定制版本（比如 Lodash 的"),n("code",[s._v("_.defaultsDeep()")]),s._v("方法），可以得到深拷贝的合并。")]),s._v(" "),n("p",[n("strong",[s._v("（3）数组的处理")])]),s._v(" "),n("p",[n("code",[s._v("Object.assign()")]),s._v("可以用来处理数组，但是会把数组视为对象。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("Object.assign([1, 2, 3], [4, 5])\n// [4, 5, 3]\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[s._v("上面代码中，"),n("code",[s._v("Object.assign()")]),s._v("把数组视为属性名为 0、1、2 的对象，因此源数组的 0 号属性"),n("code",[s._v("4")]),s._v("覆盖了目标数组的 0 号属性"),n("code",[s._v("1")]),s._v("。")]),s._v(" "),n("p",[n("strong",[s._v("（4）取值函数的处理")])]),s._v(" "),n("p",[n("code",[s._v("Object.assign()")]),s._v("只能进行值的复制，如果要复制的值是一个取值函数，那么将求值后再复制。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("const source = {\n  get foo() { return 1 }\n};\nconst target = {};\n\nObject.assign(target, source)\n// { foo: 1 }\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("p",[s._v("上面代码中，"),n("code",[s._v("source")]),s._v("对象的"),n("code",[s._v("foo")]),s._v("属性是一个取值函数，"),n("code",[s._v("Object.assign()")]),s._v("不会复制这个取值函数，只会拿到值以后，将这个值复制过去。")]),s._v(" "),n("h3",{attrs:{id:"常见用途"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#常见用途"}},[s._v("#")]),s._v(" 常见用途")]),s._v(" "),n("p",[n("code",[s._v("Object.assign()")]),s._v("方法有很多用处。")]),s._v(" "),n("p",[n("strong",[s._v("（1）为对象添加属性")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("class Point {\n  constructor(x, y) {\n    Object.assign(this, {x, y});\n  }\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("p",[s._v("上面方法通过"),n("code",[s._v("Object.assign()")]),s._v("方法，将"),n("code",[s._v("x")]),s._v("属性和"),n("code",[s._v("y")]),s._v("属性添加到"),n("code",[s._v("Point")]),s._v("类的对象实例。")]),s._v(" "),n("p",[n("strong",[s._v("（2）为对象添加方法")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("Object.assign(SomeClass.prototype, {\n  someMethod(arg1, arg2) {\n    ···\n  },\n  anotherMethod() {\n    ···\n  }\n});\n\n// 等同于下面的写法\nSomeClass.prototype.someMethod = function (arg1, arg2) {\n  ···\n};\nSomeClass.prototype.anotherMethod = function () {\n  ···\n};\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br")])]),n("p",[s._v("上面代码使用了对象属性的简洁表示法，直接将两个函数放在大括号中，再使用"),n("code",[s._v("assign()")]),s._v("方法添加到"),n("code",[s._v("SomeClass.prototype")]),s._v("之中。")]),s._v(" "),n("p",[n("strong",[s._v("（3）克隆对象")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("function clone(origin) {\n  return Object.assign({}, origin);\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[s._v("上面代码将原始对象拷贝到一个空对象，就得到了原始对象的克隆。")]),s._v(" "),n("p",[s._v("不过，采用这种方法克隆，只能克隆原始对象自身的值，不能克隆它继承的值。如果想要保持继承链，可以采用下面的代码。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("function clone(origin) {\n  let originProto = Object.getPrototypeOf(origin);\n  return Object.assign(Object.create(originProto), origin);\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("p",[n("strong",[s._v("（4）合并多个对象")])]),s._v(" "),n("p",[s._v("将多个对象合并到某个对象。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("const merge =\n  (target, ...sources) => Object.assign(target, ...sources);\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[s._v("如果希望合并后返回一个新对象，可以改写上面函数，对一个空对象合并。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("const merge =\n  (...sources) => Object.assign({}, ...sources);\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[n("strong",[s._v("（5）为属性指定默认值")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("const DEFAULTS = {\n  logLevel: 0,\n  outputFormat: 'html'\n};\n\nfunction processContent(options) {\n  options = Object.assign({}, DEFAULTS, options);\n  console.log(options);\n  // ...\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br")])]),n("p",[s._v("上面代码中，"),n("code",[s._v("DEFAULTS")]),s._v("对象是默认值，"),n("code",[s._v("options")]),s._v("对象是用户提供的参数。"),n("code",[s._v("Object.assign()")]),s._v("方法将"),n("code",[s._v("DEFAULTS")]),s._v("和"),n("code",[s._v("options")]),s._v("合并成一个新对象，如果两者有同名属性，则"),n("code",[s._v("options")]),s._v("的属性值会覆盖"),n("code",[s._v("DEFAULTS")]),s._v("的属性值。")]),s._v(" "),n("p",[s._v("注意，由于存在浅拷贝的问题，"),n("code",[s._v("DEFAULTS")]),s._v("对象和"),n("code",[s._v("options")]),s._v("对象的所有属性的值，最好都是简单类型，不要指向另一个对象。否则，"),n("code",[s._v("DEFAULTS")]),s._v("对象的该属性很可能不起作用。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("const DEFAULTS = {\n  url: {\n    host: 'example.com',\n    port: 7070\n  },\n};\n\nprocessContent({ url: {port: 8000} })\n// {\n//   url: {port: 8000}\n// }\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br")])]),n("p",[s._v("上面代码的原意是将"),n("code",[s._v("url.port")]),s._v("改成 8000，"),n("code",[s._v("url.host")]),s._v("不变。实际结果却是"),n("code",[s._v("options.url")]),s._v("覆盖掉"),n("code",[s._v("DEFAULTS.url")]),s._v("，所以"),n("code",[s._v("url.host")]),s._v("就不存在了。")]),s._v(" "),n("h2",{attrs:{id:"object-getownpropertydescriptors"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#object-getownpropertydescriptors"}},[s._v("#")]),s._v(" Object.getOwnPropertyDescriptors()")]),s._v(" "),n("p",[s._v("ES5 的"),n("code",[s._v("Object.getOwnPropertyDescriptor()")]),s._v("方法会返回某个对象属性的描述对象（descriptor）。ES2017 引入了"),n("code",[s._v("Object.getOwnPropertyDescriptors()")]),s._v("方法，返回指定对象所有自身属性（非继承属性）的描述对象。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("const obj = {\n  foo: 123,\n  get bar() { return 'abc' }\n};\n\nObject.getOwnPropertyDescriptors(obj)\n// { foo:\n//    { value: 123,\n//      writable: true,\n//      enumerable: true,\n//      configurable: true },\n//   bar:\n//    { get: [Function: get bar],\n//      set: undefined,\n//      enumerable: true,\n//      configurable: true } }\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br")])]),n("p",[s._v("上面代码中，"),n("code",[s._v("Object.getOwnPropertyDescriptors()")]),s._v("方法返回一个对象，所有原对象的属性名都是该对象的属性名，对应的属性值就是该属性的描述对象。")]),s._v(" "),n("p",[s._v("该方法的实现非常容易。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("function getOwnPropertyDescriptors(obj) {\n  const result = {};\n  for (let key of Reflect.ownKeys(obj)) {\n    result[key] = Object.getOwnPropertyDescriptor(obj, key);\n  }\n  return result;\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("p",[s._v("该方法的引入目的，主要是为了解决"),n("code",[s._v("Object.assign()")]),s._v("无法正确拷贝"),n("code",[s._v("get")]),s._v("属性和"),n("code",[s._v("set")]),s._v("属性的问题。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("const source = {\n  set foo(value) {\n    console.log(value);\n  }\n};\n\nconst target1 = {};\nObject.assign(target1, source);\n\nObject.getOwnPropertyDescriptor(target1, 'foo')\n// { value: undefined,\n//   writable: true,\n//   enumerable: true,\n//   configurable: true }\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br")])]),n("p",[s._v("上面代码中，"),n("code",[s._v("source")]),s._v("对象的"),n("code",[s._v("foo")]),s._v("属性的值是一个赋值函数，"),n("code",[s._v("Object.assign")]),s._v("方法将这个属性拷贝给"),n("code",[s._v("target1")]),s._v("对象，结果该属性的值变成了"),n("code",[s._v("undefined")]),s._v("。这是因为"),n("code",[s._v("Object.assign")]),s._v("方法总是拷贝一个属性的值，而不会拷贝它背后的赋值方法或取值方法。")]),s._v(" "),n("p",[s._v("这时，"),n("code",[s._v("Object.getOwnPropertyDescriptors()")]),s._v("方法配合"),n("code",[s._v("Object.defineProperties()")]),s._v("方法，就可以实现正确拷贝。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("const source = {\n  set foo(value) {\n    console.log(value);\n  }\n};\n\nconst target2 = {};\nObject.defineProperties(target2, Object.getOwnPropertyDescriptors(source));\nObject.getOwnPropertyDescriptor(target2, 'foo')\n// { get: undefined,\n//   set: [Function: set foo],\n//   enumerable: true,\n//   configurable: true }\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br")])]),n("p",[s._v("上面代码中，两个对象合并的逻辑可以写成一个函数。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("const shallowMerge = (target, source) => Object.defineProperties(\n  target,\n  Object.getOwnPropertyDescriptors(source)\n);\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("p",[n("code",[s._v("Object.getOwnPropertyDescriptors()")]),s._v("方法的另一个用处，是配合"),n("code",[s._v("Object.create()")]),s._v("方法，将对象属性克隆到一个新对象。这属于浅拷贝。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("const clone = Object.create(Object.getPrototypeOf(obj),\n  Object.getOwnPropertyDescriptors(obj));\n\n// 或者\n\nconst shallowClone = (obj) => Object.create(\n  Object.getPrototypeOf(obj),\n  Object.getOwnPropertyDescriptors(obj)\n);\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br")])]),n("p",[s._v("上面代码会克隆对象"),n("code",[s._v("obj")]),s._v("。")]),s._v(" "),n("p",[s._v("另外，"),n("code",[s._v("Object.getOwnPropertyDescriptors()")]),s._v("方法可以实现一个对象继承另一个对象。以前，继承另一个对象，常常写成下面这样。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("const obj = {\n  __proto__: prot,\n  foo: 123,\n};\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("p",[s._v("ES6 规定"),n("code",[s._v("__proto__")]),s._v("只有浏览器要部署，其他环境不用部署。如果去除"),n("code",[s._v("__proto__")]),s._v("，上面代码就要改成下面这样。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("const obj = Object.create(prot);\nobj.foo = 123;\n\n// 或者\n\nconst obj = Object.assign(\n  Object.create(prot),\n  {\n    foo: 123,\n  }\n);\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br")])]),n("p",[s._v("有了"),n("code",[s._v("Object.getOwnPropertyDescriptors()")]),s._v("，我们就有了另一种写法。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("const obj = Object.create(\n  prot,\n  Object.getOwnPropertyDescriptors({\n    foo: 123,\n  })\n);\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("p",[n("code",[s._v("Object.getOwnPropertyDescriptors()")]),s._v("也可以用来实现 Mixin（混入）模式。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("let mix = (object) => ({\n  with: (...mixins) => mixins.reduce(\n    (c, mixin) => Object.create(\n      c, Object.getOwnPropertyDescriptors(mixin)\n    ), object)\n});\n\n// multiple mixins example\nlet a = {a: 'a'};\nlet b = {b: 'b'};\nlet c = {c: 'c'};\nlet d = mix(c).with(a, b);\n\nd.c // \"c\"\nd.b // \"b\"\nd.a // \"a\"\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br")])]),n("p",[s._v("上面代码返回一个新的对象"),n("code",[s._v("d")]),s._v("，代表了对象"),n("code",[s._v("a")]),s._v("和"),n("code",[s._v("b")]),s._v("被混入了对象"),n("code",[s._v("c")]),s._v("的操作。")]),s._v(" "),n("p",[s._v("出于完整性的考虑，"),n("code",[s._v("Object.getOwnPropertyDescriptors()")]),s._v("进入标准以后，以后还会新增"),n("code",[s._v("Reflect.getOwnPropertyDescriptors()")]),s._v("方法。")]),s._v(" "),n("h2",{attrs:{id:"proto-属性-object-setprototypeof-object-getprototypeof"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#proto-属性-object-setprototypeof-object-getprototypeof"}},[s._v("#")]),s._v(" "),n("code",[s._v("__proto__")]),s._v("属性，Object.setPrototypeOf()，Object.getPrototypeOf()")]),s._v(" "),n("p",[s._v("JavaScript 语言的对象继承是通过原型链实现的。ES6 提供了更多原型对象的操作方法。")]),s._v(" "),n("h3",{attrs:{id:"proto-属性"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#proto-属性"}},[s._v("#")]),s._v(" "),n("code",[s._v("__proto__")]),s._v("属性")]),s._v(" "),n("p",[n("code",[s._v("__proto__")]),s._v("属性（前后各两个下划线），用来读取或设置当前对象的原型对象（prototype）。目前，所有浏览器（包括 IE11）都部署了这个属性。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("// es5 的写法\nconst obj = {\n  method: function() { ... }\n};\nobj.__proto__ = someOtherObj;\n\n// es6 的写法\nvar obj = Object.create(someOtherObj);\nobj.method = function() { ... };\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br")])]),n("p",[s._v("该属性没有写入 ES6 的正文，而是写入了附录，原因是"),n("code",[s._v("__proto__")]),s._v("前后的双下划线，说明它本质上是一个内部属性，而不是一个正式的对外的 API，只是由于浏览器广泛支持，才被加入了 ES6。标准明确规定，只有浏览器必须部署这个属性，其他运行环境不一定需要部署，而且新的代码最好认为这个属性是不存在的。因此，无论从语义的角度，还是从兼容性的角度，都不要使用这个属性，而是使用下面的"),n("code",[s._v("Object.setPrototypeOf()")]),s._v("（写操作）、"),n("code",[s._v("Object.getPrototypeOf()")]),s._v("（读操作）、"),n("code",[s._v("Object.create()")]),s._v("（生成操作）代替。")]),s._v(" "),n("p",[s._v("实现上，"),n("code",[s._v("__proto__")]),s._v("调用的是"),n("code",[s._v("Object.prototype.__proto__")]),s._v("，具体实现如下。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("Object.defineProperty(Object.prototype, '__proto__', {\n  get() {\n    let _thisObj = Object(this);\n    return Object.getPrototypeOf(_thisObj);\n  },\n  set(proto) {\n    if (this === undefined || this === null) {\n      throw new TypeError();\n    }\n    if (!isObject(this)) {\n      return undefined;\n    }\n    if (!isObject(proto)) {\n      return undefined;\n    }\n    let status = Reflect.setPrototypeOf(this, proto);\n    if (!status) {\n      throw new TypeError();\n    }\n  },\n});\n\nfunction isObject(value) {\n  return Object(value) === value;\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br")])]),n("p",[s._v("如果一个对象本身部署了"),n("code",[s._v("__proto__")]),s._v("属性，该属性的值就是对象的原型。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("Object.getPrototypeOf({ __proto__: null })\n// null\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("h3",{attrs:{id:"object-setprototypeof"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#object-setprototypeof"}},[s._v("#")]),s._v(" Object.setPrototypeOf()")]),s._v(" "),n("p",[n("code",[s._v("Object.setPrototypeOf")]),s._v("方法的作用与"),n("code",[s._v("__proto__")]),s._v("相同，用来设置一个对象的原型对象（prototype），返回参数对象本身。它是 ES6 正式推荐的设置原型对象的方法。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("// 格式\nObject.setPrototypeOf(object, prototype)\n\n// 用法\nconst o = Object.setPrototypeOf({}, null);\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("p",[s._v("该方法等同于下面的函数。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("function setPrototypeOf(obj, proto) {\n  obj.__proto__ = proto;\n  return obj;\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("p",[s._v("下面是一个例子。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("let proto = {};\nlet obj = { x: 10 };\nObject.setPrototypeOf(obj, proto);\n\nproto.y = 20;\nproto.z = 40;\n\nobj.x // 10\nobj.y // 20\nobj.z // 40\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br")])]),n("p",[s._v("上面代码将"),n("code",[s._v("proto")]),s._v("对象设为"),n("code",[s._v("obj")]),s._v("对象的原型，所以从"),n("code",[s._v("obj")]),s._v("对象可以读取"),n("code",[s._v("proto")]),s._v("对象的属性。")]),s._v(" "),n("p",[s._v("如果第一个参数不是对象，会自动转为对象。但是由于返回的还是第一个参数，所以这个操作不会产生任何效果。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("Object.setPrototypeOf(1, {}) === 1 // true\nObject.setPrototypeOf('foo', {}) === 'foo' // true\nObject.setPrototypeOf(true, {}) === true // true\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[s._v("由于"),n("code",[s._v("undefined")]),s._v("和"),n("code",[s._v("null")]),s._v("无法转为对象，所以如果第一个参数是"),n("code",[s._v("undefined")]),s._v("或"),n("code",[s._v("null")]),s._v("，就会报错。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("Object.setPrototypeOf(undefined, {})\n// TypeError: Object.setPrototypeOf called on null or undefined\n\nObject.setPrototypeOf(null, {})\n// TypeError: Object.setPrototypeOf called on null or undefined\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("h3",{attrs:{id:"object-getprototypeof"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#object-getprototypeof"}},[s._v("#")]),s._v(" Object.getPrototypeOf()")]),s._v(" "),n("p",[s._v("该方法与"),n("code",[s._v("Object.setPrototypeOf")]),s._v("方法配套，用于读取一个对象的原型对象。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("Object.getPrototypeOf(obj);\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[s._v("下面是一个例子。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("function Rectangle() {\n  // ...\n}\n\nconst rec = new Rectangle();\n\nObject.getPrototypeOf(rec) === Rectangle.prototype\n// true\n\nObject.setPrototypeOf(rec, Object.prototype);\nObject.getPrototypeOf(rec) === Rectangle.prototype\n// false\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br")])]),n("p",[s._v("如果参数不是对象，会被自动转为对象。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("// 等同于 Object.getPrototypeOf(Number(1))\nObject.getPrototypeOf(1)\n// Number {[[PrimitiveValue]]: 0}\n\n// 等同于 Object.getPrototypeOf(String('foo'))\nObject.getPrototypeOf('foo')\n// String {length: 0, [[PrimitiveValue]]: \"\"}\n\n// 等同于 Object.getPrototypeOf(Boolean(true))\nObject.getPrototypeOf(true)\n// Boolean {[[PrimitiveValue]]: false}\n\nObject.getPrototypeOf(1) === Number.prototype // true\nObject.getPrototypeOf('foo') === String.prototype // true\nObject.getPrototypeOf(true) === Boolean.prototype // true\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br")])]),n("p",[s._v("如果参数是"),n("code",[s._v("undefined")]),s._v("或"),n("code",[s._v("null")]),s._v("，它们无法转为对象，所以会报错。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("Object.getPrototypeOf(null)\n// TypeError: Cannot convert undefined or null to object\n\nObject.getPrototypeOf(undefined)\n// TypeError: Cannot convert undefined or null to object\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("h2",{attrs:{id:"object-keys-object-values-object-entries"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#object-keys-object-values-object-entries"}},[s._v("#")]),s._v(" Object.keys()，Object.values()，Object.entries()")]),s._v(" "),n("h3",{attrs:{id:"object-keys"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#object-keys"}},[s._v("#")]),s._v(" Object.keys()")]),s._v(" "),n("p",[s._v("ES5 引入了"),n("code",[s._v("Object.keys")]),s._v("方法，返回一个数组，成员是参数对象自身的（不含继承的）所有可遍历（enumerable）属性的键名。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('var obj = { foo: \'bar\', baz: 42 };\nObject.keys(obj)\n// ["foo", "baz"]\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[s._v("ES2017 "),n("a",{attrs:{href:"https://github.com/tc39/proposal-object-values-entries",target:"_blank",rel:"noopener noreferrer"}},[s._v("引入"),n("OutboundLink")],1),s._v("了跟"),n("code",[s._v("Object.keys")]),s._v("配套的"),n("code",[s._v("Object.values")]),s._v("和"),n("code",[s._v("Object.entries")]),s._v("，作为遍历一个对象的补充手段，供"),n("code",[s._v("for...of")]),s._v("循环使用。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("let {keys, values, entries} = Object;\nlet obj = { a: 1, b: 2, c: 3 };\n\nfor (let key of keys(obj)) {\n  console.log(key); // 'a', 'b', 'c'\n}\n\nfor (let value of values(obj)) {\n  console.log(value); // 1, 2, 3\n}\n\nfor (let [key, value] of entries(obj)) {\n  console.log([key, value]); // ['a', 1], ['b', 2], ['c', 3]\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br")])]),n("h3",{attrs:{id:"object-values"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#object-values"}},[s._v("#")]),s._v(" Object.values()")]),s._v(" "),n("p",[n("code",[s._v("Object.values")]),s._v("方法返回一个数组，成员是参数对象自身的（不含继承的）所有可遍历（enumerable）属性的键值。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("const obj = { foo: 'bar', baz: 42 };\nObject.values(obj)\n// [\"bar\", 42]\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[s._v("返回数组的成员顺序，与本章的《属性的遍历》部分介绍的排列规则一致。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("const obj = { 100: 'a', 2: 'b', 7: 'c' };\nObject.values(obj)\n// [\"b\", \"c\", \"a\"]\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[s._v("上面代码中，属性名为数值的属性，是按照数值大小，从小到大遍历的，因此返回的顺序是"),n("code",[s._v("b")]),s._v("、"),n("code",[s._v("c")]),s._v("、"),n("code",[s._v("a")]),s._v("。")]),s._v(" "),n("p",[n("code",[s._v("Object.values")]),s._v("只返回对象自身的可遍历属性。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("const obj = Object.create({}, {p: {value: 42}});\nObject.values(obj) // []\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[s._v("上面代码中，"),n("code",[s._v("Object.create")]),s._v("方法的第二个参数添加的对象属性（属性"),n("code",[s._v("p")]),s._v("），如果不显式声明，默认是不可遍历的，因为"),n("code",[s._v("p")]),s._v("的属性描述对象的"),n("code",[s._v("enumerable")]),s._v("默认是"),n("code",[s._v("false")]),s._v("，"),n("code",[s._v("Object.values")]),s._v("不会返回这个属性。只要把"),n("code",[s._v("enumerable")]),s._v("改成"),n("code",[s._v("true")]),s._v("，"),n("code",[s._v("Object.values")]),s._v("就会返回属性"),n("code",[s._v("p")]),s._v("的值。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("const obj = Object.create({}, {p:\n  {\n    value: 42,\n    enumerable: true\n  }\n});\nObject.values(obj) // [42]\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("p",[n("code",[s._v("Object.values")]),s._v("会过滤属性名为 Symbol 值的属性。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("Object.values({ [Symbol()]: 123, foo: 'abc' });\n// ['abc']\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[s._v("如果"),n("code",[s._v("Object.values")]),s._v("方法的参数是一个字符串，会返回各个字符组成的一个数组。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("Object.values('foo')\n// ['f', 'o', 'o']\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[s._v("上面代码中，字符串会先转成一个类似数组的对象。字符串的每个字符，就是该对象的一个属性。因此，"),n("code",[s._v("Object.values")]),s._v("返回每个属性的键值，就是各个字符组成的一个数组。")]),s._v(" "),n("p",[s._v("如果参数不是对象，"),n("code",[s._v("Object.values")]),s._v("会先将其转为对象。由于数值和布尔值的包装对象，都不会为实例添加非继承的属性。所以，"),n("code",[s._v("Object.values")]),s._v("会返回空数组。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("Object.values(42) // []\nObject.values(true) // []\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("h3",{attrs:{id:"object-entries"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#object-entries"}},[s._v("#")]),s._v(" Object.entries()")]),s._v(" "),n("p",[n("code",[s._v("Object.entries()")]),s._v("方法返回一个数组，成员是参数对象自身的（不含继承的）所有可遍历（enumerable）属性的键值对数组。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('const obj = { foo: \'bar\', baz: 42 };\nObject.entries(obj)\n// [ ["foo", "bar"], ["baz", 42] ]\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[s._v("除了返回值不一样，该方法的行为与"),n("code",[s._v("Object.values")]),s._v("基本一致。")]),s._v(" "),n("p",[s._v("如果原对象的属性名是一个 Symbol 值，该属性会被忽略。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("Object.entries({ [Symbol()]: 123, foo: 'abc' });\n// [ [ 'foo', 'abc' ] ]\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[s._v("上面代码中，原对象有两个属性，"),n("code",[s._v("Object.entries")]),s._v("只输出属性名非 Symbol 值的属性。将来可能会有"),n("code",[s._v("Reflect.ownEntries()")]),s._v("方法，返回对象自身的所有属性。")]),s._v(" "),n("p",[n("code",[s._v("Object.entries")]),s._v("的基本用途是遍历对象的属性。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('let obj = { one: 1, two: 2 };\nfor (let [k, v] of Object.entries(obj)) {\n  console.log(\n    `${JSON.stringify(k)}: ${JSON.stringify(v)}`\n  );\n}\n// "one": 1\n// "two": 2\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br")])]),n("p",[n("code",[s._v("Object.entries")]),s._v("方法的另一个用处是，将对象转为真正的"),n("code",[s._v("Map")]),s._v("结构。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("const obj = { foo: 'bar', baz: 42 };\nconst map = new Map(Object.entries(obj));\nmap // Map { foo: \"bar\", baz: 42 }\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[s._v("自己实现"),n("code",[s._v("Object.entries")]),s._v("方法，非常简单。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("// Generator函数的版本\nfunction* entries(obj) {\n  for (let key of Object.keys(obj)) {\n    yield [key, obj[key]];\n  }\n}\n\n// 非Generator函数的版本\nfunction entries(obj) {\n  let arr = [];\n  for (let key of Object.keys(obj)) {\n    arr.push([key, obj[key]]);\n  }\n  return arr;\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br")])]),n("h2",{attrs:{id:"object-fromentries"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#object-fromentries"}},[s._v("#")]),s._v(" Object.fromEntries()")]),s._v(" "),n("p",[n("code",[s._v("Object.fromEntries()")]),s._v("方法是"),n("code",[s._v("Object.entries()")]),s._v("的逆操作，用于将一个键值对数组转为对象。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("Object.fromEntries([\n  ['foo', 'bar'],\n  ['baz', 42]\n])\n// { foo: \"bar\", baz: 42 }\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("p",[s._v("该方法的主要目的，是将键值对的数据结构还原为对象，因此特别适合将 Map 结构转为对象。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("// 例一\nconst entries = new Map([\n  ['foo', 'bar'],\n  ['baz', 42]\n]);\n\nObject.fromEntries(entries)\n// { foo: \"bar\", baz: 42 }\n\n// 例二\nconst map = new Map().set('foo', true).set('bar', false);\nObject.fromEntries(map)\n// { foo: true, bar: false }\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br")])]),n("p",[s._v("该方法的一个用处是配合"),n("code",[s._v("URLSearchParams")]),s._v("对象，将查询字符串转为对象。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('Object.fromEntries(new URLSearchParams(\'foo=bar&baz=qux\'))\n// { foo: "bar", baz: "qux" }\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("h2",{attrs:{id:"object-hasown"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#object-hasown"}},[s._v("#")]),s._v(" Object.hasOwn()")]),s._v(" "),n("p",[s._v("JavaScript 对象的属性分成两种：自身的属性和继承的属性。对象实例有一个"),n("code",[s._v("hasOwnProperty()")]),s._v("方法，可以判断某个属性是否为原生属性。ES2022 在"),n("code",[s._v("Object")]),s._v("对象上面新增了一个静态方法"),n("a",{attrs:{href:"https://github.com/tc39/proposal-accessible-object-hasownproperty",target:"_blank",rel:"noopener noreferrer"}},[n("code",[s._v("Object.hasOwn()")]),n("OutboundLink")],1),s._v("，也可以判断是否为自身的属性。")]),s._v(" "),n("p",[n("code",[s._v("Object.hasOwn()")]),s._v("可以接受两个参数，第一个是所要判断的对象，第二个是属性名。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("const foo = Object.create({ a: 123 });\nfoo.b = 456;\n\nObject.hasOwn(foo, 'a') // false\nObject.hasOwn(foo, 'b') // true\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("p",[s._v("上面示例中，对象"),n("code",[s._v("foo")]),s._v("的属性"),n("code",[s._v("a")]),s._v("是继承属性，属性"),n("code",[s._v("b")]),s._v("是原生属性。"),n("code",[s._v("Object.hasOwn()")]),s._v("对属性"),n("code",[s._v("a")]),s._v("返回"),n("code",[s._v("false")]),s._v("，对属性"),n("code",[s._v("b")]),s._v("返回"),n("code",[s._v("true")]),s._v("。")]),s._v(" "),n("p",[n("code",[s._v("Object.hasOwn()")]),s._v("的一个好处是，对于不继承"),n("code",[s._v("Object.prototype")]),s._v("的对象不会报错，而"),n("code",[s._v("hasOwnProperty()")]),s._v("是会报错的。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("const obj = Object.create(null);\n\nobj.hasOwnProperty('foo') // 报错\nObject.hasOwn(obj, 'foo') // false\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("p",[s._v("上面示例中，"),n("code",[s._v("Object.create(null)")]),s._v("返回的对象"),n("code",[s._v("obj")]),s._v("是没有原型的，不继承任何属性，这导致调用"),n("code",[s._v("obj.hasOwnProperty()")]),s._v("会报错，但是"),n("code",[s._v("Object.hasOwn()")]),s._v("就能正确处理这种情况。")]),s._v(" "),n("h3",{attrs:{id:"留言"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#留言"}},[s._v("#")]),s._v(" 留言")])])}),[],!1,null,null,null);e.default=a.exports}}]);