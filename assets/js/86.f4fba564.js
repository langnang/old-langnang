(window.webpackJsonp=window.webpackJsonp||[]).push([[86],{555:function(s,a,e){"use strict";e.r(a);var n=e(18),t=Object(n.a)({},(function(){var s=this,a=s.$createElement,e=s._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h1",{attrs:{id:"最新提案"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#最新提案"}},[s._v("#")]),s._v(" 最新提案")]),s._v(" "),e("ol",[e("li",[e("a",{attrs:{href:"https://es6.ruanyifeng.com/#docs/proposals#do%20%E8%A1%A8%E8%BE%BE%E5%BC%8F",target:"_blank",rel:"noopener noreferrer"}},[s._v("do 表达式"),e("OutboundLink")],1)]),s._v(" "),e("li",[e("a",{attrs:{href:"https://es6.ruanyifeng.com/#docs/proposals#throw%20%E8%A1%A8%E8%BE%BE%E5%BC%8F",target:"_blank",rel:"noopener noreferrer"}},[s._v("throw 表达式"),e("OutboundLink")],1)]),s._v(" "),e("li",[e("a",{attrs:{href:"https://es6.ruanyifeng.com/#docs/proposals#%E5%87%BD%E6%95%B0%E7%9A%84%E9%83%A8%E5%88%86%E6%89%A7%E8%A1%8C",target:"_blank",rel:"noopener noreferrer"}},[s._v("函数的部分执行"),e("OutboundLink")],1)]),s._v(" "),e("li",[e("a",{attrs:{href:"https://es6.ruanyifeng.com/#docs/proposals#%E7%AE%A1%E9%81%93%E8%BF%90%E7%AE%97%E7%AC%A6",target:"_blank",rel:"noopener noreferrer"}},[s._v("管道运算符"),e("OutboundLink")],1)]),s._v(" "),e("li",[e("a",{attrs:{href:"https://es6.ruanyifeng.com/#docs/proposals#Math.signbit()",target:"_blank",rel:"noopener noreferrer"}},[s._v("Math.signbit()"),e("OutboundLink")],1)]),s._v(" "),e("li",[e("a",{attrs:{href:"https://es6.ruanyifeng.com/#docs/proposals#%E5%8F%8C%E5%86%92%E5%8F%B7%E8%BF%90%E7%AE%97%E7%AC%A6",target:"_blank",rel:"noopener noreferrer"}},[s._v("双冒号运算符"),e("OutboundLink")],1)]),s._v(" "),e("li",[e("a",{attrs:{href:"https://es6.ruanyifeng.com/#docs/proposals#Realm%20API",target:"_blank",rel:"noopener noreferrer"}},[s._v("Realm API"),e("OutboundLink")],1)]),s._v(" "),e("li",[e("a",{attrs:{href:"https://es6.ruanyifeng.com/#docs/proposals##!%E5%91%BD%E4%BB%A4",target:"_blank",rel:"noopener noreferrer"}},[s._v("#!命令"),e("OutboundLink")],1)]),s._v(" "),e("li",[e("a",{attrs:{href:"https://es6.ruanyifeng.com/#docs/proposals#import.meta",target:"_blank",rel:"noopener noreferrer"}},[s._v("import.meta"),e("OutboundLink")],1)]),s._v(" "),e("li",[e("a",{attrs:{href:"https://es6.ruanyifeng.com/#docs/proposals#JSON%20%E6%A8%A1%E5%9D%97",target:"_blank",rel:"noopener noreferrer"}},[s._v("JSON 模块"),e("OutboundLink")],1)])]),s._v(" "),e("p",[s._v("本章介绍一些尚未进入标准、但很有希望的最新提案。")]),s._v(" "),e("h2",{attrs:{id:"do-表达式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#do-表达式"}},[s._v("#")]),s._v(" do 表达式")]),s._v(" "),e("p",[s._v("本质上，块级作用域是一个语句，将多个操作封装在一起，没有返回值。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("{\n  let t = f();\n  t = t * t + 1;\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])]),e("p",[s._v("上面代码中，块级作用域将两个语句封装在一起。但是，在块级作用域以外，没有办法得到"),e("code",[s._v("t")]),s._v("的值，因为块级作用域不返回值，除非"),e("code",[s._v("t")]),s._v("是全局变量。")]),s._v(" "),e("p",[s._v("现在有一个"),e("a",{attrs:{href:"https://github.com/tc39/proposal-do-expressions",target:"_blank",rel:"noopener noreferrer"}},[s._v("提案"),e("OutboundLink")],1),s._v("，使得块级作用域可以变为表达式，也就是说可以返回值，办法就是在块级作用域之前加上"),e("code",[s._v("do")]),s._v("，使它变为"),e("code",[s._v("do")]),s._v("表达式，然后就会返回内部最后执行的表达式的值。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("let x = do {\n  let t = f();\n  t * t + 1;\n};\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])]),e("p",[s._v("上面代码中，变量"),e("code",[s._v("x")]),s._v("会得到整个块级作用域的返回值（"),e("code",[s._v("t * t + 1")]),s._v("）。")]),s._v(" "),e("p",[e("code",[s._v("do")]),s._v("表达式的逻辑非常简单：封装的是什么，就会返回什么。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("// 等同于 <表达式>\ndo { <表达式>; }\n\n// 等同于 <语句>\ndo { <语句> }\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("p",[e("code",[s._v("do")]),s._v("表达式的好处是可以封装多个语句，让程序更加模块化，就像乐高积木那样一块块拼装起来。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("let x = do {\n  if (foo()) { f() }\n  else if (bar()) { g() }\n  else { h() }\n};\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("p",[s._v("上面代码的本质，就是根据函数"),e("code",[s._v("foo")]),s._v("的执行结果，调用不同的函数，将返回结果赋给变量"),e("code",[s._v("x")]),s._v("。使用"),e("code",[s._v("do")]),s._v("表达式，就将这个操作的意图表达得非常简洁清晰。而且，"),e("code",[s._v("do")]),s._v("块级作用域提供了单独的作用域，内部操作可以与全局作用域隔绝。")]),s._v(" "),e("p",[s._v("值得一提的是，"),e("code",[s._v("do")]),s._v("表达式在 JSX 语法中非常好用。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("return (\n  <nav>\n    <Home />\n    {\n      do {\n        if (loggedIn) {\n          <LogoutButton />\n        } else {\n          <LoginButton />\n        }\n      }\n    }\n  </nav>\n)\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br")])]),e("p",[s._v("上面代码中，如果不用"),e("code",[s._v("do")]),s._v("表达式，就只能用三元判断运算符（"),e("code",[s._v("?:")]),s._v("）。那样的话，一旦判断逻辑复杂，代码就会变得很不易读。")]),s._v(" "),e("h2",{attrs:{id:"throw-表达式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#throw-表达式"}},[s._v("#")]),s._v(" throw 表达式")]),s._v(" "),e("p",[s._v("JavaScript 语法规定"),e("code",[s._v("throw")]),s._v("是一个命令，用来抛出错误，不能用于表达式之中。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("// 报错\nconsole.log(throw new Error());\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("p",[s._v("上面代码中，"),e("code",[s._v("console.log")]),s._v("的参数必须是一个表达式，如果是一个"),e("code",[s._v("throw")]),s._v("语句就会报错。")]),s._v(" "),e("p",[s._v("现在有一个"),e("a",{attrs:{href:"https://github.com/tc39/proposal-throw-expressions",target:"_blank",rel:"noopener noreferrer"}},[s._v("提案"),e("OutboundLink")],1),s._v("，允许"),e("code",[s._v("throw")]),s._v("用于表达式。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('// 参数的默认值\nfunction save(filename = throw new TypeError("Argument required")) {\n}\n\n// 箭头函数的返回值\nlint(ast, {\n  with: () => throw new Error("avoid using \'with\' statements.")\n});\n\n// 条件表达式\nfunction getEncoder(encoding) {\n  const encoder = encoding === "utf8" ?\n    new UTF8Encoder() :\n    encoding === "utf16le" ?\n      new UTF16Encoder(false) :\n      encoding === "utf16be" ?\n        new UTF16Encoder(true) :\n        throw new Error("Unsupported encoding");\n}\n\n// 逻辑表达式\nclass Product {\n  get id() {\n    return this._id;\n  }\n  set id(value) {\n    this._id = value || throw new Error("Invalid value");\n  }\n}\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br")])]),e("p",[s._v("上面代码中，"),e("code",[s._v("throw")]),s._v("都出现在表达式里面。")]),s._v(" "),e("p",[s._v("语法上，"),e("code",[s._v("throw")]),s._v("表达式里面的"),e("code",[s._v("throw")]),s._v("不再是一个命令，而是一个运算符。为了避免与"),e("code",[s._v("throw")]),s._v("命令混淆，规定"),e("code",[s._v("throw")]),s._v("出现在行首，一律解释为"),e("code",[s._v("throw")]),s._v("语句，而不是"),e("code",[s._v("throw")]),s._v("表达式。")]),s._v(" "),e("h2",{attrs:{id:"函数的部分执行"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#函数的部分执行"}},[s._v("#")]),s._v(" 函数的部分执行")]),s._v(" "),e("h3",{attrs:{id:"语法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#语法"}},[s._v("#")]),s._v(" 语法")]),s._v(" "),e("p",[s._v("多参数的函数有时需要绑定其中的一个或多个参数，然后返回一个新函数。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("function add(x, y) { return x + y; }\nfunction add7(x) { return x + 7; }\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("p",[s._v("上面代码中，"),e("code",[s._v("add7")]),s._v("函数其实是"),e("code",[s._v("add")]),s._v("函数的一个特殊版本，通过将一个参数绑定为"),e("code",[s._v("7")]),s._v("，就可以从"),e("code",[s._v("add")]),s._v("得到"),e("code",[s._v("add7")]),s._v("。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("// bind 方法\nconst add7 = add.bind(null, 7);\n\n// 箭头函数\nconst add7 = x => add(x, 7);\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("p",[s._v("上面两种写法都有些冗余。其中，"),e("code",[s._v("bind")]),s._v("方法的局限更加明显，它必须提供"),e("code",[s._v("this")]),s._v("，并且只能从前到后一个个绑定参数，无法只绑定非头部的参数。")]),s._v(" "),e("p",[s._v("现在有一个"),e("a",{attrs:{href:"https://github.com/tc39/proposal-partial-application",target:"_blank",rel:"noopener noreferrer"}},[s._v("提案"),e("OutboundLink")],1),s._v("，使得绑定参数并返回一个新函数更加容易。这叫做函数的部分执行（partial application）。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("const add = (x, y) => x + y;\nconst addOne = add(1, ?);\n\nconst maxGreaterThanZero = Math.max(0, ...);\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])]),e("p",[s._v("根据新提案，"),e("code",[s._v("?")]),s._v("是单个参数的占位符，"),e("code",[s._v("...")]),s._v("是多个参数的占位符。以下的形式都属于函数的部分执行。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("f(x, ?)\nf(x, ...)\nf(?, x)\nf(..., x)\nf(?, x, ?)\nf(..., x, ...)\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br")])]),e("p",[e("code",[s._v("?")]),s._v("和"),e("code",[s._v("...")]),s._v("只能出现在函数的调用之中，并且会返回一个新函数。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("const g = f(?, 1, ...);\n// 等同于\nconst g = (x, ...y) => f(x, 1, ...y);\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("p",[s._v("函数的部分执行，也可以用于对象的方法。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("let obj = {\n  f(x, y) { return x + y; },\n};\n\nconst g = obj.f(?, 3);\ng(1) // 4\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br")])]),e("h3",{attrs:{id:"注意点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#注意点"}},[s._v("#")]),s._v(" 注意点")]),s._v(" "),e("p",[s._v("函数的部分执行有一些特别注意的地方。")]),s._v(" "),e("p",[s._v("（1）函数的部分执行是基于原函数的。如果原函数发生变化，部分执行生成的新函数也会立即反映这种变化。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("let f = (x, y) => x + y;\n\nconst g = f(?, 3);\ng(1); // 4\n\n// 替换函数 f\nf = (x, y) => x * y;\n\ng(1); // 3\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br")])]),e("p",[s._v("上面代码中，定义了函数的部分执行以后，更换原函数会立即影响到新函数。")]),s._v(" "),e("p",[s._v("（2）如果预先提供的那个值是一个表达式，那么这个表达式并不会在定义时求值，而是在每次调用时求值。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("let a = 3;\nconst f = (x, y) => x + y;\n\nconst g = f(?, a);\ng(1); // 4\n\n// 改变 a 的值\na = 10;\ng(1); // 11\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br")])]),e("p",[s._v("上面代码中，预先提供的参数是变量"),e("code",[s._v("a")]),s._v("，那么每次调用函数"),e("code",[s._v("g")]),s._v("的时候，才会对"),e("code",[s._v("a")]),s._v("进行求值。")]),s._v(" "),e("p",[s._v("（3）如果新函数的参数多于占位符的数量，那么多余的参数将被忽略。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("const f = (x, ...y) => [x, ...y];\nconst g = f(?, 1);\ng(2, 3, 4); // [2, 1]\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("p",[s._v("上面代码中，函数"),e("code",[s._v("g")]),s._v("只有一个占位符，也就意味着它只能接受一个参数，多余的参数都会被忽略。")]),s._v(" "),e("p",[s._v("写成下面这样，多余的参数就没有问题。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("const f = (x, ...y) => [x, ...y];\nconst g = f(?, 1, ...);\ng(2, 3, 4); // [2, 1, 3, 4];\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("p",[s._v("（4）"),e("code",[s._v("...")]),s._v("只会被采集一次，如果函数的部分执行使用了多个"),e("code",[s._v("...")]),s._v("，那么每个"),e("code",[s._v("...")]),s._v("的值都将相同。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("const f = (...x) => x;\nconst g = f(..., 9, ...);\ng(1, 2, 3); // [1, 2, 3, 9, 1, 2, 3]\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("p",[s._v("上面代码中，"),e("code",[s._v("g")]),s._v("定义了两个"),e("code",[s._v("...")]),s._v("占位符，真正执行的时候，它们的值是一样的。")]),s._v(" "),e("h2",{attrs:{id:"管道运算符"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#管道运算符"}},[s._v("#")]),s._v(" 管道运算符")]),s._v(" "),e("p",[s._v("Unix 操作系统有一个管道机制（pipeline），可以把前一个操作的值传给后一个操作。这个机制非常有用，使得简单的操作可以组合成为复杂的操作。许多语言都有管道的实现，现在有一个"),e("a",{attrs:{href:"https://github.com/tc39/proposal-pipeline-operator",target:"_blank",rel:"noopener noreferrer"}},[s._v("提案"),e("OutboundLink")],1),s._v("，让 JavaScript 也拥有管道机制。")]),s._v(" "),e("p",[s._v("JavaScript 的管道是一个运算符，写作"),e("code",[s._v("|>")]),s._v("。它的左边是一个表达式，右边是一个函数。管道运算符把左边表达式的值，传入右边的函数进行求值。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("x |> f\n// 等同于\nf(x)\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("p",[s._v("管道运算符最大的好处，就是可以把嵌套的函数，写成从左到右的链式表达式。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("function doubleSay (str) {\n  return str + \", \" + str;\n}\n\nfunction capitalize (str) {\n  return str[0].toUpperCase() + str.substring(1);\n}\n\nfunction exclaim (str) {\n  return str + '!';\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br")])]),e("p",[s._v("上面是三个简单的函数。如果要嵌套执行，传统的写法和管道的写法分别如下。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("// 传统的写法\nexclaim(capitalize(doubleSay('hello')))\n// \"Hello, hello!\"\n\n// 管道的写法\n'hello'\n  |> doubleSay\n  |> capitalize\n  |> exclaim\n// \"Hello, hello!\"\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br")])]),e("p",[s._v("管道运算符只能传递一个值，这意味着它右边的函数必须是一个单参数函数。如果是多参数函数，就必须进行柯里化，改成单参数的版本。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("function double (x) { return x + x; }\nfunction add (x, y) { return x + y; }\n\nlet person = { score: 25 };\nperson.score\n  |> double\n  |> (_ => add(7, _))\n// 57\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br")])]),e("p",[s._v("上面代码中，"),e("code",[s._v("add")]),s._v("函数需要两个参数。但是，管道运算符只能传入一个值，因此需要事先提供另一个参数，并将其改成单参数的箭头函数"),e("code",[s._v("_ => add(7, _)")]),s._v("。这个函数里面的下划线并没有特别的含义，可以用其他符号代替，使用下划线只是因为，它能够形象地表示这里是占位符。")]),s._v(" "),e("p",[s._v("管道运算符对于"),e("code",[s._v("await")]),s._v("函数也适用。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("x |> await f\n// 等同于\nawait f(x)\n\nconst userAge = userId |> await fetchUserById |> getAgeFromUser;\n// 等同于\nconst userAge = getAgeFromUser(await fetchUserById(userId));\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br")])]),e("h2",{attrs:{id:"math-signbit"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#math-signbit"}},[s._v("#")]),s._v(" Math.signbit()")]),s._v(" "),e("p",[e("code",[s._v("Math.sign()")]),s._v("用来判断一个值的正负，但是如果参数是"),e("code",[s._v("-0")]),s._v("，它会返回"),e("code",[s._v("-0")]),s._v("。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("Math.sign(-0) // -0\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("这导致对于判断符号位的正负，"),e("code",[s._v("Math.sign()")]),s._v("不是很有用。JavaScript 内部使用 64 位浮点数（国际标准 IEEE 754）表示数值，IEEE 754 规定第一位是符号位，"),e("code",[s._v("0")]),s._v("表示正数，"),e("code",[s._v("1")]),s._v("表示负数。所以会有两种零，"),e("code",[s._v("+0")]),s._v("是符号位为"),e("code",[s._v("0")]),s._v("时的零值，"),e("code",[s._v("-0")]),s._v("是符号位为"),e("code",[s._v("1")]),s._v("时的零值。实际编程中，判断一个值是"),e("code",[s._v("+0")]),s._v("还是"),e("code",[s._v("-0")]),s._v("非常麻烦，因为它们是相等的。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("+0 === -0 // true\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("目前，有一个"),e("a",{attrs:{href:"https://jfbastien.github.io/papers/Math.signbit.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("提案"),e("OutboundLink")],1),s._v("，引入了"),e("code",[s._v("Math.signbit()")]),s._v("方法判断一个数的符号位是否设置了。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("Math.signbit(2) //false\nMath.signbit(-2) //true\nMath.signbit(0) //false\nMath.signbit(-0) //true\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])]),e("p",[s._v("可以看到，该方法正确返回了"),e("code",[s._v("-0")]),s._v("的符号位是设置了的。")]),s._v(" "),e("p",[s._v("该方法的算法如下。")]),s._v(" "),e("ul",[e("li",[s._v("如果参数是"),e("code",[s._v("NaN")]),s._v("，返回"),e("code",[s._v("false")])]),s._v(" "),e("li",[s._v("如果参数是"),e("code",[s._v("-0")]),s._v("，返回"),e("code",[s._v("true")])]),s._v(" "),e("li",[s._v("如果参数是负值，返回"),e("code",[s._v("true")])]),s._v(" "),e("li",[s._v("其他情况返回"),e("code",[s._v("false")])])]),s._v(" "),e("h2",{attrs:{id:"双冒号运算符"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#双冒号运算符"}},[s._v("#")]),s._v(" 双冒号运算符")]),s._v(" "),e("p",[s._v("箭头函数可以绑定"),e("code",[s._v("this")]),s._v("对象，大大减少了显式绑定"),e("code",[s._v("this")]),s._v("对象的写法（"),e("code",[s._v("call")]),s._v("、"),e("code",[s._v("apply")]),s._v("、"),e("code",[s._v("bind")]),s._v("）。但是，箭头函数并不适用于所有场合，所以现在有一个"),e("a",{attrs:{href:"https://github.com/zenparsing/es-function-bind",target:"_blank",rel:"noopener noreferrer"}},[s._v("提案"),e("OutboundLink")],1),s._v("，提出了“函数绑定”（function bind）运算符，用来取代"),e("code",[s._v("call")]),s._v("、"),e("code",[s._v("apply")]),s._v("、"),e("code",[s._v("bind")]),s._v("调用。")]),s._v(" "),e("p",[s._v("函数绑定运算符是并排的两个冒号（"),e("code",[s._v("::")]),s._v("），双冒号左边是一个对象，右边是一个函数。该运算符会自动将左边的对象，作为上下文环境（即"),e("code",[s._v("this")]),s._v("对象），绑定到右边的函数上面。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("foo::bar;\n// 等同于\nbar.bind(foo);\n\nfoo::bar(...arguments);\n// 等同于\nbar.apply(foo, arguments);\n\nconst hasOwnProperty = Object.prototype.hasOwnProperty;\nfunction hasOwn(obj, key) {\n  return obj::hasOwnProperty(key);\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br")])]),e("p",[s._v("如果双冒号左边为空，右边是一个对象的方法，则等于将该方法绑定在该对象上面。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("var method = obj::obj.foo;\n// 等同于\nvar method = ::obj.foo;\n\nlet log = ::console.log;\n// 等同于\nvar log = console.log.bind(console);\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br")])]),e("p",[s._v("如果双冒号运算符的运算结果，还是一个对象，就可以采用链式写法。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('import { map, takeWhile, forEach } from "iterlib";\n\ngetPlayers()\n::map(x => x.character())\n::takeWhile(x => x.strength > 100)\n::forEach(x => console.log(x));\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br")])]),e("h2",{attrs:{id:"realm-api"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#realm-api"}},[s._v("#")]),s._v(" Realm API")]),s._v(" "),e("p",[e("a",{attrs:{href:"https://github.com/tc39/proposal-realms",target:"_blank",rel:"noopener noreferrer"}},[s._v("Realm API"),e("OutboundLink")],1),s._v(" 提供沙箱功能（sandbox），允许隔离代码，防止那些被隔离的代码拿到全局对象。")]),s._v(" "),e("p",[s._v("以前，经常使用"),e("code",[s._v("<iframe>")]),s._v("作为沙箱。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("const globalOne = window;\nlet iframe = document.createElement('iframe');\ndocument.body.appendChild(iframe);\nconst globalTwo = iframe.contentWindow;\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])]),e("p",[s._v("上面代码中，"),e("code",[s._v("<iframe>")]),s._v("的全局对象是独立的（"),e("code",[s._v("iframe.contentWindow")]),s._v("）。Realm API 可以取代这个功能。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("const globalOne = window;\nconst globalTwo = new Realm().global;\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("p",[s._v("上面代码中，"),e("code",[s._v("Realm API")]),s._v("单独提供了一个全局对象"),e("code",[s._v("new Realm().global")]),s._v("。")]),s._v(" "),e("p",[s._v("Realm API 提供一个"),e("code",[s._v("Realm()")]),s._v("构造函数，用来生成一个 Realm 对象。该对象的"),e("code",[s._v("global")]),s._v("属性指向一个新的顶层对象，这个顶层对象跟原始的顶层对象类似。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("const globalOne = window;\nconst globalTwo = new Realm().global;\n\nglobalOne.evaluate('1 + 2') // 3\nglobalTwo.evaluate('1 + 2') // 3\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("p",[s._v("上面代码中，Realm 生成的顶层对象的"),e("code",[s._v("evaluate()")]),s._v("方法，可以运行代码。")]),s._v(" "),e("p",[s._v("下面的代码可以证明，Realm 顶层对象与原始顶层对象是两个对象。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("let a1 = globalOne.evaluate('[1,2,3]');\nlet a2 = globalTwo.evaluate('[1,2,3]');\na1.prototype === a2.prototype; // false\na1 instanceof globalTwo.Array; // false\na2 instanceof globalOne.Array; // false\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("p",[s._v("上面代码中，Realm 沙箱里面的数组的原型对象，跟原始环境里面的数组是不一样的。")]),s._v(" "),e("p",[s._v("Realm 沙箱里面只能运行 ECMAScript 语法提供的 API，不能运行宿主环境提供的 API。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("globalTwo.evaluate('console.log(1)')\n// throw an error: console is undefined\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("p",[s._v("上面代码中，Realm 沙箱里面没有"),e("code",[s._v("console")]),s._v("对象，导致报错。因为"),e("code",[s._v("console")]),s._v("不是语法标准，是宿主环境提供的。")]),s._v(" "),e("p",[s._v("如果要解决这个问题，可以使用下面的代码。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("globalTwo.console = globalOne.console;\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[e("code",[s._v("Realm()")]),s._v("构造函数可以接受一个参数对象，该参数对象的"),e("code",[s._v("intrinsics")]),s._v("属性可以指定 Realm 沙箱继承原始顶层对象的方法。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("const r1 = new Realm();\nr1.global === this;\nr1.global.JSON === JSON; // false\n\nconst r2 = new Realm({ intrinsics: 'inherit' });\nr2.global === this; // false\nr2.global.JSON === JSON; // true\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br")])]),e("p",[s._v("上面代码中，正常情况下，沙箱的"),e("code",[s._v("JSON")]),s._v("方法不同于原始的"),e("code",[s._v("JSON")]),s._v("对象。但是，"),e("code",[s._v("Realm()")]),s._v("构造函数接受"),e("code",[s._v("{ intrinsics: 'inherit' }")]),s._v("作为参数以后，就会继承原始顶层对象的方法。")]),s._v(" "),e("p",[s._v("用户可以自己定义"),e("code",[s._v("Realm")]),s._v("的子类，用来定制自己的沙箱。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("class FakeWindow extends Realm {\n  init() {\n    super.init();\n    let global = this.global;\n\n    global.document = new FakeDocument(...);\n    global.alert = new Proxy(fakeAlert, { ... });\n    // ...\n  }\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br")])]),e("p",[s._v("上面代码中，"),e("code",[s._v("FakeWindow")]),s._v("模拟了一个假的顶层对象"),e("code",[s._v("window")]),s._v("。")]),s._v(" "),e("h2",{attrs:{id:"命令"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#命令"}},[s._v("#")]),s._v(" "),e("code",[s._v("#!")]),s._v("命令")]),s._v(" "),e("p",[s._v("Unix 的命令行脚本都支持"),e("code",[s._v("#!")]),s._v("命令，又称为 Shebang 或 Hashbang。这个命令放在脚本的第一行，用来指定脚本的执行器。")]),s._v(" "),e("p",[s._v("比如 Bash 脚本的第一行。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("#!/bin/sh\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("Python 脚本的第一行。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("#!/usr/bin/env python\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("现在有一个"),e("a",{attrs:{href:"https://github.com/tc39/proposal-hashbang",target:"_blank",rel:"noopener noreferrer"}},[s._v("提案"),e("OutboundLink")],1),s._v("，为 JavaScript 脚本引入了"),e("code",[s._v("#!")]),s._v("命令，写在脚本文件或者模块文件的第一行。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("// 写在脚本文件第一行\n#!/usr/bin/env node\n'use strict';\nconsole.log(1);\n\n// 写在模块文件第一行\n#!/usr/bin/env node\nexport {};\nconsole.log(1);\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br")])]),e("p",[s._v("有了这一行以后，Unix 命令行就可以直接执行脚本。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("# 以前执行脚本的方式\n$ node hello.js\n\n# hashbang 的方式\n$ ./hello.js\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("p",[s._v("对于 JavaScript 引擎来说，会把"),e("code",[s._v("#!")]),s._v("理解成注释，忽略掉这一行。")]),s._v(" "),e("p",[s._v("开发者使用一个模块时，有时需要知道模板本身的一些信息（比如模块的路径）。现在有一个"),e("a",{attrs:{href:"https://github.com/tc39/proposal-import-meta",target:"_blank",rel:"noopener noreferrer"}},[s._v("提案"),e("OutboundLink")],1),s._v("，为 import 命令添加了一个元属性"),e("code",[s._v("import.meta")]),s._v("，返回当前模块的元信息。")]),s._v(" "),e("p",[e("code",[s._v("import.meta")]),s._v("只能在模块内部使用，如果在模块外部使用会报错。")]),s._v(" "),e("p",[s._v("这个属性返回一个对象，该对象的各种属性就是当前运行的脚本的元信息。具体包含哪些属性，标准没有规定，由各个运行环境自行决定。一般来说，"),e("code",[s._v("import.meta")]),s._v("至少会有下面两个属性。")]),s._v(" "),e("p",[e("strong",[s._v("（1）import.meta.url")])]),s._v(" "),e("p",[e("code",[s._v("import.meta.url")]),s._v("返回当前模块的 URL 路径。举例来说，当前模块主文件的路径是"),e("code",[s._v("https://foo.com/main.js")]),s._v("，"),e("code",[s._v("import.meta.url")]),s._v("就返回这个路径。如果模块里面还有一个数据文件"),e("code",[s._v("data.txt")]),s._v("，那么就可以用下面的代码，获取这个数据文件的路径。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("new URL('data.txt', import.meta.url)\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("注意，Node.js 环境中，"),e("code",[s._v("import.meta.url")]),s._v("返回的总是本地路径，即是"),e("code",[s._v("file:URL")]),s._v("协议的字符串，比如"),e("code",[s._v("file:///home/user/foo.js")]),s._v("。")]),s._v(" "),e("p",[e("strong",[s._v("（2）import.meta.scriptElement")])]),s._v(" "),e("p",[e("code",[s._v("import.meta.scriptElement")]),s._v("是浏览器特有的元属性，返回加载模块的那个"),e("code",[s._v("<script>")]),s._v("元素，相当于"),e("code",[s._v("document.currentScript")]),s._v("属性。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('// HTML 代码为\n// <script type="module" src="my-module.js" data-foo="abc"><\/script>\n\n// my-module.js 内部执行下面的代码\nimport.meta.scriptElement.dataset.foo\n// "abc"\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br")])]),e("h2",{attrs:{id:"json-模块"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#json-模块"}},[s._v("#")]),s._v(" JSON 模块")]),s._v(" "),e("p",[s._v("import 命令目前只能用于加载 ES 模块，现在有一个"),e("a",{attrs:{href:"https://github.com/tc39/proposal-json-modules",target:"_blank",rel:"noopener noreferrer"}},[s._v("提案"),e("OutboundLink")],1),s._v("，允许加载 JSON 模块。")]),s._v(" "),e("p",[s._v("假定有一个 JSON 模块文件"),e("code",[s._v("config.json")]),s._v("。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('{\n  "appName": "My App"\n}\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("p",[s._v("目前，只能使用"),e("code",[s._v("fetch()")]),s._v("加载 JSON 模块。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("const response = await fetch('./config.json');\nconst json = await response.json();\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("p",[s._v("import 命令能够直接加载 JSON 模块以后，就可以像下面这样写。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("import configData from './config.json' assert { type: \"json\" };\nconsole.log(configData.appName);\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("p",[s._v("上面示例中，整个 JSON 对象被导入为"),e("code",[s._v("configData")]),s._v("对象，然后就可以从该对象获取 JSON 数据。")]),s._v(" "),e("p",[e("code",[s._v("import")]),s._v("命令导入 JSON 模块时，命令结尾的"),e("code",[s._v('assert {type: "json"}')]),s._v("不可缺少。这叫做导入断言，用来告诉 JavaScript 引擎，现在加载的是 JSON 模块。你可能会问，为什么不通过"),e("code",[s._v(".json")]),s._v("后缀名判断呢？因为浏览器的传统是不通过后缀名判断文件类型，标准委员会希望遵循这种做法，这样也可以避免一些安全问题。")]),s._v(" "),e("p",[s._v("导入断言是 JavaScript 导入其他格式模块的标准写法，JSON 模块将是第一个使用这种语法导入的模块。以后，还会支持导入 CSS 模块、HTML 模块等等。")]),s._v(" "),e("p",[s._v("动态加载模块的"),e("code",[s._v("import()")]),s._v("函数也支持加载 JSON 模块。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("import('./config.json', { assert: { type: 'json' } })\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("脚本加载 JSON 模块以后，还可以再用 export 命令输出。这时，可以将 export 和 import 结合成一个语句。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("export { config } from './config.json' assert { type: 'json' };\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("h3",{attrs:{id:"留言"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#留言"}},[s._v("#")]),s._v(" 留言")])])}),[],!1,null,null,null);a.default=t.exports}}]);