(window.webpackJsonp=window.webpackJsonp||[]).push([[84],{553:function(n,e,s){"use strict";s.r(e);var a=s(18),t=Object(a.a)({},(function(){var n=this,e=n.$createElement,s=n._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[s("h1",{attrs:{id:"异步遍历器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#异步遍历器"}},[n._v("#")]),n._v(" 异步遍历器")]),n._v(" "),s("ol",[s("li",[s("a",{attrs:{href:"https://es6.ruanyifeng.com/#docs/async-iterator#%E5%90%8C%E6%AD%A5%E9%81%8D%E5%8E%86%E5%99%A8%E7%9A%84%E9%97%AE%E9%A2%98",target:"_blank",rel:"noopener noreferrer"}},[n._v("同步遍历器的问题"),s("OutboundLink")],1)]),n._v(" "),s("li",[s("a",{attrs:{href:"https://es6.ruanyifeng.com/#docs/async-iterator#%E5%BC%82%E6%AD%A5%E9%81%8D%E5%8E%86%E7%9A%84%E6%8E%A5%E5%8F%A3",target:"_blank",rel:"noopener noreferrer"}},[n._v("异步遍历的接口"),s("OutboundLink")],1)]),n._v(" "),s("li",[s("a",{attrs:{href:"https://es6.ruanyifeng.com/#docs/async-iterator#for%20await...of",target:"_blank",rel:"noopener noreferrer"}},[n._v("for await...of"),s("OutboundLink")],1)]),n._v(" "),s("li",[s("a",{attrs:{href:"https://es6.ruanyifeng.com/#docs/async-iterator#%E5%BC%82%E6%AD%A5%20Generator%20%E5%87%BD%E6%95%B0",target:"_blank",rel:"noopener noreferrer"}},[n._v("异步 Generator 函数"),s("OutboundLink")],1)]),n._v(" "),s("li",[s("a",{attrs:{href:"https://es6.ruanyifeng.com/#docs/async-iterator#yield*%20%E8%AF%AD%E5%8F%A5",target:"_blank",rel:"noopener noreferrer"}},[n._v("yield* 语句"),s("OutboundLink")],1)])]),n._v(" "),s("h2",{attrs:{id:"同步遍历器的问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#同步遍历器的问题"}},[n._v("#")]),n._v(" 同步遍历器的问题")]),n._v(" "),s("p",[n._v("《遍历器》一章说过，Iterator 接口是一种数据遍历的协议，只要调用遍历器对象的"),s("code",[n._v("next")]),n._v("方法，就会得到一个对象，表示当前遍历指针所在的那个位置的信息。"),s("code",[n._v("next")]),n._v("方法返回的对象的结构是"),s("code",[n._v("{value, done}")]),n._v("，其中"),s("code",[n._v("value")]),n._v("表示当前的数据的值，"),s("code",[n._v("done")]),n._v("是一个布尔值，表示遍历是否结束。")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("function idMaker() {\n  let index = 0;\n\n  return {\n    next: function() {\n      return { value: index++, done: false };\n    }\n  };\n}\n\nconst it = idMaker();\n\nit.next().value // 0\nit.next().value // 1\nit.next().value // 2\n// ...\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br")])]),s("p",[n._v("上面代码中，变量"),s("code",[n._v("it")]),n._v("是一个遍历器（iterator）。每次调用"),s("code",[n._v("it.next()")]),n._v("方法，就返回一个对象，表示当前遍历位置的信息。")]),n._v(" "),s("p",[n._v("这里隐含着一个规定，"),s("code",[n._v("it.next()")]),n._v("方法必须是同步的，只要调用就必须立刻返回值。也就是说，一旦执行"),s("code",[n._v("it.next()")]),n._v("方法，就必须同步地得到"),s("code",[n._v("value")]),n._v("和"),s("code",[n._v("done")]),n._v("这两个属性。如果遍历指针正好指向同步操作，当然没有问题，但对于异步操作，就不太合适了。")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("function idMaker() {\n  let index = 0;\n\n  return {\n    next: function() {\n      return new Promise(function (resolve, reject) {\n        setTimeout(() => {\n          resolve({ value: index++, done: false });\n        }, 1000);\n      });\n    }\n  };\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br")])]),s("p",[n._v("上面代码中，"),s("code",[n._v("next()")]),n._v("方法返回的是一个 Promise 对象，这样就不行，不符合 Iterator 协议，只要代码里面包含异步操作都不行。也就是说，Iterator 协议里面"),s("code",[n._v("next()")]),n._v("方法只能包含同步操作。")]),n._v(" "),s("p",[n._v("目前的解决方法是，将异步操作包装成 Thunk 函数或者 Promise 对象，即"),s("code",[n._v("next()")]),n._v("方法返回值的"),s("code",[n._v("value")]),n._v("属性是一个 Thunk 函数或者 Promise 对象，等待以后返回真正的值，而"),s("code",[n._v("done")]),n._v("属性则还是同步产生的。")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("function idMaker() {\n  let index = 0;\n\n  return {\n    next: function() {\n      return {\n        value: new Promise(resolve => setTimeout(() => resolve(index++), 1000)),\n        done: false\n      };\n    }\n  };\n}\n\nconst it = idMaker();\n\nit.next().value.then(o => console.log(o)) // 0\nit.next().value.then(o => console.log(o)) // 1\nit.next().value.then(o => console.log(o)) // 2\n// ...\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br")])]),s("p",[n._v("上面代码中，"),s("code",[n._v("value")]),n._v("属性的返回值是一个 Promise 对象，用来放置异步操作。但是这样写很麻烦，不太符合直觉，语义也比较绕。")]),n._v(" "),s("p",[n._v("ES2018 "),s("a",{attrs:{href:"https://github.com/tc39/proposal-async-iteration",target:"_blank",rel:"noopener noreferrer"}},[n._v("引入"),s("OutboundLink")],1),n._v("了“异步遍历器”（Async Iterator），为异步操作提供原生的遍历器接口，即"),s("code",[n._v("value")]),n._v("和"),s("code",[n._v("done")]),n._v("这两个属性都是异步产生。")]),n._v(" "),s("h2",{attrs:{id:"异步遍历的接口"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#异步遍历的接口"}},[n._v("#")]),n._v(" 异步遍历的接口")]),n._v(" "),s("p",[n._v("异步遍历器的最大的语法特点，就是调用遍历器的"),s("code",[n._v("next")]),n._v("方法，返回的是一个 Promise 对象。")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("asyncIterator\n  .next()\n  .then(\n    ({ value, done }) => /* ... */\n  );\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br")])]),s("p",[n._v("上面代码中，"),s("code",[n._v("asyncIterator")]),n._v("是一个异步遍历器，调用"),s("code",[n._v("next")]),n._v("方法以后，返回一个 Promise 对象。因此，可以使用"),s("code",[n._v("then")]),n._v("方法指定，这个 Promise 对象的状态变为"),s("code",[n._v("resolve")]),n._v("以后的回调函数。回调函数的参数，则是一个具有"),s("code",[n._v("value")]),n._v("和"),s("code",[n._v("done")]),n._v("两个属性的对象，这个跟同步遍历器是一样的。")]),n._v(" "),s("p",[n._v("我们知道，一个对象的同步遍历器的接口，部署在"),s("code",[n._v("Symbol.iterator")]),n._v("属性上面。同样地，对象的异步遍历器接口，部署在"),s("code",[n._v("Symbol.asyncIterator")]),n._v("属性上面。不管是什么样的对象，只要它的"),s("code",[n._v("Symbol.asyncIterator")]),n._v("属性有值，就表示应该对它进行异步遍历。")]),n._v(" "),s("p",[n._v("下面是一个异步遍历器的例子。")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("const asyncIterable = createAsyncIterable(['a', 'b']);\nconst asyncIterator = asyncIterable[Symbol.asyncIterator]();\n\nasyncIterator\n.next()\n.then(iterResult1 => {\n  console.log(iterResult1); // { value: 'a', done: false }\n  return asyncIterator.next();\n})\n.then(iterResult2 => {\n  console.log(iterResult2); // { value: 'b', done: false }\n  return asyncIterator.next();\n})\n.then(iterResult3 => {\n  console.log(iterResult3); // { value: undefined, done: true }\n});\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br")])]),s("p",[n._v("上面代码中，异步遍历器其实返回了两次值。第一次调用的时候，返回一个 Promise 对象；等到 Promise 对象"),s("code",[n._v("resolve")]),n._v("了，再返回一个表示当前数据成员信息的对象。这就是说，异步遍历器与同步遍历器最终行为是一致的，只是会先返回 Promise 对象，作为中介。")]),n._v(" "),s("p",[n._v("由于异步遍历器的"),s("code",[n._v("next")]),n._v("方法，返回的是一个 Promise 对象。因此，可以把它放在"),s("code",[n._v("await")]),n._v("命令后面。")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("async function f() {\n  const asyncIterable = createAsyncIterable(['a', 'b']);\n  const asyncIterator = asyncIterable[Symbol.asyncIterator]();\n  console.log(await asyncIterator.next());\n  // { value: 'a', done: false }\n  console.log(await asyncIterator.next());\n  // { value: 'b', done: false }\n  console.log(await asyncIterator.next());\n  // { value: undefined, done: true }\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br")])]),s("p",[n._v("上面代码中，"),s("code",[n._v("next")]),n._v("方法用"),s("code",[n._v("await")]),n._v("处理以后，就不必使用"),s("code",[n._v("then")]),n._v("方法了。整个流程已经很接近同步处理了。")]),n._v(" "),s("p",[n._v("注意，异步遍历器的"),s("code",[n._v("next")]),n._v("方法是可以连续调用的，不必等到上一步产生的 Promise 对象"),s("code",[n._v("resolve")]),n._v("以后再调用。这种情况下，"),s("code",[n._v("next")]),n._v("方法会累积起来，自动按照每一步的顺序运行下去。下面是一个例子，把所有的"),s("code",[n._v("next")]),n._v("方法放在"),s("code",[n._v("Promise.all")]),n._v("方法里面。")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("const asyncIterable = createAsyncIterable(['a', 'b']);\nconst asyncIterator = asyncIterable[Symbol.asyncIterator]();\nconst [{value: v1}, {value: v2}] = await Promise.all([\n  asyncIterator.next(), asyncIterator.next()\n]);\n\nconsole.log(v1, v2); // a b\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br")])]),s("p",[n._v("另一种用法是一次性调用所有的"),s("code",[n._v("next")]),n._v("方法，然后"),s("code",[n._v("await")]),n._v("最后一步操作。")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("async function runner() {\n  const writer = openFile('someFile.txt');\n  writer.next('hello');\n  writer.next('world');\n  await writer.return();\n}\n\nrunner();\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br")])]),s("h2",{attrs:{id:"for-await-of"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#for-await-of"}},[n._v("#")]),n._v(" for await...of")]),n._v(" "),s("p",[n._v("前面介绍过，"),s("code",[n._v("for...of")]),n._v("循环用于遍历同步的 Iterator 接口。新引入的"),s("code",[n._v("for await...of")]),n._v("循环，则是用于遍历异步的 Iterator 接口。")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("async function f() {\n  for await (const x of createAsyncIterable(['a', 'b'])) {\n    console.log(x);\n  }\n}\n// a\n// b\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br")])]),s("p",[n._v("上面代码中，"),s("code",[n._v("createAsyncIterable()")]),n._v("返回一个拥有异步遍历器接口的对象，"),s("code",[n._v("for...of")]),n._v("循环自动调用这个对象的异步遍历器的"),s("code",[n._v("next")]),n._v("方法，会得到一个 Promise 对象。"),s("code",[n._v("await")]),n._v("用来处理这个 Promise 对象，一旦"),s("code",[n._v("resolve")]),n._v("，就把得到的值（"),s("code",[n._v("x")]),n._v("）传入"),s("code",[n._v("for...of")]),n._v("的循环体。")]),n._v(" "),s("p",[s("code",[n._v("for await...of")]),n._v("循环的一个用途，是部署了 asyncIterable 操作的异步接口，可以直接放入这个循环。")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("let body = '';\n\nasync function f() {\n  for await(const data of req) body += data;\n  const parsed = JSON.parse(body);\n  console.log('got', parsed);\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br")])]),s("p",[n._v("上面代码中，"),s("code",[n._v("req")]),n._v("是一个 asyncIterable 对象，用来异步读取数据。可以看到，使用"),s("code",[n._v("for await...of")]),n._v("循环以后，代码会非常简洁。")]),n._v(" "),s("p",[n._v("如果"),s("code",[n._v("next")]),n._v("方法返回的 Promise 对象被"),s("code",[n._v("reject")]),n._v("，"),s("code",[n._v("for await...of")]),n._v("就会报错，要用"),s("code",[n._v("try...catch")]),n._v("捕捉。")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("async function () {\n  try {\n    for await (const x of createRejectingIterable()) {\n      console.log(x);\n    }\n  } catch (e) {\n    console.error(e);\n  }\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br")])]),s("p",[n._v("注意，"),s("code",[n._v("for await...of")]),n._v("循环也可以用于同步遍历器。")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("(async function () {\n  for await (const x of ['a', 'b']) {\n    console.log(x);\n  }\n})();\n// a\n// b\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br")])]),s("p",[n._v("Node v10 支持异步遍历器，Stream 就部署了这个接口。下面是读取文件的传统写法与异步遍历器写法的差异。")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("// 传统写法\nfunction main(inputFilePath) {\n  const readStream = fs.createReadStream(\n    inputFilePath,\n    { encoding: 'utf8', highWaterMark: 1024 }\n  );\n  readStream.on('data', (chunk) => {\n    console.log('>>> '+chunk);\n  });\n  readStream.on('end', () => {\n    console.log('### DONE ###');\n  });\n}\n\n// 异步遍历器写法\nasync function main(inputFilePath) {\n  const readStream = fs.createReadStream(\n    inputFilePath,\n    { encoding: 'utf8', highWaterMark: 1024 }\n  );\n\n  for await (const chunk of readStream) {\n    console.log('>>> '+chunk);\n  }\n  console.log('### DONE ###');\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br")])]),s("h2",{attrs:{id:"异步-generator-函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#异步-generator-函数"}},[n._v("#")]),n._v(" 异步 Generator 函数")]),n._v(" "),s("p",[n._v("就像 Generator 函数返回一个同步遍历器对象一样，异步 Generator 函数的作用，是返回一个异步遍历器对象。")]),n._v(" "),s("p",[n._v("在语法上，异步 Generator 函数就是"),s("code",[n._v("async")]),n._v("函数与 Generator 函数的结合。")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("async function* gen() {\n  yield 'hello';\n}\nconst genObj = gen();\ngenObj.next().then(x => console.log(x));\n// { value: 'hello', done: false }\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br")])]),s("p",[n._v("上面代码中，"),s("code",[n._v("gen")]),n._v("是一个异步 Generator 函数，执行后返回一个异步 Iterator 对象。对该对象调用"),s("code",[n._v("next")]),n._v("方法，返回一个 Promise 对象。")]),n._v(" "),s("p",[n._v("异步遍历器的设计目的之一，就是 Generator 函数处理同步操作和异步操作时，能够使用同一套接口。")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("// 同步 Generator 函数\nfunction* map(iterable, func) {\n  const iter = iterable[Symbol.iterator]();\n  while (true) {\n    const {value, done} = iter.next();\n    if (done) break;\n    yield func(value);\n  }\n}\n\n// 异步 Generator 函数\nasync function* map(iterable, func) {\n  const iter = iterable[Symbol.asyncIterator]();\n  while (true) {\n    const {value, done} = await iter.next();\n    if (done) break;\n    yield func(value);\n  }\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br")])]),s("p",[n._v("上面代码中，"),s("code",[n._v("map")]),n._v("是一个 Generator 函数，第一个参数是可遍历对象"),s("code",[n._v("iterable")]),n._v("，第二个参数是一个回调函数"),s("code",[n._v("func")]),n._v("。"),s("code",[n._v("map")]),n._v("的作用是将"),s("code",[n._v("iterable")]),n._v("每一步返回的值，使用"),s("code",[n._v("func")]),n._v("进行处理。上面有两个版本的"),s("code",[n._v("map")]),n._v("，前一个处理同步遍历器，后一个处理异步遍历器，可以看到两个版本的写法基本上是一致的。")]),n._v(" "),s("p",[n._v("下面是另一个异步 Generator 函数的例子。")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("async function* readLines(path) {\n  let file = await fileOpen(path);\n\n  try {\n    while (!file.EOF) {\n      yield await file.readLine();\n    }\n  } finally {\n    await file.close();\n  }\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br")])]),s("p",[n._v("上面代码中，异步操作前面使用"),s("code",[n._v("await")]),n._v("关键字标明，即"),s("code",[n._v("await")]),n._v("后面的操作，应该返回 Promise 对象。凡是使用"),s("code",[n._v("yield")]),n._v("关键字的地方，就是"),s("code",[n._v("next")]),n._v("方法停下来的地方，它后面的表达式的值（即"),s("code",[n._v("await file.readLine()")]),n._v("的值），会作为"),s("code",[n._v("next()")]),n._v("返回对象的"),s("code",[n._v("value")]),n._v("属性，这一点是与同步 Generator 函数一致的。")]),n._v(" "),s("p",[n._v("异步 Generator 函数内部，能够同时使用"),s("code",[n._v("await")]),n._v("和"),s("code",[n._v("yield")]),n._v("命令。可以这样理解，"),s("code",[n._v("await")]),n._v("命令用于将外部操作产生的值输入函数内部，"),s("code",[n._v("yield")]),n._v("命令用于将函数内部的值输出。")]),n._v(" "),s("p",[n._v("上面代码定义的异步 Generator 函数的用法如下。")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("(async function () {\n  for await (const line of readLines(filePath)) {\n    console.log(line);\n  }\n})()\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br")])]),s("p",[n._v("异步 Generator 函数可以与"),s("code",[n._v("for await...of")]),n._v("循环结合起来使用。")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("async function* prefixLines(asyncIterable) {\n  for await (const line of asyncIterable) {\n    yield '> ' + line;\n  }\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br")])]),s("p",[n._v("异步 Generator 函数的返回值是一个异步 Iterator，即每次调用它的"),s("code",[n._v("next")]),n._v("方法，会返回一个 Promise 对象，也就是说，跟在"),s("code",[n._v("yield")]),n._v("命令后面的，应该是一个 Promise 对象。如果像上面那个例子那样，"),s("code",[n._v("yield")]),n._v("命令后面是一个字符串，会被自动包装成一个 Promise 对象。")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("function fetchRandom() {\n  const url = 'https://www.random.org/decimal-fractions/'\n    + '?num=1&dec=10&col=1&format=plain&rnd=new';\n  return fetch(url);\n}\n\nasync function* asyncGenerator() {\n  console.log('Start');\n  const result = await fetchRandom(); // (A)\n  yield 'Result: ' + await result.text(); // (B)\n  console.log('Done');\n}\n\nconst ag = asyncGenerator();\nag.next().then(({value, done}) => {\n  console.log(value);\n})\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br")])]),s("p",[n._v("上面代码中，"),s("code",[n._v("ag")]),n._v("是"),s("code",[n._v("asyncGenerator")]),n._v("函数返回的异步遍历器对象。调用"),s("code",[n._v("ag.next()")]),n._v("以后，上面代码的执行顺序如下。")]),n._v(" "),s("ol",[s("li",[s("code",[n._v("ag.next()")]),n._v("立刻返回一个 Promise 对象。")]),n._v(" "),s("li",[s("code",[n._v("asyncGenerator")]),n._v("函数开始执行，打印出"),s("code",[n._v("Start")]),n._v("。")]),n._v(" "),s("li",[s("code",[n._v("await")]),n._v("命令返回一个 Promise 对象，"),s("code",[n._v("asyncGenerator")]),n._v("函数停在这里。")]),n._v(" "),s("li",[n._v("A 处变成 fulfilled 状态，产生的值放入"),s("code",[n._v("result")]),n._v("变量，"),s("code",[n._v("asyncGenerator")]),n._v("函数继续往下执行。")]),n._v(" "),s("li",[n._v("函数在 B 处的"),s("code",[n._v("yield")]),n._v("暂停执行，一旦"),s("code",[n._v("yield")]),n._v("命令取到值，"),s("code",[n._v("ag.next()")]),n._v("返回的那个 Promise 对象变成 fulfilled 状态。")]),n._v(" "),s("li",[s("code",[n._v("ag.next()")]),n._v("后面的"),s("code",[n._v("then")]),n._v("方法指定的回调函数开始执行。该回调函数的参数是一个对象"),s("code",[n._v("{value, done}")]),n._v("，其中"),s("code",[n._v("value")]),n._v("的值是"),s("code",[n._v("yield")]),n._v("命令后面的那个表达式的值，"),s("code",[n._v("done")]),n._v("的值是"),s("code",[n._v("false")]),n._v("。")])]),n._v(" "),s("p",[n._v("A 和 B 两行的作用类似于下面的代码。")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("return new Promise((resolve, reject) => {\n  fetchRandom()\n  .then(result => result.text())\n  .then(result => {\n     resolve({\n       value: 'Result: ' + result,\n       done: false,\n     });\n  });\n});\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br")])]),s("p",[n._v("如果异步 Generator 函数抛出错误，会导致 Promise 对象的状态变为"),s("code",[n._v("reject")]),n._v("，然后抛出的错误被"),s("code",[n._v("catch")]),n._v("方法捕获。")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("async function* asyncGenerator() {\n  throw new Error('Problem!');\n}\n\nasyncGenerator()\n.next()\n.catch(err => console.log(err)); // Error: Problem!\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br")])]),s("p",[n._v("注意，普通的 async 函数返回的是一个 Promise 对象，而异步 Generator 函数返回的是一个异步 Iterator 对象。可以这样理解，async 函数和异步 Generator 函数，是封装异步操作的两种方法，都用来达到同一种目的。区别在于，前者自带执行器，后者通过"),s("code",[n._v("for await...of")]),n._v("执行，或者自己编写执行器。下面就是一个异步 Generator 函数的执行器。")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("async function takeAsync(asyncIterable, count = Infinity) {\n  const result = [];\n  const iterator = asyncIterable[Symbol.asyncIterator]();\n  while (result.length < count) {\n    const {value, done} = await iterator.next();\n    if (done) break;\n    result.push(value);\n  }\n  return result;\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br")])]),s("p",[n._v("上面代码中，异步 Generator 函数产生的异步遍历器，会通过"),s("code",[n._v("while")]),n._v("循环自动执行，每当"),s("code",[n._v("await iterator.next()")]),n._v("完成，就会进入下一轮循环。一旦"),s("code",[n._v("done")]),n._v("属性变为"),s("code",[n._v("true")]),n._v("，就会跳出循环，异步遍历器执行结束。")]),n._v(" "),s("p",[n._v("下面是这个自动执行器的一个使用实例。")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("async function f() {\n  async function* gen() {\n    yield 'a';\n    yield 'b';\n    yield 'c';\n  }\n\n  return await takeAsync(gen());\n}\n\nf().then(function (result) {\n  console.log(result); // ['a', 'b', 'c']\n})\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br")])]),s("p",[n._v("异步 Generator 函数出现以后，JavaScript 就有了四种函数形式：普通函数、async 函数、Generator 函数和异步 Generator 函数。请注意区分每种函数的不同之处。基本上，如果是一系列按照顺序执行的异步操作（比如读取文件，然后写入新内容，再存入硬盘），可以使用 async 函数；如果是一系列产生相同数据结构的异步操作（比如一行一行读取文件），可以使用异步 Generator 函数。")]),n._v(" "),s("p",[n._v("异步 Generator 函数也可以通过"),s("code",[n._v("next")]),n._v("方法的参数，接收外部传入的数据。")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("const writer = openFile('someFile.txt');\nwriter.next('hello'); // 立即执行\nwriter.next('world'); // 立即执行\nawait writer.return(); // 等待写入结束\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br")])]),s("p",[n._v("上面代码中，"),s("code",[n._v("openFile")]),n._v("是一个异步 Generator 函数。"),s("code",[n._v("next")]),n._v("方法的参数，向该函数内部的操作传入数据。每次"),s("code",[n._v("next")]),n._v("方法都是同步执行的，最后的"),s("code",[n._v("await")]),n._v("命令用于等待整个写入操作结束。")]),n._v(" "),s("p",[n._v("最后，同步的数据结构，也可以使用异步 Generator 函数。")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("async function* createAsyncIterable(syncIterable) {\n  for (const elem of syncIterable) {\n    yield elem;\n  }\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br")])]),s("p",[n._v("上面代码中，由于没有异步操作，所以也就没有使用"),s("code",[n._v("await")]),n._v("关键字。")]),n._v(" "),s("h2",{attrs:{id:"yield-语句"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#yield-语句"}},[n._v("#")]),n._v(" yield* 语句")]),n._v(" "),s("p",[s("code",[n._v("yield*")]),n._v("语句也可以跟一个异步遍历器。")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("async function* gen1() {\n  yield 'a';\n  yield 'b';\n  return 2;\n}\n\nasync function* gen2() {\n  // result 最终会等于 2\n  const result = yield* gen1();\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br")])]),s("p",[n._v("上面代码中，"),s("code",[n._v("gen2")]),n._v("函数里面的"),s("code",[n._v("result")]),n._v("变量，最后的值是"),s("code",[n._v("2")]),n._v("。")]),n._v(" "),s("p",[n._v("与同步 Generator 函数一样，"),s("code",[n._v("for await...of")]),n._v("循环会展开"),s("code",[n._v("yield*")]),n._v("。")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("(async function () {\n  for await (const x of gen2()) {\n    console.log(x);\n  }\n})();\n// a\n// b\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br")])]),s("h3",{attrs:{id:"留言"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#留言"}},[n._v("#")]),n._v(" 留言")])])}),[],!1,null,null,null);e.default=t.exports}}]);