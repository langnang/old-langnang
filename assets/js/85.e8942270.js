(window.webpackJsonp=window.webpackJsonp||[]).push([[85],{554:function(e,a,s){"use strict";s.r(a);var n=s(18),r=Object(n.a)({},(function(){var e=this,a=e.$createElement,s=e._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"arraybuffer"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#arraybuffer"}},[e._v("#")]),e._v(" ArrayBuffer")]),e._v(" "),s("ol",[s("li",[s("a",{attrs:{href:"https://es6.ruanyifeng.com/#docs/arraybuffer#ArrayBuffer%20%E5%AF%B9%E8%B1%A1",target:"_blank",rel:"noopener noreferrer"}},[e._v("ArrayBuffer 对象"),s("OutboundLink")],1)]),e._v(" "),s("li",[s("a",{attrs:{href:"https://es6.ruanyifeng.com/#docs/arraybuffer#TypedArray%20%E8%A7%86%E5%9B%BE",target:"_blank",rel:"noopener noreferrer"}},[e._v("TypedArray 视图"),s("OutboundLink")],1)]),e._v(" "),s("li",[s("a",{attrs:{href:"https://es6.ruanyifeng.com/#docs/arraybuffer#%E5%A4%8D%E5%90%88%E8%A7%86%E5%9B%BE",target:"_blank",rel:"noopener noreferrer"}},[e._v("复合视图"),s("OutboundLink")],1)]),e._v(" "),s("li",[s("a",{attrs:{href:"https://es6.ruanyifeng.com/#docs/arraybuffer#DataView%20%E8%A7%86%E5%9B%BE",target:"_blank",rel:"noopener noreferrer"}},[e._v("DataView 视图"),s("OutboundLink")],1)]),e._v(" "),s("li",[s("a",{attrs:{href:"https://es6.ruanyifeng.com/#docs/arraybuffer#%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%95%B0%E7%BB%84%E7%9A%84%E5%BA%94%E7%94%A8",target:"_blank",rel:"noopener noreferrer"}},[e._v("二进制数组的应用"),s("OutboundLink")],1)]),e._v(" "),s("li",[s("a",{attrs:{href:"https://es6.ruanyifeng.com/#docs/arraybuffer#SharedArrayBuffer",target:"_blank",rel:"noopener noreferrer"}},[e._v("SharedArrayBuffer"),s("OutboundLink")],1)]),e._v(" "),s("li",[s("a",{attrs:{href:"https://es6.ruanyifeng.com/#docs/arraybuffer#Atomics%20%E5%AF%B9%E8%B1%A1",target:"_blank",rel:"noopener noreferrer"}},[e._v("Atomics 对象"),s("OutboundLink")],1)])]),e._v(" "),s("p",[s("code",[e._v("ArrayBuffer")]),e._v("对象、"),s("code",[e._v("TypedArray")]),e._v("视图和"),s("code",[e._v("DataView")]),e._v("视图是 JavaScript 操作二进制数据的一个接口。这些对象早就存在，属于独立的规格（2011 年 2 月发布），ES6 将它们纳入了 ECMAScript 规格，并且增加了新的方法。它们都是以数组的语法处理二进制数据，所以统称为二进制数组。")]),e._v(" "),s("p",[e._v("这个接口的原始设计目的，与 WebGL 项目有关。所谓 WebGL，就是指浏览器与显卡之间的通信接口，为了满足 JavaScript 与显卡之间大量的、实时的数据交换，它们之间的数据通信必须是二进制的，而不能是传统的文本格式。文本格式传递一个 32 位整数，两端的 JavaScript 脚本与显卡都要进行格式转化，将非常耗时。这时要是存在一种机制，可以像 C 语言那样，直接操作字节，将 4 个字节的 32 位整数，以二进制形式原封不动地送入显卡，脚本的性能就会大幅提升。")]),e._v(" "),s("p",[e._v("二进制数组就是在这种背景下诞生的。它很像 C 语言的数组，允许开发者以数组下标的形式，直接操作内存，大大增强了 JavaScript 处理二进制数据的能力，使得开发者有可能通过 JavaScript 与操作系统的原生接口进行二进制通信。")]),e._v(" "),s("p",[e._v("二进制数组由三类对象组成。")]),e._v(" "),s("p",[s("strong",[e._v("（1）"),s("code",[e._v("ArrayBuffer")]),e._v("对象")]),e._v("：代表内存之中的一段二进制数据，可以通过“视图”进行操作。“视图”部署了数组接口，这意味着，可以用数组的方法操作内存。")]),e._v(" "),s("p",[s("strong",[e._v("（2）"),s("code",[e._v("TypedArray")]),e._v("视图")]),e._v("：共包括 9 种类型的视图，比如"),s("code",[e._v("Uint8Array")]),e._v("（无符号 8 位整数）数组视图, "),s("code",[e._v("Int16Array")]),e._v("（16 位整数）数组视图, "),s("code",[e._v("Float32Array")]),e._v("（32 位浮点数）数组视图等等。")]),e._v(" "),s("p",[s("strong",[e._v("（3）"),s("code",[e._v("DataView")]),e._v("视图")]),e._v("：可以自定义复合格式的视图，比如第一个字节是 Uint8（无符号 8 位整数）、第二、三个字节是 Int16（16 位整数）、第四个字节开始是 Float32（32 位浮点数）等等，此外还可以自定义字节序。")]),e._v(" "),s("p",[e._v("简单说，"),s("code",[e._v("ArrayBuffer")]),e._v("对象代表原始的二进制数据，"),s("code",[e._v("TypedArray")]),e._v("视图用来读写简单类型的二进制数据，"),s("code",[e._v("DataView")]),e._v("视图用来读写复杂类型的二进制数据。")]),e._v(" "),s("p",[s("code",[e._v("TypedArray")]),e._v("视图支持的数据类型一共有 9 种（"),s("code",[e._v("DataView")]),e._v("视图支持除"),s("code",[e._v("Uint8C")]),e._v("以外的其他 8 种）。")]),e._v(" "),s("table",[s("thead",[s("tr",[s("th",[e._v("数据类型")]),e._v(" "),s("th",[e._v("字节长度")]),e._v(" "),s("th",[e._v("含义")]),e._v(" "),s("th",[e._v("对应的 C 语言类型")])])]),e._v(" "),s("tbody",[s("tr",[s("td",[e._v("Int8")]),e._v(" "),s("td",[e._v("1")]),e._v(" "),s("td",[e._v("8 位带符号整数")]),e._v(" "),s("td",[e._v("signed char")])]),e._v(" "),s("tr",[s("td",[e._v("Uint8")]),e._v(" "),s("td",[e._v("1")]),e._v(" "),s("td",[e._v("8 位不带符号整数")]),e._v(" "),s("td",[e._v("unsigned char")])]),e._v(" "),s("tr",[s("td",[e._v("Uint8C")]),e._v(" "),s("td",[e._v("1")]),e._v(" "),s("td",[e._v("8 位不带符号整数（自动过滤溢出）")]),e._v(" "),s("td",[e._v("unsigned char")])]),e._v(" "),s("tr",[s("td",[e._v("Int16")]),e._v(" "),s("td",[e._v("2")]),e._v(" "),s("td",[e._v("16 位带符号整数")]),e._v(" "),s("td",[e._v("short")])]),e._v(" "),s("tr",[s("td",[e._v("Uint16")]),e._v(" "),s("td",[e._v("2")]),e._v(" "),s("td",[e._v("16 位不带符号整数")]),e._v(" "),s("td",[e._v("unsigned short")])]),e._v(" "),s("tr",[s("td",[e._v("Int32")]),e._v(" "),s("td",[e._v("4")]),e._v(" "),s("td",[e._v("32 位带符号整数")]),e._v(" "),s("td",[e._v("int")])]),e._v(" "),s("tr",[s("td",[e._v("Uint32")]),e._v(" "),s("td",[e._v("4")]),e._v(" "),s("td",[e._v("32 位不带符号的整数")]),e._v(" "),s("td",[e._v("unsigned int")])]),e._v(" "),s("tr",[s("td",[e._v("Float32")]),e._v(" "),s("td",[e._v("4")]),e._v(" "),s("td",[e._v("32 位浮点数")]),e._v(" "),s("td",[e._v("float")])]),e._v(" "),s("tr",[s("td",[e._v("Float64")]),e._v(" "),s("td",[e._v("8")]),e._v(" "),s("td",[e._v("64 位浮点数")]),e._v(" "),s("td",[e._v("double")])])])]),e._v(" "),s("p",[e._v("注意，二进制数组并不是真正的数组，而是类似数组的对象。")]),e._v(" "),s("p",[e._v("很多浏览器操作的 API，用到了二进制数组操作二进制数据，下面是其中的几个。")]),e._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://es6.ruanyifeng.com/#canvas",target:"_blank",rel:"noopener noreferrer"}},[e._v("Canvas"),s("OutboundLink")],1)]),e._v(" "),s("li",[s("a",{attrs:{href:"https://es6.ruanyifeng.com/#fetch-api",target:"_blank",rel:"noopener noreferrer"}},[e._v("Fetch API"),s("OutboundLink")],1)]),e._v(" "),s("li",[s("a",{attrs:{href:"https://es6.ruanyifeng.com/#file-api",target:"_blank",rel:"noopener noreferrer"}},[e._v("File API"),s("OutboundLink")],1)]),e._v(" "),s("li",[s("a",{attrs:{href:"https://es6.ruanyifeng.com/#websocket",target:"_blank",rel:"noopener noreferrer"}},[e._v("WebSockets"),s("OutboundLink")],1)]),e._v(" "),s("li",[s("a",{attrs:{href:"https://es6.ruanyifeng.com/#ajax",target:"_blank",rel:"noopener noreferrer"}},[e._v("XMLHttpRequest"),s("OutboundLink")],1)])]),e._v(" "),s("h2",{attrs:{id:"arraybuffer-对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#arraybuffer-对象"}},[e._v("#")]),e._v(" ArrayBuffer 对象")]),e._v(" "),s("h3",{attrs:{id:"概述"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[e._v("#")]),e._v(" 概述")]),e._v(" "),s("p",[s("code",[e._v("ArrayBuffer")]),e._v("对象代表储存二进制数据的一段内存，它不能直接读写，只能通过视图（"),s("code",[e._v("TypedArray")]),e._v("视图和"),s("code",[e._v("DataView")]),e._v("视图)来读写，视图的作用是以指定格式解读二进制数据。")]),e._v(" "),s("p",[s("code",[e._v("ArrayBuffer")]),e._v("也是一个构造函数，可以分配一段可以存放数据的连续内存区域。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const buf = new ArrayBuffer(32);\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("上面代码生成了一段 32 字节的内存区域，每个字节的值默认都是 0。可以看到，"),s("code",[e._v("ArrayBuffer")]),e._v("构造函数的参数是所需要的内存大小（单位字节）。")]),e._v(" "),s("p",[e._v("为了读写这段内容，需要为它指定视图。"),s("code",[e._v("DataView")]),e._v("视图的创建，需要提供"),s("code",[e._v("ArrayBuffer")]),e._v("对象实例作为参数。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const buf = new ArrayBuffer(32);\nconst dataView = new DataView(buf);\ndataView.getUint8(0) // 0\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br")])]),s("p",[e._v("上面代码对一段 32 字节的内存，建立"),s("code",[e._v("DataView")]),e._v("视图，然后以不带符号的 8 位整数格式，从头读取 8 位二进制数据，结果得到 0，因为原始内存的"),s("code",[e._v("ArrayBuffer")]),e._v("对象，默认所有位都是 0。")]),e._v(" "),s("p",[e._v("另一种"),s("code",[e._v("TypedArray")]),e._v("视图，与"),s("code",[e._v("DataView")]),e._v("视图的一个区别是，它不是一个构造函数，而是一组构造函数，代表不同的数据格式。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const buffer = new ArrayBuffer(12);\n\nconst x1 = new Int32Array(buffer);\nx1[0] = 1;\nconst x2 = new Uint8Array(buffer);\nx2[0]  = 2;\n\nx1[0] // 2\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br")])]),s("p",[e._v("上面代码对同一段内存，分别建立两种视图：32 位带符号整数（"),s("code",[e._v("Int32Array")]),e._v("构造函数）和 8 位不带符号整数（"),s("code",[e._v("Uint8Array")]),e._v("构造函数）。由于两个视图对应的是同一段内存，一个视图修改底层内存，会影响到另一个视图。")]),e._v(" "),s("p",[s("code",[e._v("TypedArray")]),e._v("视图的构造函数，除了接受"),s("code",[e._v("ArrayBuffer")]),e._v("实例作为参数，还可以接受普通数组作为参数，直接分配内存生成底层的"),s("code",[e._v("ArrayBuffer")]),e._v("实例，并同时完成对这段内存的赋值。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const typedArray = new Uint8Array([0,1,2]);\ntypedArray.length // 3\n\ntypedArray[0] = 5;\ntypedArray // [5, 1, 2]\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br")])]),s("p",[e._v("上面代码使用"),s("code",[e._v("TypedArray")]),e._v("视图的"),s("code",[e._v("Uint8Array")]),e._v("构造函数，新建一个不带符号的 8 位整数视图。可以看到，"),s("code",[e._v("Uint8Array")]),e._v("直接使用普通数组作为参数，对底层内存的赋值同时完成。")]),e._v(" "),s("h3",{attrs:{id:"arraybuffer-prototype-bytelength"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#arraybuffer-prototype-bytelength"}},[e._v("#")]),e._v(" ArrayBuffer.prototype.byteLength")]),e._v(" "),s("p",[s("code",[e._v("ArrayBuffer")]),e._v("实例的"),s("code",[e._v("byteLength")]),e._v("属性，返回所分配的内存区域的字节长度。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const buffer = new ArrayBuffer(32);\nbuffer.byteLength\n// 32\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br")])]),s("p",[e._v("如果要分配的内存区域很大，有可能分配失败（因为没有那么多的连续空余内存），所以有必要检查是否分配成功。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("if (buffer.byteLength === n) {\n  // 成功\n} else {\n  // 失败\n}\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br")])]),s("h3",{attrs:{id:"arraybuffer-prototype-slice"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#arraybuffer-prototype-slice"}},[e._v("#")]),e._v(" ArrayBuffer.prototype.slice()")]),e._v(" "),s("p",[s("code",[e._v("ArrayBuffer")]),e._v("实例有一个"),s("code",[e._v("slice")]),e._v("方法，允许将内存区域的一部分，拷贝生成一个新的"),s("code",[e._v("ArrayBuffer")]),e._v("对象。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const buffer = new ArrayBuffer(8);\nconst newBuffer = buffer.slice(0, 3);\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br")])]),s("p",[e._v("上面代码拷贝"),s("code",[e._v("buffer")]),e._v("对象的前 3 个字节（从 0 开始，到第 3 个字节前面结束），生成一个新的"),s("code",[e._v("ArrayBuffer")]),e._v("对象。"),s("code",[e._v("slice")]),e._v("方法其实包含两步，第一步是先分配一段新内存，第二步是将原来那个"),s("code",[e._v("ArrayBuffer")]),e._v("对象拷贝过去。")]),e._v(" "),s("p",[s("code",[e._v("slice")]),e._v("方法接受两个参数，第一个参数表示拷贝开始的字节序号（含该字节），第二个参数表示拷贝截止的字节序号（不含该字节）。如果省略第二个参数，则默认到原"),s("code",[e._v("ArrayBuffer")]),e._v("对象的结尾。")]),e._v(" "),s("p",[e._v("除了"),s("code",[e._v("slice")]),e._v("方法，"),s("code",[e._v("ArrayBuffer")]),e._v("对象不提供任何直接读写内存的方法，只允许在其上方建立视图，然后通过视图读写。")]),e._v(" "),s("h3",{attrs:{id:"arraybuffer-isview"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#arraybuffer-isview"}},[e._v("#")]),e._v(" ArrayBuffer.isView()")]),e._v(" "),s("p",[s("code",[e._v("ArrayBuffer")]),e._v("有一个静态方法"),s("code",[e._v("isView")]),e._v("，返回一个布尔值，表示参数是否为"),s("code",[e._v("ArrayBuffer")]),e._v("的视图实例。这个方法大致相当于判断参数，是否为"),s("code",[e._v("TypedArray")]),e._v("实例或"),s("code",[e._v("DataView")]),e._v("实例。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const buffer = new ArrayBuffer(8);\nArrayBuffer.isView(buffer) // false\n\nconst v = new Int32Array(buffer);\nArrayBuffer.isView(v) // true\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br")])]),s("h2",{attrs:{id:"typedarray-视图"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#typedarray-视图"}},[e._v("#")]),e._v(" TypedArray 视图")]),e._v(" "),s("h3",{attrs:{id:"概述-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#概述-2"}},[e._v("#")]),e._v(" 概述")]),e._v(" "),s("p",[s("code",[e._v("ArrayBuffer")]),e._v("对象作为内存区域，可以存放多种类型的数据。同一段内存，不同数据有不同的解读方式，这就叫做“视图”（view）。"),s("code",[e._v("ArrayBuffer")]),e._v("有两种视图，一种是"),s("code",[e._v("TypedArray")]),e._v("视图，另一种是"),s("code",[e._v("DataView")]),e._v("视图。前者的数组成员都是同一个数据类型，后者的数组成员可以是不同的数据类型。")]),e._v(" "),s("p",[e._v("目前，"),s("code",[e._v("TypedArray")]),e._v("视图一共包括 9 种类型，每一种视图都是一种构造函数。")]),e._v(" "),s("ul",[s("li",[s("strong",[s("code",[e._v("Int8Array")])]),e._v("：8 位有符号整数，长度 1 个字节。")]),e._v(" "),s("li",[s("strong",[s("code",[e._v("Uint8Array")])]),e._v("：8 位无符号整数，长度 1 个字节。")]),e._v(" "),s("li",[s("strong",[s("code",[e._v("Uint8ClampedArray")])]),e._v("：8 位无符号整数，长度 1 个字节，溢出处理不同。")]),e._v(" "),s("li",[s("strong",[s("code",[e._v("Int16Array")])]),e._v("：16 位有符号整数，长度 2 个字节。")]),e._v(" "),s("li",[s("strong",[s("code",[e._v("Uint16Array")])]),e._v("：16 位无符号整数，长度 2 个字节。")]),e._v(" "),s("li",[s("strong",[s("code",[e._v("Int32Array")])]),e._v("：32 位有符号整数，长度 4 个字节。")]),e._v(" "),s("li",[s("strong",[s("code",[e._v("Uint32Array")])]),e._v("：32 位无符号整数，长度 4 个字节。")]),e._v(" "),s("li",[s("strong",[s("code",[e._v("Float32Array")])]),e._v("：32 位浮点数，长度 4 个字节。")]),e._v(" "),s("li",[s("strong",[s("code",[e._v("Float64Array")])]),e._v("：64 位浮点数，长度 8 个字节。")])]),e._v(" "),s("p",[e._v("这 9 个构造函数生成的数组，统称为"),s("code",[e._v("TypedArray")]),e._v("视图。它们很像普通数组，都有"),s("code",[e._v("length")]),e._v("属性，都能用方括号运算符（"),s("code",[e._v("[]")]),e._v("）获取单个元素，所有数组的方法，在它们上面都能使用。普通数组与 TypedArray 数组的差异主要在以下方面。")]),e._v(" "),s("ul",[s("li",[e._v("TypedArray 数组的所有成员，都是同一种类型。")]),e._v(" "),s("li",[e._v("TypedArray 数组的成员是连续的，不会有空位。")]),e._v(" "),s("li",[e._v("TypedArray 数组成员的默认值为 0。比如，"),s("code",[e._v("new Array(10)")]),e._v("返回一个普通数组，里面没有任何成员，只是 10 个空位；"),s("code",[e._v("new Uint8Array(10)")]),e._v("返回一个 TypedArray 数组，里面 10 个成员都是 0。")]),e._v(" "),s("li",[e._v("TypedArray 数组只是一层视图，本身不储存数据，它的数据都储存在底层的"),s("code",[e._v("ArrayBuffer")]),e._v("对象之中，要获取底层对象必须使用"),s("code",[e._v("buffer")]),e._v("属性。")])]),e._v(" "),s("h3",{attrs:{id:"构造函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#构造函数"}},[e._v("#")]),e._v(" 构造函数")]),e._v(" "),s("p",[e._v("TypedArray 数组提供 9 种构造函数，用来生成相应类型的数组实例。")]),e._v(" "),s("p",[e._v("构造函数有多种用法。")]),e._v(" "),s("p",[s("strong",[e._v("（1）TypedArray(buffer, byteOffset=0, length?)")])]),e._v(" "),s("p",[e._v("同一个"),s("code",[e._v("ArrayBuffer")]),e._v("对象之上，可以根据不同的数据类型，建立多个视图。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("// 创建一个8字节的ArrayBuffer\nconst b = new ArrayBuffer(8);\n\n// 创建一个指向b的Int32视图，开始于字节0，直到缓冲区的末尾\nconst v1 = new Int32Array(b);\n\n// 创建一个指向b的Uint8视图，开始于字节2，直到缓冲区的末尾\nconst v2 = new Uint8Array(b, 2);\n\n// 创建一个指向b的Int16视图，开始于字节2，长度为2\nconst v3 = new Int16Array(b, 2, 2);\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br")])]),s("p",[e._v("上面代码在一段长度为 8 个字节的内存（"),s("code",[e._v("b")]),e._v("）之上，生成了三个视图："),s("code",[e._v("v1")]),e._v("、"),s("code",[e._v("v2")]),e._v("和"),s("code",[e._v("v3")]),e._v("。")]),e._v(" "),s("p",[e._v("视图的构造函数可以接受三个参数：")]),e._v(" "),s("ul",[s("li",[e._v("第一个参数（必需）：视图对应的底层"),s("code",[e._v("ArrayBuffer")]),e._v("对象。")]),e._v(" "),s("li",[e._v("第二个参数（可选）：视图开始的字节序号，默认从 0 开始。")]),e._v(" "),s("li",[e._v("第三个参数（可选）：视图包含的数据个数，默认直到本段内存区域结束。")])]),e._v(" "),s("p",[e._v("因此，"),s("code",[e._v("v1")]),e._v("、"),s("code",[e._v("v2")]),e._v("和"),s("code",[e._v("v3")]),e._v("是重叠的："),s("code",[e._v("v1[0]")]),e._v("是一个 32 位整数，指向字节 0 ～字节 3；"),s("code",[e._v("v2[0]")]),e._v("是一个 8 位无符号整数，指向字节 2；"),s("code",[e._v("v3[0]")]),e._v("是一个 16 位整数，指向字节 2 ～字节 3。只要任何一个视图对内存有所修改，就会在另外两个视图上反应出来。")]),e._v(" "),s("p",[e._v("注意，"),s("code",[e._v("byteOffset")]),e._v("必须与所要建立的数据类型一致，否则会报错。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const buffer = new ArrayBuffer(8);\nconst i16 = new Int16Array(buffer, 1);\n// Uncaught RangeError: start offset of Int16Array should be a multiple of 2\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br")])]),s("p",[e._v("上面代码中，新生成一个 8 个字节的"),s("code",[e._v("ArrayBuffer")]),e._v("对象，然后在这个对象的第一个字节，建立带符号的 16 位整数视图，结果报错。因为，带符号的 16 位整数需要两个字节，所以"),s("code",[e._v("byteOffset")]),e._v("参数必须能够被 2 整除。")]),e._v(" "),s("p",[e._v("如果想从任意字节开始解读"),s("code",[e._v("ArrayBuffer")]),e._v("对象，必须使用"),s("code",[e._v("DataView")]),e._v("视图，因为"),s("code",[e._v("TypedArray")]),e._v("视图只提供 9 种固定的解读格式。")]),e._v(" "),s("p",[s("strong",[e._v("（2）TypedArray(length)")])]),e._v(" "),s("p",[e._v("视图还可以不通过"),s("code",[e._v("ArrayBuffer")]),e._v("对象，直接分配内存而生成。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const f64a = new Float64Array(8);\nf64a[0] = 10;\nf64a[1] = 20;\nf64a[2] = f64a[0] + f64a[1];\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br")])]),s("p",[e._v("上面代码生成一个 8 个成员的"),s("code",[e._v("Float64Array")]),e._v("数组（共 64 字节），然后依次对每个成员赋值。这时，视图构造函数的参数就是成员的个数。可以看到，视图数组的赋值操作与普通数组的操作毫无两样。")]),e._v(" "),s("p",[s("strong",[e._v("（3）TypedArray(typedArray)")])]),e._v(" "),s("p",[e._v("TypedArray 数组的构造函数，可以接受另一个"),s("code",[e._v("TypedArray")]),e._v("实例作为参数。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const typedArray = new Int8Array(new Uint8Array(4));\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("上面代码中，"),s("code",[e._v("Int8Array")]),e._v("构造函数接受一个"),s("code",[e._v("Uint8Array")]),e._v("实例作为参数。")]),e._v(" "),s("p",[e._v("注意，此时生成的新数组，只是复制了参数数组的值，对应的底层内存是不一样的。新数组会开辟一段新的内存储存数据，不会在原数组的内存之上建立视图。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const x = new Int8Array([1, 1]);\nconst y = new Int8Array(x);\nx[0] // 1\ny[0] // 1\n\nx[0] = 2;\ny[0] // 1\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br")])]),s("p",[e._v("上面代码中，数组"),s("code",[e._v("y")]),e._v("是以数组"),s("code",[e._v("x")]),e._v("为模板而生成的，当"),s("code",[e._v("x")]),e._v("变动的时候，"),s("code",[e._v("y")]),e._v("并没有变动。")]),e._v(" "),s("p",[e._v("如果想基于同一段内存，构造不同的视图，可以采用下面的写法。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const x = new Int8Array([1, 1]);\nconst y = new Int8Array(x.buffer);\nx[0] // 1\ny[0] // 1\n\nx[0] = 2;\ny[0] // 2\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br")])]),s("p",[s("strong",[e._v("（4）TypedArray(arrayLikeObject)")])]),e._v(" "),s("p",[e._v("构造函数的参数也可以是一个普通数组，然后直接生成"),s("code",[e._v("TypedArray")]),e._v("实例。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const typedArray = new Uint8Array([1, 2, 3, 4]);\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("注意，这时"),s("code",[e._v("TypedArray")]),e._v("视图会重新开辟内存，不会在原数组的内存上建立视图。")]),e._v(" "),s("p",[e._v("上面代码从一个普通的数组，生成一个 8 位无符号整数的"),s("code",[e._v("TypedArray")]),e._v("实例。")]),e._v(" "),s("p",[e._v("TypedArray 数组也可以转换回普通数组。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const normalArray = [...typedArray];\n// or\nconst normalArray = Array.from(typedArray);\n// or\nconst normalArray = Array.prototype.slice.call(typedArray);\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br")])]),s("h3",{attrs:{id:"数组方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数组方法"}},[e._v("#")]),e._v(" 数组方法")]),e._v(" "),s("p",[e._v("普通数组的操作方法和属性，对 TypedArray 数组完全适用。")]),e._v(" "),s("ul",[s("li",[s("code",[e._v("TypedArray.prototype.copyWithin(target, start[, end = this.length])")])]),e._v(" "),s("li",[s("code",[e._v("TypedArray.prototype.entries()")])]),e._v(" "),s("li",[s("code",[e._v("TypedArray.prototype.every(callbackfn, thisArg?)")])]),e._v(" "),s("li",[s("code",[e._v("TypedArray.prototype.fill(value, start=0, end=this.length)")])]),e._v(" "),s("li",[s("code",[e._v("TypedArray.prototype.filter(callbackfn, thisArg?)")])]),e._v(" "),s("li",[s("code",[e._v("TypedArray.prototype.find(predicate, thisArg?)")])]),e._v(" "),s("li",[s("code",[e._v("TypedArray.prototype.findIndex(predicate, thisArg?)")])]),e._v(" "),s("li",[s("code",[e._v("TypedArray.prototype.forEach(callbackfn, thisArg?)")])]),e._v(" "),s("li",[s("code",[e._v("TypedArray.prototype.indexOf(searchElement, fromIndex=0)")])]),e._v(" "),s("li",[s("code",[e._v("TypedArray.prototype.join(separator)")])]),e._v(" "),s("li",[s("code",[e._v("TypedArray.prototype.keys()")])]),e._v(" "),s("li",[s("code",[e._v("TypedArray.prototype.lastIndexOf(searchElement, fromIndex?)")])]),e._v(" "),s("li",[s("code",[e._v("TypedArray.prototype.map(callbackfn, thisArg?)")])]),e._v(" "),s("li",[s("code",[e._v("TypedArray.prototype.reduce(callbackfn, initialValue?)")])]),e._v(" "),s("li",[s("code",[e._v("TypedArray.prototype.reduceRight(callbackfn, initialValue?)")])]),e._v(" "),s("li",[s("code",[e._v("TypedArray.prototype.reverse()")])]),e._v(" "),s("li",[s("code",[e._v("TypedArray.prototype.slice(start=0, end=this.length)")])]),e._v(" "),s("li",[s("code",[e._v("TypedArray.prototype.some(callbackfn, thisArg?)")])]),e._v(" "),s("li",[s("code",[e._v("TypedArray.prototype.sort(comparefn)")])]),e._v(" "),s("li",[s("code",[e._v("TypedArray.prototype.toLocaleString(reserved1?, reserved2?)")])]),e._v(" "),s("li",[s("code",[e._v("TypedArray.prototype.toString()")])]),e._v(" "),s("li",[s("code",[e._v("TypedArray.prototype.values()")])])]),e._v(" "),s("p",[e._v("上面所有方法的用法，请参阅数组方法的介绍，这里不再重复了。")]),e._v(" "),s("p",[e._v("注意，TypedArray 数组没有"),s("code",[e._v("concat")]),e._v("方法。如果想要合并多个 TypedArray 数组，可以用下面这个函数。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("function concatenate(resultConstructor, ...arrays) {\n  let totalLength = 0;\n  for (let arr of arrays) {\n    totalLength += arr.length;\n  }\n  let result = new resultConstructor(totalLength);\n  let offset = 0;\n  for (let arr of arrays) {\n    result.set(arr, offset);\n    offset += arr.length;\n  }\n  return result;\n}\n\nconcatenate(Uint8Array, Uint8Array.of(1, 2), Uint8Array.of(3, 4))\n// Uint8Array [1, 2, 3, 4]\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br")])]),s("p",[e._v("另外，TypedArray 数组与普通数组一样，部署了 Iterator 接口，所以可以被遍历。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("let ui8 = Uint8Array.of(0, 1, 2);\nfor (let byte of ui8) {\n  console.log(byte);\n}\n// 0\n// 1\n// 2\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br")])]),s("h3",{attrs:{id:"字节序"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#字节序"}},[e._v("#")]),e._v(" 字节序")]),e._v(" "),s("p",[e._v("字节序指的是数值在内存中的表示方式。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const buffer = new ArrayBuffer(16);\nconst int32View = new Int32Array(buffer);\n\nfor (let i = 0; i < int32View.length; i++) {\n  int32View[i] = i * 2;\n}\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br")])]),s("p",[e._v("上面代码生成一个 16 字节的"),s("code",[e._v("ArrayBuffer")]),e._v("对象，然后在它的基础上，建立了一个 32 位整数的视图。由于每个 32 位整数占据 4 个字节，所以一共可以写入 4 个整数，依次为 0，2，4，6。")]),e._v(" "),s("p",[e._v("如果在这段数据上接着建立一个 16 位整数的视图，则可以读出完全不一样的结果。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('const int16View = new Int16Array(buffer);\n\nfor (let i = 0; i < int16View.length; i++) {\n  console.log("Entry " + i + ": " + int16View[i]);\n}\n// Entry 0: 0\n// Entry 1: 0\n// Entry 2: 2\n// Entry 3: 0\n// Entry 4: 4\n// Entry 5: 0\n// Entry 6: 6\n// Entry 7: 0\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br")])]),s("p",[e._v("由于每个 16 位整数占据 2 个字节，所以整个"),s("code",[e._v("ArrayBuffer")]),e._v("对象现在分成 8 段。然后，由于 x86 体系的计算机都采用小端字节序（little endian），相对重要的字节排在后面的内存地址，相对不重要字节排在前面的内存地址，所以就得到了上面的结果。")]),e._v(" "),s("p",[e._v("比如，一个占据四个字节的 16 进制数"),s("code",[e._v("0x12345678")]),e._v("，决定其大小的最重要的字节是“12”，最不重要的是“78”。小端字节序将最不重要的字节排在前面，储存顺序就是"),s("code",[e._v("78563412")]),e._v("；大端字节序则完全相反，将最重要的字节排在前面，储存顺序就是"),s("code",[e._v("12345678")]),e._v("。目前，所有个人电脑几乎都是小端字节序，所以 TypedArray 数组内部也采用小端字节序读写数据，或者更准确的说，按照本机操作系统设定的字节序读写数据。")]),e._v(" "),s("p",[e._v("这并不意味大端字节序不重要，事实上，很多网络设备和特定的操作系统采用的是大端字节序。这就带来一个严重的问题：如果一段数据是大端字节序，TypedArray 数组将无法正确解析，因为它只能处理小端字节序！为了解决这个问题，JavaScript 引入"),s("code",[e._v("DataView")]),e._v("对象，可以设定字节序，下文会详细介绍。")]),e._v(" "),s("p",[e._v("下面是另一个例子。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("// 假定某段buffer包含如下字节 [0x02, 0x01, 0x03, 0x07]\nconst buffer = new ArrayBuffer(4);\nconst v1 = new Uint8Array(buffer);\nv1[0] = 2;\nv1[1] = 1;\nv1[2] = 3;\nv1[3] = 7;\n\nconst uInt16View = new Uint16Array(buffer);\n\n// 计算机采用小端字节序\n// 所以头两个字节等于258\nif (uInt16View[0] === 258) {\n  console.log('OK'); // \"OK\"\n}\n\n// 赋值运算\nuInt16View[0] = 255;    // 字节变为[0xFF, 0x00, 0x03, 0x07]\nuInt16View[0] = 0xff05; // 字节变为[0x05, 0xFF, 0x03, 0x07]\nuInt16View[1] = 0x0210; // 字节变为[0x05, 0xFF, 0x10, 0x02]\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br"),s("span",{staticClass:"line-number"},[e._v("17")]),s("br"),s("span",{staticClass:"line-number"},[e._v("18")]),s("br"),s("span",{staticClass:"line-number"},[e._v("19")]),s("br"),s("span",{staticClass:"line-number"},[e._v("20")]),s("br")])]),s("p",[e._v("下面的函数可以用来判断，当前视图是小端字节序，还是大端字节序。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const BIG_ENDIAN = Symbol('BIG_ENDIAN');\nconst LITTLE_ENDIAN = Symbol('LITTLE_ENDIAN');\n\nfunction getPlatformEndianness() {\n  let arr32 = Uint32Array.of(0x12345678);\n  let arr8 = new Uint8Array(arr32.buffer);\n  switch ((arr8[0]*0x1000000) + (arr8[1]*0x10000) + (arr8[2]*0x100) + (arr8[3])) {\n    case 0x12345678:\n      return BIG_ENDIAN;\n    case 0x78563412:\n      return LITTLE_ENDIAN;\n    default:\n      throw new Error('Unknown endianness');\n  }\n}\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br")])]),s("p",[e._v("总之，与普通数组相比，TypedArray 数组的最大优点就是可以直接操作内存，不需要数据类型转换，所以速度快得多。")]),e._v(" "),s("h3",{attrs:{id:"bytes-per-element-属性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#bytes-per-element-属性"}},[e._v("#")]),e._v(" BYTES_PER_ELEMENT 属性")]),e._v(" "),s("p",[e._v("每一种视图的构造函数，都有一个"),s("code",[e._v("BYTES_PER_ELEMENT")]),e._v("属性，表示这种数据类型占据的字节数。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("Int8Array.BYTES_PER_ELEMENT // 1\nUint8Array.BYTES_PER_ELEMENT // 1\nUint8ClampedArray.BYTES_PER_ELEMENT // 1\nInt16Array.BYTES_PER_ELEMENT // 2\nUint16Array.BYTES_PER_ELEMENT // 2\nInt32Array.BYTES_PER_ELEMENT // 4\nUint32Array.BYTES_PER_ELEMENT // 4\nFloat32Array.BYTES_PER_ELEMENT // 4\nFloat64Array.BYTES_PER_ELEMENT // 8\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br")])]),s("p",[e._v("这个属性在"),s("code",[e._v("TypedArray")]),e._v("实例上也能获取，即有"),s("code",[e._v("TypedArray.prototype.BYTES_PER_ELEMENT")]),e._v("。")]),e._v(" "),s("h3",{attrs:{id:"arraybuffer-与字符串的互相转换"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#arraybuffer-与字符串的互相转换"}},[e._v("#")]),e._v(" ArrayBuffer 与字符串的互相转换")]),e._v(" "),s("p",[s("code",[e._v("ArrayBuffer")]),e._v(" 和字符串的相互转换，使用原生 "),s("code",[e._v("TextEncoder")]),e._v(" 和 "),s("code",[e._v("TextDecoder")]),e._v(" 方法。为了便于说明用法，下面的代码都按照 TypeScript 的用法，给出了类型签名。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("/**\n * Convert ArrayBuffer/TypedArray to String via TextDecoder\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/API/TextDecoder\n */\nfunction ab2str(\n  input: ArrayBuffer | Uint8Array | Int8Array | Uint16Array | Int16Array | Uint32Array | Int32Array,\n  outputEncoding: string = 'utf8',\n): string {\n  const decoder = new TextDecoder(outputEncoding)\n  return decoder.decode(input)\n}\n\n/**\n * Convert String to ArrayBuffer via TextEncoder\n *\n * @see https://developer.mozilla.org/zh-CN/docs/Web/API/TextEncoder\n */\nfunction str2ab(input: string): ArrayBuffer {\n  const view = str2Uint8Array(input)\n  return view.buffer\n}\n\n/** Convert String to Uint8Array */\nfunction str2Uint8Array(input: string): Uint8Array {\n  const encoder = new TextEncoder()\n  const view = encoder.encode(input)\n  return view\n}\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br"),s("span",{staticClass:"line-number"},[e._v("17")]),s("br"),s("span",{staticClass:"line-number"},[e._v("18")]),s("br"),s("span",{staticClass:"line-number"},[e._v("19")]),s("br"),s("span",{staticClass:"line-number"},[e._v("20")]),s("br"),s("span",{staticClass:"line-number"},[e._v("21")]),s("br"),s("span",{staticClass:"line-number"},[e._v("22")]),s("br"),s("span",{staticClass:"line-number"},[e._v("23")]),s("br"),s("span",{staticClass:"line-number"},[e._v("24")]),s("br"),s("span",{staticClass:"line-number"},[e._v("25")]),s("br"),s("span",{staticClass:"line-number"},[e._v("26")]),s("br"),s("span",{staticClass:"line-number"},[e._v("27")]),s("br"),s("span",{staticClass:"line-number"},[e._v("28")]),s("br"),s("span",{staticClass:"line-number"},[e._v("29")]),s("br")])]),s("p",[e._v("上面代码中，"),s("code",[e._v("ab2str()")]),e._v("的第二个参数"),s("code",[e._v("outputEncoding")]),e._v("给出了输出编码的编码，一般保持默认值（"),s("code",[e._v("utf-8")]),e._v("），其他可选值参见"),s("a",{attrs:{href:"https://encoding.spec.whatwg.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("官方文档"),s("OutboundLink")],1),e._v("或 "),s("a",{attrs:{href:"https://nodejs.org/api/util.html#util_whatwg_supported_encodings",target:"_blank",rel:"noopener noreferrer"}},[e._v("Node.js 文档"),s("OutboundLink")],1),e._v("。")]),e._v(" "),s("h3",{attrs:{id:"溢出"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#溢出"}},[e._v("#")]),e._v(" 溢出")]),e._v(" "),s("p",[e._v("不同的视图类型，所能容纳的数值范围是确定的。超出这个范围，就会出现溢出。比如，8 位视图只能容纳一个 8 位的二进制值，如果放入一个 9 位的值，就会溢出。")]),e._v(" "),s("p",[e._v("TypedArray 数组的溢出处理规则，简单来说，就是抛弃溢出的位，然后按照视图类型进行解释。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const uint8 = new Uint8Array(1);\n\nuint8[0] = 256;\nuint8[0] // 0\n\nuint8[0] = -1;\nuint8[0] // 255\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br")])]),s("p",[e._v("上面代码中，"),s("code",[e._v("uint8")]),e._v("是一个 8 位视图，而 256 的二进制形式是一个 9 位的值"),s("code",[e._v("100000000")]),e._v("，这时就会发生溢出。根据规则，只会保留后 8 位，即"),s("code",[e._v("00000000")]),e._v("。"),s("code",[e._v("uint8")]),e._v("视图的解释规则是无符号的 8 位整数，所以"),s("code",[e._v("00000000")]),e._v("就是"),s("code",[e._v("0")]),e._v("。")]),e._v(" "),s("p",[e._v("负数在计算机内部采用“2 的补码”表示，也就是说，将对应的正数值进行否运算，然后加"),s("code",[e._v("1")]),e._v("。比如，"),s("code",[e._v("-1")]),e._v("对应的正值是"),s("code",[e._v("1")]),e._v("，进行否运算以后，得到"),s("code",[e._v("11111110")]),e._v("，再加上"),s("code",[e._v("1")]),e._v("就是补码形式"),s("code",[e._v("11111111")]),e._v("。"),s("code",[e._v("uint8")]),e._v("按照无符号的 8 位整数解释"),s("code",[e._v("11111111")]),e._v("，返回结果就是"),s("code",[e._v("255")]),e._v("。")]),e._v(" "),s("p",[e._v("一个简单转换规则，可以这样表示。")]),e._v(" "),s("ul",[s("li",[e._v("正向溢出（overflow）：当输入值大于当前数据类型的最大值，结果等于当前数据类型的最小值加上余值，再减去 1。")]),e._v(" "),s("li",[e._v("负向溢出（underflow）：当输入值小于当前数据类型的最小值，结果等于当前数据类型的最大值减去余值的绝对值，再加上 1。")])]),e._v(" "),s("p",[e._v("上面的“余值”就是模运算的结果，即 JavaScript 里面的"),s("code",[e._v("%")]),e._v("运算符的结果。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("12 % 4 // 0\n12 % 5 // 2\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br")])]),s("p",[e._v("上面代码中，12 除以 4 是没有余值的，而除以 5 会得到余值 2。")]),e._v(" "),s("p",[e._v("请看下面的例子。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const int8 = new Int8Array(1);\n\nint8[0] = 128;\nint8[0] // -128\n\nint8[0] = -129;\nint8[0] // 127\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br")])]),s("p",[e._v("上面例子中，"),s("code",[e._v("int8")]),e._v("是一个带符号的 8 位整数视图，它的最大值是 127，最小值是-128。输入值为"),s("code",[e._v("128")]),e._v("时，相当于正向溢出"),s("code",[e._v("1")]),e._v("，根据“最小值加上余值（128 除以 127 的余值是 1），再减去 1”的规则，就会返回"),s("code",[e._v("-128")]),e._v("；输入值为"),s("code",[e._v("-129")]),e._v("时，相当于负向溢出"),s("code",[e._v("1")]),e._v("，根据“最大值减去余值的绝对值（-129 除以-128 的余值的绝对值是 1），再加上 1”的规则，就会返回"),s("code",[e._v("127")]),e._v("。")]),e._v(" "),s("p",[s("code",[e._v("Uint8ClampedArray")]),e._v("视图的溢出规则，与上面的规则不同。它规定，凡是发生正向溢出，该值一律等于当前数据类型的最大值，即 255；如果发生负向溢出，该值一律等于当前数据类型的最小值，即 0。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const uint8c = new Uint8ClampedArray(1);\n\nuint8c[0] = 256;\nuint8c[0] // 255\n\nuint8c[0] = -1;\nuint8c[0] // 0\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br")])]),s("p",[e._v("上面例子中，"),s("code",[e._v("uint8C")]),e._v("是一个"),s("code",[e._v("Uint8ClampedArray")]),e._v("视图，正向溢出时都返回 255，负向溢出都返回 0。")]),e._v(" "),s("h3",{attrs:{id:"typedarray-prototype-buffer"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#typedarray-prototype-buffer"}},[e._v("#")]),e._v(" TypedArray.prototype.buffer")]),e._v(" "),s("p",[s("code",[e._v("TypedArray")]),e._v("实例的"),s("code",[e._v("buffer")]),e._v("属性，返回整段内存区域对应的"),s("code",[e._v("ArrayBuffer")]),e._v("对象。该属性为只读属性。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const a = new Float32Array(64);\nconst b = new Uint8Array(a.buffer);\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br")])]),s("p",[e._v("上面代码的"),s("code",[e._v("a")]),e._v("视图对象和"),s("code",[e._v("b")]),e._v("视图对象，对应同一个"),s("code",[e._v("ArrayBuffer")]),e._v("对象，即同一段内存。")]),e._v(" "),s("h3",{attrs:{id:"typedarray-prototype-bytelength-typedarray-prototype-byteoffset"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#typedarray-prototype-bytelength-typedarray-prototype-byteoffset"}},[e._v("#")]),e._v(" TypedArray.prototype.byteLength，TypedArray.prototype.byteOffset")]),e._v(" "),s("p",[s("code",[e._v("byteLength")]),e._v("属性返回 TypedArray 数组占据的内存长度，单位为字节。"),s("code",[e._v("byteOffset")]),e._v("属性返回 TypedArray 数组从底层"),s("code",[e._v("ArrayBuffer")]),e._v("对象的哪个字节开始。这两个属性都是只读属性。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const b = new ArrayBuffer(8);\n\nconst v1 = new Int32Array(b);\nconst v2 = new Uint8Array(b, 2);\nconst v3 = new Int16Array(b, 2, 2);\n\nv1.byteLength // 8\nv2.byteLength // 6\nv3.byteLength // 4\n\nv1.byteOffset // 0\nv2.byteOffset // 2\nv3.byteOffset // 2\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br")])]),s("h3",{attrs:{id:"typedarray-prototype-length"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#typedarray-prototype-length"}},[e._v("#")]),e._v(" TypedArray.prototype.length")]),e._v(" "),s("p",[s("code",[e._v("length")]),e._v("属性表示 "),s("code",[e._v("TypedArray")]),e._v(" 数组含有多少个成员。注意将 "),s("code",[e._v("length")]),e._v(" 属性和 "),s("code",[e._v("byteLength")]),e._v(" 属性区分，前者是成员长度，后者是字节长度。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const a = new Int16Array(8);\n\na.length // 8\na.byteLength // 16\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br")])]),s("h3",{attrs:{id:"typedarray-prototype-set"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#typedarray-prototype-set"}},[e._v("#")]),e._v(" TypedArray.prototype.set()")]),e._v(" "),s("p",[e._v("TypedArray 数组的"),s("code",[e._v("set")]),e._v("方法用于复制数组（普通数组或 TypedArray 数组），也就是将一段内容完全复制到另一段内存。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const a = new Uint8Array(8);\nconst b = new Uint8Array(8);\n\nb.set(a);\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br")])]),s("p",[e._v("上面代码复制"),s("code",[e._v("a")]),e._v("数组的内容到"),s("code",[e._v("b")]),e._v("数组，它是整段内存的复制，比一个个拷贝成员的那种复制快得多。")]),e._v(" "),s("p",[s("code",[e._v("set")]),e._v("方法还可以接受第二个参数，表示从"),s("code",[e._v("b")]),e._v("对象的哪一个成员开始复制"),s("code",[e._v("a")]),e._v("对象。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const a = new Uint16Array(8);\nconst b = new Uint16Array(10);\n\nb.set(a, 2)\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br")])]),s("p",[e._v("上面代码的"),s("code",[e._v("b")]),e._v("数组比"),s("code",[e._v("a")]),e._v("数组多两个成员，所以从"),s("code",[e._v("b[2]")]),e._v("开始复制。")]),e._v(" "),s("h3",{attrs:{id:"typedarray-prototype-subarray"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#typedarray-prototype-subarray"}},[e._v("#")]),e._v(" TypedArray.prototype.subarray()")]),e._v(" "),s("p",[s("code",[e._v("subarray")]),e._v("方法是对于 TypedArray 数组的一部分，再建立一个新的视图。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const a = new Uint16Array(8);\nconst b = a.subarray(2,3);\n\na.byteLength // 16\nb.byteLength // 2\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br")])]),s("p",[s("code",[e._v("subarray")]),e._v("方法的第一个参数是起始的成员序号，第二个参数是结束的成员序号（不含该成员），如果省略则包含剩余的全部成员。所以，上面代码的"),s("code",[e._v("a.subarray(2,3)")]),e._v("，意味着 b 只包含"),s("code",[e._v("a[2]")]),e._v("一个成员，字节长度为 2。")]),e._v(" "),s("h3",{attrs:{id:"typedarray-prototype-slice"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#typedarray-prototype-slice"}},[e._v("#")]),e._v(" TypedArray.prototype.slice()")]),e._v(" "),s("p",[e._v("TypeArray 实例的"),s("code",[e._v("slice")]),e._v("方法，可以返回一个指定位置的新的"),s("code",[e._v("TypedArray")]),e._v("实例。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("let ui8 = Uint8Array.of(0, 1, 2);\nui8.slice(-1)\n// Uint8Array [ 2 ]\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br")])]),s("p",[e._v("上面代码中，"),s("code",[e._v("ui8")]),e._v("是 8 位无符号整数数组视图的一个实例。它的"),s("code",[e._v("slice")]),e._v("方法可以从当前视图之中，返回一个新的视图实例。")]),e._v(" "),s("p",[s("code",[e._v("slice")]),e._v("方法的参数，表示原数组的具体位置，开始生成新数组。负值表示逆向的位置，即-1 为倒数第一个位置，-2 表示倒数第二个位置，以此类推。")]),e._v(" "),s("h3",{attrs:{id:"typedarray-of"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#typedarray-of"}},[e._v("#")]),e._v(" TypedArray.of()")]),e._v(" "),s("p",[e._v("TypedArray 数组的所有构造函数，都有一个静态方法"),s("code",[e._v("of")]),e._v("，用于将参数转为一个"),s("code",[e._v("TypedArray")]),e._v("实例。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("Float32Array.of(0.151, -8, 3.7)\n// Float32Array [ 0.151, -8, 3.7 ]\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br")])]),s("p",[e._v("下面三种方法都会生成同样一个 TypedArray 数组。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("// 方法一\nlet tarr = new Uint8Array([1,2,3]);\n\n// 方法二\nlet tarr = Uint8Array.of(1,2,3);\n\n// 方法三\nlet tarr = new Uint8Array(3);\ntarr[0] = 1;\ntarr[1] = 2;\ntarr[2] = 3;\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br")])]),s("h3",{attrs:{id:"typedarray-from"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#typedarray-from"}},[e._v("#")]),e._v(" TypedArray.from()")]),e._v(" "),s("p",[e._v("静态方法"),s("code",[e._v("from")]),e._v("接受一个可遍历的数据结构（比如数组）作为参数，返回一个基于这个结构的"),s("code",[e._v("TypedArray")]),e._v("实例。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("Uint16Array.from([0, 1, 2])\n// Uint16Array [ 0, 1, 2 ]\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br")])]),s("p",[e._v("这个方法还可以将一种"),s("code",[e._v("TypedArray")]),e._v("实例，转为另一种。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const ui16 = Uint16Array.from(Uint8Array.of(0, 1, 2));\nui16 instanceof Uint16Array // true\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br")])]),s("p",[s("code",[e._v("from")]),e._v("方法还可以接受一个函数，作为第二个参数，用来对每个元素进行遍历，功能类似"),s("code",[e._v("map")]),e._v("方法。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("Int8Array.of(127, 126, 125).map(x => 2 * x)\n// Int8Array [ -2, -4, -6 ]\n\nInt16Array.from(Int8Array.of(127, 126, 125), x => 2 * x)\n// Int16Array [ 254, 252, 250 ]\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br")])]),s("p",[e._v("上面的例子中，"),s("code",[e._v("from")]),e._v("方法没有发生溢出，这说明遍历不是针对原来的 8 位整数数组。也就是说，"),s("code",[e._v("from")]),e._v("会将第一个参数指定的 TypedArray 数组，拷贝到另一段内存之中，处理之后再将结果转成指定的数组格式。")]),e._v(" "),s("h2",{attrs:{id:"复合视图"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#复合视图"}},[e._v("#")]),e._v(" 复合视图")]),e._v(" "),s("p",[e._v("由于视图的构造函数可以指定起始位置和长度，所以在同一段内存之中，可以依次存放不同类型的数据，这叫做“复合视图”。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const buffer = new ArrayBuffer(24);\n\nconst idView = new Uint32Array(buffer, 0, 1);\nconst usernameView = new Uint8Array(buffer, 4, 16);\nconst amountDueView = new Float32Array(buffer, 20, 1);\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br")])]),s("p",[e._v("上面代码将一个 24 字节长度的"),s("code",[e._v("ArrayBuffer")]),e._v("对象，分成三个部分：")]),e._v(" "),s("ul",[s("li",[e._v("字节 0 到字节 3：1 个 32 位无符号整数")]),e._v(" "),s("li",[e._v("字节 4 到字节 19：16 个 8 位整数")]),e._v(" "),s("li",[e._v("字节 20 到字节 23：1 个 32 位浮点数")])]),e._v(" "),s("p",[e._v("这种数据结构可以用如下的 C 语言描述：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("struct someStruct {\n  unsigned long id;\n  char username[16];\n  float amountDue;\n};\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br")])]),s("h2",{attrs:{id:"dataview-视图"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#dataview-视图"}},[e._v("#")]),e._v(" DataView 视图")]),e._v(" "),s("p",[e._v("如果一段数据包括多种类型（比如服务器传来的 HTTP 数据），这时除了建立"),s("code",[e._v("ArrayBuffer")]),e._v("对象的复合视图以外，还可以通过"),s("code",[e._v("DataView")]),e._v("视图进行操作。")]),e._v(" "),s("p",[s("code",[e._v("DataView")]),e._v("视图提供更多操作选项，而且支持设定字节序。本来，在设计目的上，"),s("code",[e._v("ArrayBuffer")]),e._v("对象的各种"),s("code",[e._v("TypedArray")]),e._v("视图，是用来向网卡、声卡之类的本机设备传送数据，所以使用本机的字节序就可以了；而"),s("code",[e._v("DataView")]),e._v("视图的设计目的，是用来处理网络设备传来的数据，所以大端字节序或小端字节序是可以自行设定的。")]),e._v(" "),s("p",[s("code",[e._v("DataView")]),e._v("视图本身也是构造函数，接受一个"),s("code",[e._v("ArrayBuffer")]),e._v("对象作为参数，生成视图。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("new DataView(ArrayBuffer buffer [, 字节起始位置 [, 长度]]);\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("下面是一个例子。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const buffer = new ArrayBuffer(24);\nconst dv = new DataView(buffer);\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br")])]),s("p",[s("code",[e._v("DataView")]),e._v("实例有以下属性，含义与"),s("code",[e._v("TypedArray")]),e._v("实例的同名方法相同。")]),e._v(" "),s("ul",[s("li",[s("code",[e._v("DataView.prototype.buffer")]),e._v("：返回对应的 ArrayBuffer 对象")]),e._v(" "),s("li",[s("code",[e._v("DataView.prototype.byteLength")]),e._v("：返回占据的内存字节长度")]),e._v(" "),s("li",[s("code",[e._v("DataView.prototype.byteOffset")]),e._v("：返回当前视图从对应的 ArrayBuffer 对象的哪个字节开始")])]),e._v(" "),s("p",[s("code",[e._v("DataView")]),e._v("实例提供 8 个方法读取内存。")]),e._v(" "),s("ul",[s("li",[s("strong",[s("code",[e._v("getInt8")])]),e._v("：读取 1 个字节，返回一个 8 位整数。")]),e._v(" "),s("li",[s("strong",[s("code",[e._v("getUint8")])]),e._v("：读取 1 个字节，返回一个无符号的 8 位整数。")]),e._v(" "),s("li",[s("strong",[s("code",[e._v("getInt16")])]),e._v("：读取 2 个字节，返回一个 16 位整数。")]),e._v(" "),s("li",[s("strong",[s("code",[e._v("getUint16")])]),e._v("：读取 2 个字节，返回一个无符号的 16 位整数。")]),e._v(" "),s("li",[s("strong",[s("code",[e._v("getInt32")])]),e._v("：读取 4 个字节，返回一个 32 位整数。")]),e._v(" "),s("li",[s("strong",[s("code",[e._v("getUint32")])]),e._v("：读取 4 个字节，返回一个无符号的 32 位整数。")]),e._v(" "),s("li",[s("strong",[s("code",[e._v("getFloat32")])]),e._v("：读取 4 个字节，返回一个 32 位浮点数。")]),e._v(" "),s("li",[s("strong",[s("code",[e._v("getFloat64")])]),e._v("：读取 8 个字节，返回一个 64 位浮点数。")])]),e._v(" "),s("p",[e._v("这一系列"),s("code",[e._v("get")]),e._v("方法的参数都是一个字节序号（不能是负数，否则会报错），表示从哪个字节开始读取。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const buffer = new ArrayBuffer(24);\nconst dv = new DataView(buffer);\n\n// 从第1个字节读取一个8位无符号整数\nconst v1 = dv.getUint8(0);\n\n// 从第2个字节读取一个16位无符号整数\nconst v2 = dv.getUint16(1);\n\n// 从第4个字节读取一个16位无符号整数\nconst v3 = dv.getUint16(3);\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br")])]),s("p",[e._v("上面代码读取了"),s("code",[e._v("ArrayBuffer")]),e._v("对象的前 5 个字节，其中有一个 8 位整数和两个十六位整数。")]),e._v(" "),s("p",[e._v("如果一次读取两个或两个以上字节，就必须明确数据的存储方式，到底是小端字节序还是大端字节序。默认情况下，"),s("code",[e._v("DataView")]),e._v("的"),s("code",[e._v("get")]),e._v("方法使用大端字节序解读数据，如果需要使用小端字节序解读，必须在"),s("code",[e._v("get")]),e._v("方法的第二个参数指定"),s("code",[e._v("true")]),e._v("。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("// 小端字节序\nconst v1 = dv.getUint16(1, true);\n\n// 大端字节序\nconst v2 = dv.getUint16(3, false);\n\n// 大端字节序\nconst v3 = dv.getUint16(3);\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br")])]),s("p",[e._v("DataView 视图提供 8 个方法写入内存。")]),e._v(" "),s("ul",[s("li",[s("strong",[s("code",[e._v("setInt8")])]),e._v("：写入 1 个字节的 8 位整数。")]),e._v(" "),s("li",[s("strong",[s("code",[e._v("setUint8")])]),e._v("：写入 1 个字节的 8 位无符号整数。")]),e._v(" "),s("li",[s("strong",[s("code",[e._v("setInt16")])]),e._v("：写入 2 个字节的 16 位整数。")]),e._v(" "),s("li",[s("strong",[s("code",[e._v("setUint16")])]),e._v("：写入 2 个字节的 16 位无符号整数。")]),e._v(" "),s("li",[s("strong",[s("code",[e._v("setInt32")])]),e._v("：写入 4 个字节的 32 位整数。")]),e._v(" "),s("li",[s("strong",[s("code",[e._v("setUint32")])]),e._v("：写入 4 个字节的 32 位无符号整数。")]),e._v(" "),s("li",[s("strong",[s("code",[e._v("setFloat32")])]),e._v("：写入 4 个字节的 32 位浮点数。")]),e._v(" "),s("li",[s("strong",[s("code",[e._v("setFloat64")])]),e._v("：写入 8 个字节的 64 位浮点数。")])]),e._v(" "),s("p",[e._v("这一系列"),s("code",[e._v("set")]),e._v("方法，接受两个参数，第一个参数是字节序号，表示从哪个字节开始写入，第二个参数为写入的数据。对于那些写入两个或两个以上字节的方法，需要指定第三个参数，"),s("code",[e._v("false")]),e._v("或者"),s("code",[e._v("undefined")]),e._v("表示使用大端字节序写入，"),s("code",[e._v("true")]),e._v("表示使用小端字节序写入。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("// 在第1个字节，以大端字节序写入值为25的32位整数\ndv.setInt32(0, 25, false);\n\n// 在第5个字节，以大端字节序写入值为25的32位整数\ndv.setInt32(4, 25);\n\n// 在第9个字节，以小端字节序写入值为2.5的32位浮点数\ndv.setFloat32(8, 2.5, true);\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br")])]),s("p",[e._v("如果不确定正在使用的计算机的字节序，可以采用下面的判断方式。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const littleEndian = (function() {\n  const buffer = new ArrayBuffer(2);\n  new DataView(buffer).setInt16(0, 256, true);\n  return new Int16Array(buffer)[0] === 256;\n})();\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br")])]),s("p",[e._v("如果返回"),s("code",[e._v("true")]),e._v("，就是小端字节序；如果返回"),s("code",[e._v("false")]),e._v("，就是大端字节序。")]),e._v(" "),s("h2",{attrs:{id:"二进制数组的应用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二进制数组的应用"}},[e._v("#")]),e._v(" 二进制数组的应用")]),e._v(" "),s("p",[e._v("大量的 Web API 用到了"),s("code",[e._v("ArrayBuffer")]),e._v("对象和它的视图对象。")]),e._v(" "),s("h3",{attrs:{id:"ajax"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ajax"}},[e._v("#")]),e._v(" AJAX")]),e._v(" "),s("p",[e._v("传统上，服务器通过 AJAX 操作只能返回文本数据，即"),s("code",[e._v("responseType")]),e._v("属性默认为"),s("code",[e._v("text")]),e._v("。"),s("code",[e._v("XMLHttpRequest")]),e._v("第二版"),s("code",[e._v("XHR2")]),e._v("允许服务器返回二进制数据，这时分成两种情况。如果明确知道返回的二进制数据类型，可以把返回类型（"),s("code",[e._v("responseType")]),e._v("）设为"),s("code",[e._v("arraybuffer")]),e._v("；如果不知道，就设为"),s("code",[e._v("blob")]),e._v("。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("let xhr = new XMLHttpRequest();\nxhr.open('GET', someUrl);\nxhr.responseType = 'arraybuffer';\n\nxhr.onload = function () {\n  let arrayBuffer = xhr.response;\n  // ···\n};\n\nxhr.send();\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br")])]),s("p",[e._v("如果知道传回来的是 32 位整数，可以像下面这样处理。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('xhr.onreadystatechange = function () {\n  if (req.readyState === 4 ) {\n    const arrayResponse = xhr.response;\n    const dataView = new DataView(arrayResponse);\n    const ints = new Uint32Array(dataView.byteLength / 4);\n\n    xhrDiv.style.backgroundColor = "#00FF00";\n    xhrDiv.innerText = "Array is " + ints.length + "uints long";\n  }\n}\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br")])]),s("h3",{attrs:{id:"canvas"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#canvas"}},[e._v("#")]),e._v(" Canvas")]),e._v(" "),s("p",[e._v("网页"),s("code",[e._v("Canvas")]),e._v("元素输出的二进制像素数据，就是 TypedArray 数组。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const canvas = document.getElementById('myCanvas');\nconst ctx = canvas.getContext('2d');\n\nconst imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\nconst uint8ClampedArray = imageData.data;\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br")])]),s("p",[e._v("需要注意的是，上面代码的"),s("code",[e._v("uint8ClampedArray")]),e._v("虽然是一个 TypedArray 数组，但是它的视图类型是一种针对"),s("code",[e._v("Canvas")]),e._v("元素的专有类型"),s("code",[e._v("Uint8ClampedArray")]),e._v("。这个视图类型的特点，就是专门针对颜色，把每个字节解读为无符号的 8 位整数，即只能取值 0 ～ 255，而且发生运算的时候自动过滤高位溢出。这为图像处理带来了巨大的方便。")]),e._v(" "),s("p",[e._v("举例来说，如果把像素的颜色值设为"),s("code",[e._v("Uint8Array")]),e._v("类型，那么乘以一个 gamma 值的时候，就必须这样计算：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("u8[i] = Math.min(255, Math.max(0, u8[i] * gamma));\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("因为"),s("code",[e._v("Uint8Array")]),e._v("类型对于大于 255 的运算结果（比如"),s("code",[e._v("0xFF+1")]),e._v("），会自动变为"),s("code",[e._v("0x00")]),e._v("，所以图像处理必须要像上面这样算。这样做很麻烦，而且影响性能。如果将颜色值设为"),s("code",[e._v("Uint8ClampedArray")]),e._v("类型，计算就简化许多。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("pixels[i] *= gamma;\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[s("code",[e._v("Uint8ClampedArray")]),e._v("类型确保将小于 0 的值设为 0，将大于 255 的值设为 255。注意，IE 10 不支持该类型。")]),e._v(" "),s("h3",{attrs:{id:"websocket"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#websocket"}},[e._v("#")]),e._v(" WebSocket")]),e._v(" "),s("p",[s("code",[e._v("WebSocket")]),e._v("可以通过"),s("code",[e._v("ArrayBuffer")]),e._v("，发送或接收二进制数据。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("let socket = new WebSocket('ws://127.0.0.1:8081');\nsocket.binaryType = 'arraybuffer';\n\n// Wait until socket is open\nsocket.addEventListener('open', function (event) {\n  // Send binary data\n  const typedArray = new Uint8Array(4);\n  socket.send(typedArray.buffer);\n});\n\n// Receive binary data\nsocket.addEventListener('message', function (event) {\n  const arrayBuffer = event.data;\n  // ···\n});\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br")])]),s("h3",{attrs:{id:"fetch-api"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fetch-api"}},[e._v("#")]),e._v(" Fetch API")]),e._v(" "),s("p",[e._v("Fetch API 取回的数据，就是"),s("code",[e._v("ArrayBuffer")]),e._v("对象。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("fetch(url)\n.then(function(response){\n  return response.arrayBuffer()\n})\n.then(function(arrayBuffer){\n  // ...\n});\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br")])]),s("h3",{attrs:{id:"file-api"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#file-api"}},[e._v("#")]),e._v(" File API")]),e._v(" "),s("p",[e._v("如果知道一个文件的二进制数据类型，也可以将这个文件读取为"),s("code",[e._v("ArrayBuffer")]),e._v("对象。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const fileInput = document.getElementById('fileInput');\nconst file = fileInput.files[0];\nconst reader = new FileReader();\nreader.readAsArrayBuffer(file);\nreader.onload = function () {\n  const arrayBuffer = reader.result;\n  // ···\n};\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br")])]),s("p",[e._v("下面以处理 bmp 文件为例。假定"),s("code",[e._v("file")]),e._v("变量是一个指向 bmp 文件的文件对象，首先读取文件。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('const reader = new FileReader();\nreader.addEventListener("load", processimage, false);\nreader.readAsArrayBuffer(file);\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br")])]),s("p",[e._v("然后，定义处理图像的回调函数：先在二进制数据之上建立一个"),s("code",[e._v("DataView")]),e._v("视图，再建立一个"),s("code",[e._v("bitmap")]),e._v("对象，用于存放处理后的数据，最后将图像展示在"),s("code",[e._v("Canvas")]),e._v("元素之中。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("function processimage(e) {\n  const buffer = e.target.result;\n  const datav = new DataView(buffer);\n  const bitmap = {};\n  // 具体的处理步骤\n}\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br")])]),s("p",[e._v("具体处理图像数据时，先处理 bmp 的文件头。具体每个文件头的格式和定义，请参阅有关资料。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("bitmap.fileheader = {};\nbitmap.fileheader.bfType = datav.getUint16(0, true);\nbitmap.fileheader.bfSize = datav.getUint32(2, true);\nbitmap.fileheader.bfReserved1 = datav.getUint16(6, true);\nbitmap.fileheader.bfReserved2 = datav.getUint16(8, true);\nbitmap.fileheader.bfOffBits = datav.getUint32(10, true);\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br")])]),s("p",[e._v("接着处理图像元信息部分。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("bitmap.infoheader = {};\nbitmap.infoheader.biSize = datav.getUint32(14, true);\nbitmap.infoheader.biWidth = datav.getUint32(18, true);\nbitmap.infoheader.biHeight = datav.getUint32(22, true);\nbitmap.infoheader.biPlanes = datav.getUint16(26, true);\nbitmap.infoheader.biBitCount = datav.getUint16(28, true);\nbitmap.infoheader.biCompression = datav.getUint32(30, true);\nbitmap.infoheader.biSizeImage = datav.getUint32(34, true);\nbitmap.infoheader.biXPelsPerMeter = datav.getUint32(38, true);\nbitmap.infoheader.biYPelsPerMeter = datav.getUint32(42, true);\nbitmap.infoheader.biClrUsed = datav.getUint32(46, true);\nbitmap.infoheader.biClrImportant = datav.getUint32(50, true);\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br")])]),s("p",[e._v("最后处理图像本身的像素信息。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const start = bitmap.fileheader.bfOffBits;\nbitmap.pixels = new Uint8Array(buffer, start);\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br")])]),s("p",[e._v("至此，图像文件的数据全部处理完成。下一步，可以根据需要，进行图像变形，或者转换格式，或者展示在"),s("code",[e._v("Canvas")]),e._v("网页元素之中。")]),e._v(" "),s("p",[e._v("JavaScript 是单线程的，Web worker 引入了多线程：主线程用来与用户互动，Worker 线程用来承担计算任务。每个线程的数据都是隔离的，通过"),s("code",[e._v("postMessage()")]),e._v("通信。下面是一个例子。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("// 主线程\nconst w = new Worker('myworker.js');\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br")])]),s("p",[e._v("上面代码中，主线程新建了一个 Worker 线程。该线程与主线程之间会有一个通信渠道，主线程通过"),s("code",[e._v("w.postMessage")]),e._v("向 Worker 线程发消息，同时通过"),s("code",[e._v("message")]),e._v("事件监听 Worker 线程的回应。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("// 主线程\nw.postMessage('hi');\nw.onmessage = function (ev) {\n  console.log(ev.data);\n}\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br")])]),s("p",[e._v("上面代码中，主线程先发一个消息"),s("code",[e._v("hi")]),e._v("，然后在监听到 Worker 线程的回应后，就将其打印出来。")]),e._v(" "),s("p",[e._v("Worker 线程也是通过监听"),s("code",[e._v("message")]),e._v("事件，来获取主线程发来的消息，并作出反应。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("// Worker 线程\nonmessage = function (ev) {\n  console.log(ev.data);\n  postMessage('ho');\n}\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br")])]),s("p",[e._v("线程之间的数据交换可以是各种格式，不仅仅是字符串，也可以是二进制数据。这种交换采用的是复制机制，即一个进程将需要分享的数据复制一份，通过"),s("code",[e._v("postMessage")]),e._v("方法交给另一个进程。如果数据量比较大，这种通信的效率显然比较低。很容易想到，这时可以留出一块内存区域，由主线程与 Worker 线程共享，两方都可以读写，那么就会大大提高效率，协作起来也会比较简单（不像"),s("code",[e._v("postMessage")]),e._v("那么麻烦）。")]),e._v(" "),s("p",[e._v("ES2017 引入"),s("a",{attrs:{href:"https://github.com/tc39/ecmascript_sharedmem/blob/master/TUTORIAL.md",target:"_blank",rel:"noopener noreferrer"}},[s("code",[e._v("SharedArrayBuffer")]),s("OutboundLink")],1),e._v("，允许 Worker 线程与主线程共享同一块内存。"),s("code",[e._v("SharedArrayBuffer")]),e._v("的 API 与"),s("code",[e._v("ArrayBuffer")]),e._v("一模一样，唯一的区别是后者无法共享数据。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("// 主线程\n\n// 新建 1KB 共享内存\nconst sharedBuffer = new SharedArrayBuffer(1024);\n\n// 主线程将共享内存的地址发送出去\nw.postMessage(sharedBuffer);\n\n// 在共享内存上建立视图，供写入数据\nconst sharedArray = new Int32Array(sharedBuffer);\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br")])]),s("p",[e._v("上面代码中，"),s("code",[e._v("postMessage")]),e._v("方法的参数是"),s("code",[e._v("SharedArrayBuffer")]),e._v("对象。")]),e._v(" "),s("p",[e._v("Worker 线程从事件的"),s("code",[e._v("data")]),e._v("属性上面取到数据。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("// Worker 线程\nonmessage = function (ev) {\n  // 主线程共享的数据，就是 1KB 的共享内存\n  const sharedBuffer = ev.data;\n\n  // 在共享内存上建立视图，方便读写\n  const sharedArray = new Int32Array(sharedBuffer);\n\n  // ...\n};\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br")])]),s("p",[e._v("共享内存也可以在 Worker 线程创建，发给主线程。")]),e._v(" "),s("p",[s("code",[e._v("SharedArrayBuffer")]),e._v("与"),s("code",[e._v("ArrayBuffer")]),e._v("一样，本身是无法读写的，必须在上面建立视图，然后通过视图读写。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("// 分配 10 万个 32 位整数占据的内存空间\nconst sab = new SharedArrayBuffer(Int32Array.BYTES_PER_ELEMENT * 100000);\n\n// 建立 32 位整数视图\nconst ia = new Int32Array(sab);  // ia.length == 100000\n\n// 新建一个质数生成器\nconst primes = new PrimeGenerator();\n\n// 将 10 万个质数，写入这段内存空间\nfor ( let i=0 ; i < ia.length ; i++ )\n  ia[i] = primes.next();\n\n// 向 Worker 线程发送这段共享内存\nw.postMessage(ia);\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br")])]),s("p",[e._v("Worker 线程收到数据后的处理如下。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("// Worker 线程\nlet ia;\nonmessage = function (ev) {\n  ia = ev.data;\n  console.log(ia.length); // 100000\n  console.log(ia[37]); // 输出 163，因为这是第38个质数\n};\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br")])]),s("h2",{attrs:{id:"atomics-对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#atomics-对象"}},[e._v("#")]),e._v(" Atomics 对象")]),e._v(" "),s("p",[e._v("多线程共享内存，最大的问题就是如何防止两个线程同时修改某个地址，或者说，当一个线程修改共享内存以后，必须有一个机制让其他线程同步。SharedArrayBuffer API 提供"),s("code",[e._v("Atomics")]),e._v("对象，保证所有共享内存的操作都是“原子性”的，并且可以在所有线程内同步。")]),e._v(" "),s("p",[e._v("什么叫“原子性操作”呢？现代编程语言中，一条普通的命令被编译器处理以后，会变成多条机器指令。如果是单线程运行，这是没有问题的；多线程环境并且共享内存时，就会出问题，因为这一组机器指令的运行期间，可能会插入其他线程的指令，从而导致运行结果出错。请看下面的例子。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("// 主线程\nia[42] = 314159;  // 原先的值 191\nia[37] = 123456;  // 原先的值 163\n\n// Worker 线程\nconsole.log(ia[37]);\nconsole.log(ia[42]);\n// 可能的结果\n// 123456\n// 191\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br")])]),s("p",[e._v("上面代码中，主线程的原始顺序是先对 42 号位置赋值，再对 37 号位置赋值。但是，编译器和 CPU 为了优化，可能会改变这两个操作的执行顺序（因为它们之间互不依赖），先对 37 号位置赋值，再对 42 号位置赋值。而执行到一半的时候，Worker 线程可能就会来读取数据，导致打印出"),s("code",[e._v("123456")]),e._v("和"),s("code",[e._v("191")]),e._v("。")]),e._v(" "),s("p",[e._v("下面是另一个例子。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("// 主线程\nconst sab = new SharedArrayBuffer(Int32Array.BYTES_PER_ELEMENT * 100000);\nconst ia = new Int32Array(sab);\n\nfor (let i = 0; i < ia.length; i++) {\n  ia[i] = primes.next(); // 将质数放入 ia\n}\n\n// worker 线程\nia[112]++; // 错误\nAtomics.add(ia, 112, 1); // 正确\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br")])]),s("p",[e._v("上面代码中，Worker 线程直接改写共享内存"),s("code",[e._v("ia[112]++")]),e._v("是不正确的。因为这行语句会被编译成多条机器指令，这些指令之间无法保证不会插入其他进程的指令。请设想如果两个线程同时"),s("code",[e._v("ia[112]++")]),e._v("，很可能它们得到的结果都是不正确的。")]),e._v(" "),s("p",[s("code",[e._v("Atomics")]),e._v("对象就是为了解决这个问题而提出，它可以保证一个操作所对应的多条机器指令，一定是作为一个整体运行的，中间不会被打断。也就是说，它所涉及的操作都可以看作是原子性的单操作，这可以避免线程竞争，提高多线程共享内存时的操作安全。所以，"),s("code",[e._v("ia[112]++")]),e._v("要改写成"),s("code",[e._v("Atomics.add(ia, 112, 1)")]),e._v("。")]),e._v(" "),s("p",[s("code",[e._v("Atomics")]),e._v("对象提供多种方法。")]),e._v(" "),s("p",[s("strong",[e._v("（1）Atomics.store()，Atomics.load()")])]),e._v(" "),s("p",[s("code",[e._v("store()")]),e._v("方法用来向共享内存写入数据，"),s("code",[e._v("load()")]),e._v("方法用来从共享内存读出数据。比起直接的读写操作，它们的好处是保证了读写操作的原子性。")]),e._v(" "),s("p",[e._v("此外，它们还用来解决一个问题：多个线程使用共享内存的某个位置作为开关（flag），一旦该位置的值变了，就执行特定操作。这时，必须保证该位置的赋值操作，一定是在它前面的所有可能会改写内存的操作结束后执行；而该位置的取值操作，一定是在它后面所有可能会读取该位置的操作开始之前执行。"),s("code",[e._v("store()")]),e._v("方法和"),s("code",[e._v("load()")]),e._v("方法就能做到这一点，编译器不会为了优化，而打乱机器指令的执行顺序。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("Atomics.load(typedArray, index)\nAtomics.store(typedArray, index, value)\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br")])]),s("p",[s("code",[e._v("store()")]),e._v("方法接受三个参数："),s("code",[e._v("typedArray")]),e._v("对象（SharedArrayBuffer 的视图）、位置索引和值，返回"),s("code",[e._v("typedArray[index]")]),e._v("的值。"),s("code",[e._v("load()")]),e._v("方法只接受两个参数："),s("code",[e._v("typedArray")]),e._v("对象（SharedArrayBuffer 的视图）和位置索引，也是返回"),s("code",[e._v("typedArray[index]")]),e._v("的值。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("// 主线程 main.js\nia[42] = 314159;  // 原先的值 191\nAtomics.store(ia, 37, 123456);  // 原先的值是 163\n\n// Worker 线程 worker.js\nwhile (Atomics.load(ia, 37) == 163);\nconsole.log(ia[37]);  // 123456\nconsole.log(ia[42]);  // 314159\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br")])]),s("p",[e._v("上面代码中，主线程的"),s("code",[e._v("Atomics.store()")]),e._v("向 42 号位置的赋值，一定是早于 37 位置的赋值。只要 37 号位置等于 163，Worker 线程就不会终止循环，而对 37 号位置和 42 号位置的取值，一定是在"),s("code",[e._v("Atomics.load()")]),e._v("操作之后。")]),e._v(" "),s("p",[e._v("下面是另一个例子。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("// 主线程\nconst worker = new Worker('worker.js');\nconst length = 10;\nconst size = Int32Array.BYTES_PER_ELEMENT * length;\n// 新建一段共享内存\nconst sharedBuffer = new SharedArrayBuffer(size);\nconst sharedArray = new Int32Array(sharedBuffer);\nfor (let i = 0; i < 10; i++) {\n  // 向共享内存写入 10 个整数\n  Atomics.store(sharedArray, i, 0);\n}\nworker.postMessage(sharedBuffer);\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br")])]),s("p",[e._v("上面代码中，主线程用"),s("code",[e._v("Atomics.store()")]),e._v("方法写入数据。下面是 Worker 线程用"),s("code",[e._v("Atomics.load()")]),e._v("方法读取数据。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("// worker.js\nself.addEventListener('message', (event) => {\n  const sharedArray = new Int32Array(event.data);\n  for (let i = 0; i < 10; i++) {\n    const arrayValue = Atomics.load(sharedArray, i);\n    console.log(`The item at array index ${i} is ${arrayValue}`);\n  }\n}, false);\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br")])]),s("p",[s("strong",[e._v("（2）Atomics.exchange()")])]),e._v(" "),s("p",[e._v("Worker 线程如果要写入数据，可以使用上面的"),s("code",[e._v("Atomics.store()")]),e._v("方法，也可以使用"),s("code",[e._v("Atomics.exchange()")]),e._v("方法。它们的区别是，"),s("code",[e._v("Atomics.store()")]),e._v("返回写入的值，而"),s("code",[e._v("Atomics.exchange()")]),e._v("返回被替换的值。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("// Worker 线程\nself.addEventListener('message', (event) => {\n  const sharedArray = new Int32Array(event.data);\n  for (let i = 0; i < 10; i++) {\n    if (i % 2 === 0) {\n      const storedValue = Atomics.store(sharedArray, i, 1);\n      console.log(`The item at array index ${i} is now ${storedValue}`);\n    } else {\n      const exchangedValue = Atomics.exchange(sharedArray, i, 2);\n      console.log(`The item at array index ${i} was ${exchangedValue}, now 2`);\n    }\n  }\n}, false);\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br")])]),s("p",[e._v("上面代码将共享内存的偶数位置的值改成"),s("code",[e._v("1")]),e._v("，奇数位置的值改成"),s("code",[e._v("2")]),e._v("。")]),e._v(" "),s("p",[s("strong",[e._v("（3）Atomics.wait()，Atomics.notify()")])]),e._v(" "),s("p",[e._v("使用"),s("code",[e._v("while")]),e._v("循环等待主线程的通知，不是很高效，如果用在主线程，就会造成卡顿，"),s("code",[e._v("Atomics")]),e._v("对象提供了"),s("code",[e._v("wait()")]),e._v("和"),s("code",[e._v("notify()")]),e._v("两个方法用于等待通知。这两个方法相当于锁内存，即在一个线程进行操作时，让其他线程休眠（建立锁），等到操作结束，再唤醒那些休眠的线程（解除锁）。")]),e._v(" "),s("p",[s("code",[e._v("Atomics.notify()")]),e._v("方法以前叫做"),s("code",[e._v("Atomics.wake()")]),e._v("，后来进行了改名。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("// Worker 线程\nself.addEventListener('message', (event) => {\n  const sharedArray = new Int32Array(event.data);\n  const arrayIndex = 0;\n  const expectedStoredValue = 50;\n  Atomics.wait(sharedArray, arrayIndex, expectedStoredValue);\n  console.log(Atomics.load(sharedArray, arrayIndex));\n}, false);\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br")])]),s("p",[e._v("上面代码中，"),s("code",[e._v("Atomics.wait()")]),e._v("方法等同于告诉 Worker 线程，只要满足给定条件（"),s("code",[e._v("sharedArray")]),e._v("的"),s("code",[e._v("0")]),e._v("号位置等于"),s("code",[e._v("50")]),e._v("），就在这一行 Worker 线程进入休眠。")]),e._v(" "),s("p",[e._v("主线程一旦更改了指定位置的值，就可以唤醒 Worker 线程。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("// 主线程\nconst newArrayValue = 100;\nAtomics.store(sharedArray, 0, newArrayValue);\nconst arrayIndex = 0;\nconst queuePos = 1;\nAtomics.notify(sharedArray, arrayIndex, queuePos);\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br")])]),s("p",[e._v("上面代码中，"),s("code",[e._v("sharedArray")]),e._v("的"),s("code",[e._v("0")]),e._v("号位置改为"),s("code",[e._v("100")]),e._v("，然后就执行"),s("code",[e._v("Atomics.notify()")]),e._v("方法，唤醒在"),s("code",[e._v("sharedArray")]),e._v("的"),s("code",[e._v("0")]),e._v("号位置休眠队列里的一个线程。")]),e._v(" "),s("p",[s("code",[e._v("Atomics.wait()")]),e._v("方法的使用格式如下。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("Atomics.wait(sharedArray, index, value, timeout)\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("它的四个参数含义如下。")]),e._v(" "),s("ul",[s("li",[e._v("sharedArray：共享内存的视图数组。")]),e._v(" "),s("li",[e._v("index：视图数据的位置（从 0 开始）。")]),e._v(" "),s("li",[e._v("value：该位置的预期值。一旦实际值等于预期值，就进入休眠。")]),e._v(" "),s("li",[e._v("timeout：整数，表示过了这个时间以后，就自动唤醒，单位毫秒。该参数可选，默认值是"),s("code",[e._v("Infinity")]),e._v("，即无限期的休眠，只有通过"),s("code",[e._v("Atomics.notify()")]),e._v("方法才能唤醒。")])]),e._v(" "),s("p",[s("code",[e._v("Atomics.wait()")]),e._v("的返回值是一个字符串，共有三种可能的值。如果"),s("code",[e._v("sharedArray[index]")]),e._v("不等于"),s("code",[e._v("value")]),e._v("，就返回字符串"),s("code",[e._v("not-equal")]),e._v("，否则就进入休眠。如果"),s("code",[e._v("Atomics.notify()")]),e._v("方法唤醒，就返回字符串"),s("code",[e._v("ok")]),e._v("；如果因为超时唤醒，就返回字符串"),s("code",[e._v("timed-out")]),e._v("。")]),e._v(" "),s("p",[s("code",[e._v("Atomics.notify()")]),e._v("方法的使用格式如下。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("Atomics.notify(sharedArray, index, count)\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("它的三个参数含义如下。")]),e._v(" "),s("ul",[s("li",[e._v("sharedArray：共享内存的视图数组。")]),e._v(" "),s("li",[e._v("index：视图数据的位置（从 0 开始）。")]),e._v(" "),s("li",[e._v("count：需要唤醒的 Worker 线程的数量，默认为"),s("code",[e._v("Infinity")]),e._v("。")])]),e._v(" "),s("p",[s("code",[e._v("Atomics.notify()")]),e._v("方法一旦唤醒休眠的 Worker 线程，就会让它继续往下运行。")]),e._v(" "),s("p",[e._v("请看一个例子。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("// 主线程\nconsole.log(ia[37]);  // 163\nAtomics.store(ia, 37, 123456);\nAtomics.notify(ia, 37, 1);\n\n// Worker 线程\nAtomics.wait(ia, 37, 163);\nconsole.log(ia[37]);  // 123456\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br")])]),s("p",[e._v("上面代码中，视图数组"),s("code",[e._v("ia")]),e._v("的第 37 号位置，原来的值是"),s("code",[e._v("163")]),e._v("。Worker 线程使用"),s("code",[e._v("Atomics.wait()")]),e._v("方法，指定只要"),s("code",[e._v("ia[37]")]),e._v("等于"),s("code",[e._v("163")]),e._v("，就进入休眠状态。主线程使用"),s("code",[e._v("Atomics.store()")]),e._v("方法，将"),s("code",[e._v("123456")]),e._v("写入"),s("code",[e._v("ia[37]")]),e._v("，然后使用"),s("code",[e._v("Atomics.notify()")]),e._v("方法唤醒 Worker 线程。")]),e._v(" "),s("p",[e._v("另外，基于"),s("code",[e._v("wait")]),e._v("和"),s("code",[e._v("notify")]),e._v("这两个方法的锁内存实现，可以看 Lars T Hansen 的 "),s("a",{attrs:{href:"https://github.com/lars-t-hansen/js-lock-and-condition",target:"_blank",rel:"noopener noreferrer"}},[e._v("js-lock-and-condition"),s("OutboundLink")],1),e._v(" 这个库。")]),e._v(" "),s("p",[e._v("注意，浏览器的主线程不宜设置休眠，这会导致用户失去响应。而且，主线程实际上会拒绝进入休眠。")]),e._v(" "),s("p",[s("strong",[e._v("（4）运算方法")])]),e._v(" "),s("p",[e._v("共享内存上面的某些运算是不能被打断的，即不能在运算过程中，让其他线程改写内存上面的值。Atomics 对象提供了一些运算方法，防止数据被改写。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("Atomics.add(sharedArray, index, value)\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[s("code",[e._v("Atomics.add")]),e._v("用于将"),s("code",[e._v("value")]),e._v("加到"),s("code",[e._v("sharedArray[index]")]),e._v("，返回"),s("code",[e._v("sharedArray[index]")]),e._v("旧的值。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("Atomics.sub(sharedArray, index, value)\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[s("code",[e._v("Atomics.sub")]),e._v("用于将"),s("code",[e._v("value")]),e._v("从"),s("code",[e._v("sharedArray[index]")]),e._v("减去，返回"),s("code",[e._v("sharedArray[index]")]),e._v("旧的值。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("Atomics.and(sharedArray, index, value)\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[s("code",[e._v("Atomics.and")]),e._v("用于将"),s("code",[e._v("value")]),e._v("与"),s("code",[e._v("sharedArray[index]")]),e._v("进行位运算"),s("code",[e._v("and")]),e._v("，放入"),s("code",[e._v("sharedArray[index]")]),e._v("，并返回旧的值。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("Atomics.or(sharedArray, index, value)\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[s("code",[e._v("Atomics.or")]),e._v("用于将"),s("code",[e._v("value")]),e._v("与"),s("code",[e._v("sharedArray[index]")]),e._v("进行位运算"),s("code",[e._v("or")]),e._v("，放入"),s("code",[e._v("sharedArray[index]")]),e._v("，并返回旧的值。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("Atomics.xor(sharedArray, index, value)\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[s("code",[e._v("Atomic.xor")]),e._v("用于将"),s("code",[e._v("vaule")]),e._v("与"),s("code",[e._v("sharedArray[index]")]),e._v("进行位运算"),s("code",[e._v("xor")]),e._v("，放入"),s("code",[e._v("sharedArray[index]")]),e._v("，并返回旧的值。")]),e._v(" "),s("p",[s("strong",[e._v("（5）其他方法")])]),e._v(" "),s("p",[s("code",[e._v("Atomics")]),e._v("对象还有以下方法。")]),e._v(" "),s("ul",[s("li",[s("code",[e._v("Atomics.compareExchange(sharedArray, index, oldval, newval)")]),e._v("：如果"),s("code",[e._v("sharedArray[index]")]),e._v("等于"),s("code",[e._v("oldval")]),e._v("，就写入"),s("code",[e._v("newval")]),e._v("，返回"),s("code",[e._v("oldval")]),e._v("。")]),e._v(" "),s("li",[s("code",[e._v("Atomics.isLockFree(size)")]),e._v("：返回一个布尔值，表示"),s("code",[e._v("Atomics")]),e._v("对象是否可以处理某个"),s("code",[e._v("size")]),e._v("的内存锁定。如果返回"),s("code",[e._v("false")]),e._v("，应用程序就需要自己来实现锁定。")])]),e._v(" "),s("p",[s("code",[e._v("Atomics.compareExchange")]),e._v("的一个用途是，从 SharedArrayBuffer 读取一个值，然后对该值进行某个操作，操作结束以后，检查一下 SharedArrayBuffer 里面原来那个值是否发生变化（即被其他线程改写过）。如果没有改写过，就将它写回原来的位置，否则读取新的值，再重头进行一次操作。")]),e._v(" "),s("h3",{attrs:{id:"留言"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#留言"}},[e._v("#")]),e._v(" 留言")])])}),[],!1,null,null,null);a.default=r.exports}}]);