(window.webpackJsonp=window.webpackJsonp||[]).push([[79],{549:function(s,n,e){"use strict";e.r(n);var a=e(18),t=Object(a.a)({},(function(){var s=this,n=s.$createElement,e=s._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h1",{attrs:{id:"class-的继承"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#class-的继承"}},[s._v("#")]),s._v(" Class 的继承")]),s._v(" "),e("ol",[e("li",[e("a",{attrs:{href:"https://es6.ruanyifeng.com/#docs/class-extends#%E7%AE%80%E4%BB%8B",target:"_blank",rel:"noopener noreferrer"}},[s._v("简介"),e("OutboundLink")],1)]),s._v(" "),e("li",[e("a",{attrs:{href:"https://es6.ruanyifeng.com/#docs/class-extends#Object.getPrototypeOf()",target:"_blank",rel:"noopener noreferrer"}},[s._v("Object.getPrototypeOf()"),e("OutboundLink")],1)]),s._v(" "),e("li",[e("a",{attrs:{href:"https://es6.ruanyifeng.com/#docs/class-extends#super%20%E5%85%B3%E9%94%AE%E5%AD%97",target:"_blank",rel:"noopener noreferrer"}},[s._v("super 关键字"),e("OutboundLink")],1)]),s._v(" "),e("li",[e("a",{attrs:{href:"https://es6.ruanyifeng.com/#docs/class-extends#%E7%B1%BB%E7%9A%84%20prototype%20%E5%B1%9E%E6%80%A7%E5%92%8C__proto__%E5%B1%9E%E6%80%A7",target:"_blank",rel:"noopener noreferrer"}},[s._v("类的 prototype 属性和__proto__属性"),e("OutboundLink")],1)]),s._v(" "),e("li",[e("a",{attrs:{href:"https://es6.ruanyifeng.com/#docs/class-extends#%E5%8E%9F%E7%94%9F%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E7%9A%84%E7%BB%A7%E6%89%BF",target:"_blank",rel:"noopener noreferrer"}},[s._v("原生构造函数的继承"),e("OutboundLink")],1)]),s._v(" "),e("li",[e("a",{attrs:{href:"https://es6.ruanyifeng.com/#docs/class-extends#Mixin%20%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%AE%9E%E7%8E%B0",target:"_blank",rel:"noopener noreferrer"}},[s._v("Mixin 模式的实现"),e("OutboundLink")],1)])]),s._v(" "),e("h2",{attrs:{id:"简介"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#简介"}},[s._v("#")]),s._v(" 简介")]),s._v(" "),e("p",[s._v("Class 可以通过"),e("code",[s._v("extends")]),s._v("关键字实现继承，让子类继承父类的属性和方法。extends 的写法比 ES5 的原型链继承，要清晰和方便很多。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("class Point {\n}\n\nclass ColorPoint extends Point {\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("p",[s._v("上面示例中，"),e("code",[s._v("Point")]),s._v("是父类，"),e("code",[s._v("ColorPoint")]),s._v("是子类，它通过"),e("code",[s._v("extends")]),s._v("关键字，继承了"),e("code",[s._v("Point")]),s._v("类的所有属性和方法。但是由于没有部署任何代码，所以这两个类完全一样，等于复制了一个"),e("code",[s._v("Point")]),s._v("类。")]),s._v(" "),e("p",[s._v("下面，我们在"),e("code",[s._v("ColorPoint")]),s._v("内部加上代码。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("class Point { /* ... */ }\n\nclass ColorPoint extends Point {\n  constructor(x, y, color) {\n    super(x, y); // 调用父类的constructor(x, y)\n    this.color = color;\n  }\n\n  toString() {\n    return this.color + ' ' + super.toString(); // 调用父类的toString()\n  }\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br")])]),e("p",[s._v("上面示例中，"),e("code",[s._v("constructor()")]),s._v("方法和"),e("code",[s._v("toString()")]),s._v("方法内部，都出现了"),e("code",[s._v("super")]),s._v("关键字。"),e("code",[s._v("super")]),s._v("在这里表示父类的构造函数，用来新建一个父类的实例对象。")]),s._v(" "),e("p",[s._v("ES6 规定，子类必须在"),e("code",[s._v("constructor()")]),s._v("方法中调用"),e("code",[s._v("super()")]),s._v("，否则就会报错。这是因为子类自己的"),e("code",[s._v("this")]),s._v("对象，必须先通过父类的构造函数完成塑造，得到与父类同样的实例属性和方法，然后再对其进行加工，添加子类自己的实例属性和方法。如果不调用"),e("code",[s._v("super()")]),s._v("方法，子类就得不到自己的"),e("code",[s._v("this")]),s._v("对象。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("class Point { /* ... */ }\n\nclass ColorPoint extends Point {\n  constructor() {\n  }\n}\n\nlet cp = new ColorPoint(); // ReferenceError\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br")])]),e("p",[s._v("上面代码中，"),e("code",[s._v("ColorPoint")]),s._v("继承了父类"),e("code",[s._v("Point")]),s._v("，但是它的构造函数没有调用"),e("code",[s._v("super()")]),s._v("，导致新建实例时报错。")]),s._v(" "),e("p",[s._v("为什么子类的构造函数，一定要调用"),e("code",[s._v("super()")]),s._v("？原因就在于 ES6 的继承机制，与 ES5 完全不同。ES5 的继承机制，是先创造一个独立的子类的实例对象，然后再将父类的方法添加到这个对象上面，即“实例在前，继承在后”。ES6 的继承机制，则是先将父类的属性和方法，加到一个空的对象上面，然后再将该对象作为子类的实例，即“继承在前，实例在后”。这就是为什么 ES6 的继承必须先调用"),e("code",[s._v("super()")]),s._v("方法，因为这一步会生成一个继承父类的"),e("code",[s._v("this")]),s._v("对象，没有这一步就无法继承父类。")]),s._v(" "),e("p",[s._v("注意，这意味着新建子类实例时，父类的构造函数必定会先运行一次。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("class Foo {\n  constructor() {\n    console.log(1);\n  }\n}\n\nclass Bar extends Foo {\n  constructor() {\n    super();\n    console.log(2);\n  }\n}\n\nconst bar = new Bar();\n// 1\n// 2\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br")])]),e("p",[s._v("上面示例中，子类 Bar 新建实例时，会输出 1 和 2。原因就是子类构造函数调用"),e("code",[s._v("super()")]),s._v("时，会执行一次父类构造函数。")]),s._v(" "),e("p",[s._v("另一个需要注意的地方是，在子类的构造函数中，只有调用"),e("code",[s._v("super()")]),s._v("之后，才可以使用"),e("code",[s._v("this")]),s._v("关键字，否则会报错。这是因为子类实例的构建，必须先完成父类的继承，只有"),e("code",[s._v("super()")]),s._v("方法才能让子类实例继承父类。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("class Point {\n  constructor(x, y) {\n    this.x = x;\n    this.y = y;\n  }\n}\n\nclass ColorPoint extends Point {\n  constructor(x, y, color) {\n    this.color = color; // ReferenceError\n    super(x, y);\n    this.color = color; // 正确\n  }\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br")])]),e("p",[s._v("上面代码中，子类的"),e("code",[s._v("constructor()")]),s._v("方法没有调用"),e("code",[s._v("super()")]),s._v("之前，就使用"),e("code",[s._v("this")]),s._v("关键字，结果报错，而放在"),e("code",[s._v("super()")]),s._v("之后就是正确的。")]),s._v(" "),e("p",[s._v("如果子类没有定义"),e("code",[s._v("constructor()")]),s._v("方法，这个方法会默认添加，并且里面会调用"),e("code",[s._v("super()")]),s._v("。也就是说，不管有没有显式定义，任何一个子类都有"),e("code",[s._v("constructor()")]),s._v("方法。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("class ColorPoint extends Point {\n}\n\n// 等同于\nclass ColorPoint extends Point {\n  constructor(...args) {\n    super(...args);\n  }\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br")])]),e("p",[s._v("有了子类的定义，就可以生成子类的实例了。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("let cp = new ColorPoint(25, 8, 'green');\n\ncp instanceof ColorPoint // true\ncp instanceof Point // true\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])]),e("p",[s._v("上面示例中，实例对象"),e("code",[s._v("cp")]),s._v("同时是"),e("code",[s._v("ColorPoint")]),s._v("和"),e("code",[s._v("Point")]),s._v("两个类的实例，这与 ES5 的行为完全一致。")]),s._v(" "),e("p",[s._v("除了私有属性，父类的所有属性和方法，都会被子类继承，其中包括静态方法。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("class A {\n  static hello() {\n    console.log('hello world');\n  }\n}\n\nclass B extends A {\n}\n\nB.hello()  // hello world\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br")])]),e("p",[s._v("上面代码中，"),e("code",[s._v("hello()")]),s._v("是"),e("code",[s._v("A")]),s._v("类的静态方法，"),e("code",[s._v("B")]),s._v("继承"),e("code",[s._v("A")]),s._v("，也继承了"),e("code",[s._v("A")]),s._v("的静态方法。")]),s._v(" "),e("p",[s._v("子类无法继承父类的私有属性，或者说，私有属性只能在定义它的 class 里面使用。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("class Foo {\n  #p = 1;\n  #m() {\n    console.log('hello');\n  }\n}\n\nclass Bar extends Foo {\n  constructor() {\n    super();\n    console.log(this.#p); // 报错\n    this.#m(); // 报错\n  }\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br")])]),e("p",[s._v("上面示例中，子类 Bar 调用父类 Foo 的私有属性或私有方法，都会报错。")]),s._v(" "),e("p",[s._v("如果父类定义了私有属性的读写方法，子类就可以通过这些方法，读写私有属性。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("class Foo {\n  #p = 1;\n  getP() {\n    return this.#p;\n  }\n}\n\nclass Bar extends Foo {\n  constructor() {\n    super();\n    console.log(this.getP()); // 1\n  }\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br")])]),e("p",[s._v("上面示例中，"),e("code",[s._v("getP()")]),s._v("是父类用来读取私有属性的方法，通过该方法，子类就可以读到父类的私有属性。")]),s._v(" "),e("h2",{attrs:{id:"object-getprototypeof"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#object-getprototypeof"}},[s._v("#")]),s._v(" Object.getPrototypeOf()")]),s._v(" "),e("p",[e("code",[s._v("Object.getPrototypeOf()")]),s._v("方法可以用来从子类上获取父类。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("class Point { /*...*/ }\n\nclass ColorPoint extends Point { /*...*/ }\n\nObject.getPrototypeOf(ColorPoint) === Point\n// true\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br")])]),e("p",[s._v("因此，可以使用这个方法判断，一个类是否继承了另一个类。")]),s._v(" "),e("h2",{attrs:{id:"super-关键字"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#super-关键字"}},[s._v("#")]),s._v(" super 关键字")]),s._v(" "),e("p",[e("code",[s._v("super")]),s._v("这个关键字，既可以当作函数使用，也可以当作对象使用。在这两种情况下，它的用法完全不同。")]),s._v(" "),e("p",[s._v("第一种情况，"),e("code",[s._v("super")]),s._v("作为函数调用时，代表父类的构造函数。ES6 要求，子类的构造函数必须执行一次"),e("code",[s._v("super")]),s._v("函数。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("class A {}\n\nclass B extends A {\n  constructor() {\n    super();\n  }\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br")])]),e("p",[s._v("上面代码中，子类"),e("code",[s._v("B")]),s._v("的构造函数之中的"),e("code",[s._v("super()")]),s._v("，代表调用父类的构造函数。这是必须的，否则 JavaScript 引擎会报错。")]),s._v(" "),e("p",[s._v("注意，"),e("code",[s._v("super")]),s._v("虽然代表了父类"),e("code",[s._v("A")]),s._v("的构造函数，但是返回的是子类"),e("code",[s._v("B")]),s._v("的实例，即"),e("code",[s._v("super")]),s._v("内部的"),e("code",[s._v("this")]),s._v("指的是"),e("code",[s._v("B")]),s._v("的实例，因此"),e("code",[s._v("super()")]),s._v("在这里相当于"),e("code",[s._v("A.prototype.constructor.call(this)")]),s._v("。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("class A {\n  constructor() {\n    console.log(new.target.name);\n  }\n}\nclass B extends A {\n  constructor() {\n    super();\n  }\n}\nnew A() // A\nnew B() // B\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br")])]),e("p",[s._v("上面代码中，"),e("code",[s._v("new.target")]),s._v("指向当前正在执行的函数。可以看到，在"),e("code",[s._v("super()")]),s._v("执行时，它指向的是子类"),e("code",[s._v("B")]),s._v("的构造函数，而不是父类"),e("code",[s._v("A")]),s._v("的构造函数。也就是说，"),e("code",[s._v("super()")]),s._v("内部的"),e("code",[s._v("this")]),s._v("指向的是"),e("code",[s._v("B")]),s._v("。")]),s._v(" "),e("p",[s._v("作为函数时，"),e("code",[s._v("super()")]),s._v("只能用在子类的构造函数之中，用在其他地方就会报错。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("class A {}\n\nclass B extends A {\n  m() {\n    super(); // 报错\n  }\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br")])]),e("p",[s._v("上面代码中，"),e("code",[s._v("super()")]),s._v("用在"),e("code",[s._v("B")]),s._v("类的"),e("code",[s._v("m")]),s._v("方法之中，就会造成语法错误。")]),s._v(" "),e("p",[s._v("第二种情况，"),e("code",[s._v("super")]),s._v("作为对象时，在普通方法中，指向父类的原型对象；在静态方法中，指向父类。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("class A {\n  p() {\n    return 2;\n  }\n}\n\nclass B extends A {\n  constructor() {\n    super();\n    console.log(super.p()); // 2\n  }\n}\n\nlet b = new B();\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br")])]),e("p",[s._v("上面代码中，子类"),e("code",[s._v("B")]),s._v("当中的"),e("code",[s._v("super.p()")]),s._v("，就是将"),e("code",[s._v("super")]),s._v("当作一个对象使用。这时，"),e("code",[s._v("super")]),s._v("在普通方法之中，指向"),e("code",[s._v("A.prototype")]),s._v("，所以"),e("code",[s._v("super.p()")]),s._v("就相当于"),e("code",[s._v("A.prototype.p()")]),s._v("。")]),s._v(" "),e("p",[s._v("这里需要注意，由于"),e("code",[s._v("super")]),s._v("指向父类的原型对象，所以定义在父类实例上的方法或属性，是无法通过"),e("code",[s._v("super")]),s._v("调用的。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("class A {\n  constructor() {\n    this.p = 2;\n  }\n}\n\nclass B extends A {\n  get m() {\n    return super.p;\n  }\n}\n\nlet b = new B();\nb.m // undefined\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br")])]),e("p",[s._v("上面代码中，"),e("code",[s._v("p")]),s._v("是父类"),e("code",[s._v("A")]),s._v("实例的属性，"),e("code",[s._v("super.p")]),s._v("就引用不到它。")]),s._v(" "),e("p",[s._v("如果属性定义在父类的原型对象上，"),e("code",[s._v("super")]),s._v("就可以取到。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("class A {}\nA.prototype.x = 2;\n\nclass B extends A {\n  constructor() {\n    super();\n    console.log(super.x) // 2\n  }\n}\n\nlet b = new B();\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br")])]),e("p",[s._v("上面代码中，属性"),e("code",[s._v("x")]),s._v("是定义在"),e("code",[s._v("A.prototype")]),s._v("上面的，所以"),e("code",[s._v("super.x")]),s._v("可以取到它的值。")]),s._v(" "),e("p",[s._v("ES6 规定，在子类普通方法中通过"),e("code",[s._v("super")]),s._v("调用父类的方法时，方法内部的"),e("code",[s._v("this")]),s._v("指向当前的子类实例。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("class A {\n  constructor() {\n    this.x = 1;\n  }\n  print() {\n    console.log(this.x);\n  }\n}\n\nclass B extends A {\n  constructor() {\n    super();\n    this.x = 2;\n  }\n  m() {\n    super.print();\n  }\n}\n\nlet b = new B();\nb.m() // 2\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br")])]),e("p",[s._v("上面代码中，"),e("code",[s._v("super.print()")]),s._v("虽然调用的是"),e("code",[s._v("A.prototype.print()")]),s._v("，但是"),e("code",[s._v("A.prototype.print()")]),s._v("内部的"),e("code",[s._v("this")]),s._v("指向子类"),e("code",[s._v("B")]),s._v("的实例，导致输出的是"),e("code",[s._v("2")]),s._v("，而不是"),e("code",[s._v("1")]),s._v("。也就是说，实际上执行的是"),e("code",[s._v("super.print.call(this)")]),s._v("。")]),s._v(" "),e("p",[s._v("由于"),e("code",[s._v("this")]),s._v("指向子类实例，所以如果通过"),e("code",[s._v("super")]),s._v("对某个属性赋值，这时"),e("code",[s._v("super")]),s._v("就是"),e("code",[s._v("this")]),s._v("，赋值的属性会变成子类实例的属性。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("class A {\n  constructor() {\n    this.x = 1;\n  }\n}\n\nclass B extends A {\n  constructor() {\n    super();\n    this.x = 2;\n    super.x = 3;\n    console.log(super.x); // undefined\n    console.log(this.x); // 3\n  }\n}\n\nlet b = new B();\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br")])]),e("p",[s._v("上面代码中，"),e("code",[s._v("super.x")]),s._v("赋值为"),e("code",[s._v("3")]),s._v("，这时等同于对"),e("code",[s._v("this.x")]),s._v("赋值为"),e("code",[s._v("3")]),s._v("。而当读取"),e("code",[s._v("super.x")]),s._v("的时候，读的是"),e("code",[s._v("A.prototype.x")]),s._v("，所以返回"),e("code",[s._v("undefined")]),s._v("。")]),s._v(" "),e("p",[s._v("如果"),e("code",[s._v("super")]),s._v("作为对象，用在静态方法之中，这时"),e("code",[s._v("super")]),s._v("将指向父类，而不是父类的原型对象。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("class Parent {\n  static myMethod(msg) {\n    console.log('static', msg);\n  }\n\n  myMethod(msg) {\n    console.log('instance', msg);\n  }\n}\n\nclass Child extends Parent {\n  static myMethod(msg) {\n    super.myMethod(msg);\n  }\n\n  myMethod(msg) {\n    super.myMethod(msg);\n  }\n}\n\nChild.myMethod(1); // static 1\n\nvar child = new Child();\nchild.myMethod(2); // instance 2\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br")])]),e("p",[s._v("上面代码中，"),e("code",[s._v("super")]),s._v("在静态方法之中指向父类，在普通方法之中指向父类的原型对象。")]),s._v(" "),e("p",[s._v("另外，在子类的静态方法中通过"),e("code",[s._v("super")]),s._v("调用父类的方法时，方法内部的"),e("code",[s._v("this")]),s._v("指向当前的子类，而不是子类的实例。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("class A {\n  constructor() {\n    this.x = 1;\n  }\n  static print() {\n    console.log(this.x);\n  }\n}\n\nclass B extends A {\n  constructor() {\n    super();\n    this.x = 2;\n  }\n  static m() {\n    super.print();\n  }\n}\n\nB.x = 3;\nB.m() // 3\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br")])]),e("p",[s._v("上面代码中，静态方法"),e("code",[s._v("B.m")]),s._v("里面，"),e("code",[s._v("super.print")]),s._v("指向父类的静态方法。这个方法里面的"),e("code",[s._v("this")]),s._v("指向的是"),e("code",[s._v("B")]),s._v("，而不是"),e("code",[s._v("B")]),s._v("的实例。")]),s._v(" "),e("p",[s._v("注意，使用"),e("code",[s._v("super")]),s._v("的时候，必须显式指定是作为函数、还是作为对象使用，否则会报错。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("class A {}\n\nclass B extends A {\n  constructor() {\n    super();\n    console.log(super); // 报错\n  }\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br")])]),e("p",[s._v("上面代码中，"),e("code",[s._v("console.log(super)")]),s._v("当中的"),e("code",[s._v("super")]),s._v("，无法看出是作为函数使用，还是作为对象使用，所以 JavaScript 引擎解析代码的时候就会报错。这时，如果能清晰地表明"),e("code",[s._v("super")]),s._v("的数据类型，就不会报错。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("class A {}\n\nclass B extends A {\n  constructor() {\n    super();\n    console.log(super.valueOf() instanceof B); // true\n  }\n}\n\nlet b = new B();\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br")])]),e("p",[s._v("上面代码中，"),e("code",[s._v("super.valueOf()")]),s._v("表明"),e("code",[s._v("super")]),s._v("是一个对象，因此就不会报错。同时，由于"),e("code",[s._v("super")]),s._v("使得"),e("code",[s._v("this")]),s._v("指向"),e("code",[s._v("B")]),s._v("的实例，所以"),e("code",[s._v("super.valueOf()")]),s._v("返回的是一个"),e("code",[s._v("B")]),s._v("的实例。")]),s._v(" "),e("p",[s._v("最后，由于对象总是继承其他对象的，所以可以在任意一个对象中，使用"),e("code",[s._v("super")]),s._v("关键字。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('var obj = {\n  toString() {\n    return "MyObject: " + super.toString();\n  }\n};\n\nobj.toString(); // MyObject: [object Object]\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br")])]),e("h2",{attrs:{id:"类的-prototype-属性和-proto-属性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#类的-prototype-属性和-proto-属性"}},[s._v("#")]),s._v(" 类的 prototype 属性和__proto__属性")]),s._v(" "),e("p",[s._v("大多数浏览器的 ES5 实现之中，每一个对象都有"),e("code",[s._v("__proto__")]),s._v("属性，指向对应的构造函数的"),e("code",[s._v("prototype")]),s._v("属性。Class 作为构造函数的语法糖，同时有"),e("code",[s._v("prototype")]),s._v("属性和"),e("code",[s._v("__proto__")]),s._v("属性，因此同时存在两条继承链。")]),s._v(" "),e("p",[s._v("（1）子类的"),e("code",[s._v("__proto__")]),s._v("属性，表示构造函数的继承，总是指向父类。")]),s._v(" "),e("p",[s._v("（2）子类"),e("code",[s._v("prototype")]),s._v("属性的"),e("code",[s._v("__proto__")]),s._v("属性，表示方法的继承，总是指向父类的"),e("code",[s._v("prototype")]),s._v("属性。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("class A {\n}\n\nclass B extends A {\n}\n\nB.__proto__ === A // true\nB.prototype.__proto__ === A.prototype // true\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br")])]),e("p",[s._v("上面代码中，子类"),e("code",[s._v("B")]),s._v("的"),e("code",[s._v("__proto__")]),s._v("属性指向父类"),e("code",[s._v("A")]),s._v("，子类"),e("code",[s._v("B")]),s._v("的"),e("code",[s._v("prototype")]),s._v("属性的"),e("code",[s._v("__proto__")]),s._v("属性指向父类"),e("code",[s._v("A")]),s._v("的"),e("code",[s._v("prototype")]),s._v("属性。")]),s._v(" "),e("p",[s._v("这样的结果是因为，类的继承是按照下面的模式实现的。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("class A {\n}\n\nclass B {\n}\n\n// B 的实例继承 A 的实例\nObject.setPrototypeOf(B.prototype, A.prototype);\n\n// B 继承 A 的静态属性\nObject.setPrototypeOf(B, A);\n\nconst b = new B();\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br")])]),e("p",[s._v("《对象的扩展》一章给出过"),e("code",[s._v("Object.setPrototypeOf")]),s._v("方法的实现。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("Object.setPrototypeOf = function (obj, proto) {\n  obj.__proto__ = proto;\n  return obj;\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])]),e("p",[s._v("因此，就得到了上面的结果。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("Object.setPrototypeOf(B.prototype, A.prototype);\n// 等同于\nB.prototype.__proto__ = A.prototype;\n\nObject.setPrototypeOf(B, A);\n// 等同于\nB.__proto__ = A;\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br")])]),e("p",[s._v("这两条继承链，可以这样理解：作为一个对象，子类（"),e("code",[s._v("B")]),s._v("）的原型（"),e("code",[s._v("__proto__")]),s._v("属性）是父类（"),e("code",[s._v("A")]),s._v("）；作为一个构造函数，子类（"),e("code",[s._v("B")]),s._v("）的原型对象（"),e("code",[s._v("prototype")]),s._v("属性）是父类的原型对象（"),e("code",[s._v("prototype")]),s._v("属性）的实例。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("B.prototype = Object.create(A.prototype);\n// 等同于\nB.prototype.__proto__ = A.prototype;\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("p",[e("code",[s._v("extends")]),s._v("关键字后面可以跟多种类型的值。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("class B extends A {\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("p",[s._v("上面代码的"),e("code",[s._v("A")]),s._v("，只要是一个有"),e("code",[s._v("prototype")]),s._v("属性的函数，就能被"),e("code",[s._v("B")]),s._v("继承。由于函数都有"),e("code",[s._v("prototype")]),s._v("属性（除了"),e("code",[s._v("Function.prototype")]),s._v("函数），因此"),e("code",[s._v("A")]),s._v("可以是任意函数。")]),s._v(" "),e("p",[s._v("下面，讨论两种情况。第一种，子类继承"),e("code",[s._v("Object")]),s._v("类。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("class A extends Object {\n}\n\nA.__proto__ === Object // true\nA.prototype.__proto__ === Object.prototype // true\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("p",[s._v("这种情况下，"),e("code",[s._v("A")]),s._v("其实就是构造函数"),e("code",[s._v("Object")]),s._v("的复制，"),e("code",[s._v("A")]),s._v("的实例就是"),e("code",[s._v("Object")]),s._v("的实例。")]),s._v(" "),e("p",[s._v("第二种情况，不存在任何继承。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("class A {\n}\n\nA.__proto__ === Function.prototype // true\nA.prototype.__proto__ === Object.prototype // true\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("p",[s._v("这种情况下，"),e("code",[s._v("A")]),s._v("作为一个基类（即不存在任何继承），就是一个普通函数，所以直接继承"),e("code",[s._v("Function.prototype")]),s._v("。但是，"),e("code",[s._v("A")]),s._v("调用后返回一个空对象（即"),e("code",[s._v("Object")]),s._v("实例），所以"),e("code",[s._v("A.prototype.__proto__")]),s._v("指向构造函数（"),e("code",[s._v("Object")]),s._v("）的"),e("code",[s._v("prototype")]),s._v("属性。")]),s._v(" "),e("h3",{attrs:{id:"实例的-proto-属性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#实例的-proto-属性"}},[s._v("#")]),s._v(" 实例的 __proto__ 属性")]),s._v(" "),e("p",[s._v("子类实例的"),e("code",[s._v("__proto__")]),s._v("属性的"),e("code",[s._v("__proto__")]),s._v("属性，指向父类实例的"),e("code",[s._v("__proto__")]),s._v("属性。也就是说，子类的原型的原型，是父类的原型。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("var p1 = new Point(2, 3);\nvar p2 = new ColorPoint(2, 3, 'red');\n\np2.__proto__ === p1.__proto__ // false\np2.__proto__.__proto__ === p1.__proto__ // true\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("p",[s._v("上面代码中，"),e("code",[s._v("ColorPoint")]),s._v("继承了"),e("code",[s._v("Point")]),s._v("，导致前者原型的原型是后者的原型。")]),s._v(" "),e("p",[s._v("因此，通过子类实例的"),e("code",[s._v("__proto__.__proto__")]),s._v("属性，可以修改父类实例的行为。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("p2.__proto__.__proto__.printName = function () {\n  console.log('Ha');\n};\n\np1.printName() // \"Ha\"\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("p",[s._v("上面代码在"),e("code",[s._v("ColorPoint")]),s._v("的实例"),e("code",[s._v("p2")]),s._v("上向"),e("code",[s._v("Point")]),s._v("类添加方法，结果影响到了"),e("code",[s._v("Point")]),s._v("的实例"),e("code",[s._v("p1")]),s._v("。")]),s._v(" "),e("h2",{attrs:{id:"原生构造函数的继承"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#原生构造函数的继承"}},[s._v("#")]),s._v(" 原生构造函数的继承")]),s._v(" "),e("p",[s._v("原生构造函数是指语言内置的构造函数，通常用来生成数据结构。ECMAScript 的原生构造函数大致有下面这些。")]),s._v(" "),e("ul",[e("li",[s._v("Boolean()")]),s._v(" "),e("li",[s._v("Number()")]),s._v(" "),e("li",[s._v("String()")]),s._v(" "),e("li",[s._v("Array()")]),s._v(" "),e("li",[s._v("Date()")]),s._v(" "),e("li",[s._v("Function()")]),s._v(" "),e("li",[s._v("RegExp()")]),s._v(" "),e("li",[s._v("Error()")]),s._v(" "),e("li",[s._v("Object()")])]),s._v(" "),e("p",[s._v("以前，这些原生构造函数是无法继承的，比如，不能自己定义一个"),e("code",[s._v("Array")]),s._v("的子类。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("function MyArray() {\n  Array.apply(this, arguments);\n}\n\nMyArray.prototype = Object.create(Array.prototype, {\n  constructor: {\n    value: MyArray,\n    writable: true,\n    configurable: true,\n    enumerable: true\n  }\n});\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br")])]),e("p",[s._v("上面代码定义了一个继承 Array 的"),e("code",[s._v("MyArray")]),s._v("类。但是，这个类的行为与"),e("code",[s._v("Array")]),s._v("完全不一致。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('var colors = new MyArray();\ncolors[0] = "red";\ncolors.length  // 0\n\ncolors.length = 0;\ncolors[0]  // "red"\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br")])]),e("p",[s._v("之所以会发生这种情况，是因为子类无法获得原生构造函数的内部属性，通过"),e("code",[s._v("Array.apply()")]),s._v("或者分配给原型对象都不行。原生构造函数会忽略"),e("code",[s._v("apply")]),s._v("方法传入的"),e("code",[s._v("this")]),s._v("，也就是说，原生构造函数的"),e("code",[s._v("this")]),s._v("无法绑定，导致拿不到内部属性。")]),s._v(" "),e("p",[s._v("ES5 是先新建子类的实例对象"),e("code",[s._v("this")]),s._v("，再将父类的属性添加到子类上，由于父类的内部属性无法获取，导致无法继承原生的构造函数。比如，"),e("code",[s._v("Array")]),s._v("构造函数有一个内部属性"),e("code",[s._v("[[DefineOwnProperty]]")]),s._v("，用来定义新属性时，更新"),e("code",[s._v("length")]),s._v("属性，这个内部属性无法在子类获取，导致子类的"),e("code",[s._v("length")]),s._v("属性行为不正常。")]),s._v(" "),e("p",[s._v("下面的例子中，我们想让一个普通对象继承"),e("code",[s._v("Error")]),s._v("对象。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("var e = {};\n\nObject.getOwnPropertyNames(Error.call(e))\n// [ 'stack' ]\n\nObject.getOwnPropertyNames(e)\n// []\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br")])]),e("p",[s._v("上面代码中，我们想通过"),e("code",[s._v("Error.call(e)")]),s._v("这种写法，让普通对象"),e("code",[s._v("e")]),s._v("具有"),e("code",[s._v("Error")]),s._v("对象的实例属性。但是，"),e("code",[s._v("Error.call()")]),s._v("完全忽略传入的第一个参数，而是返回一个新对象，"),e("code",[s._v("e")]),s._v("本身没有任何变化。这证明了"),e("code",[s._v("Error.call(e)")]),s._v("这种写法，无法继承原生构造函数。")]),s._v(" "),e("p",[s._v("ES6 允许继承原生构造函数定义子类，因为 ES6 是先新建父类的实例对象"),e("code",[s._v("this")]),s._v("，然后再用子类的构造函数修饰"),e("code",[s._v("this")]),s._v("，使得父类的所有行为都可以继承。下面是一个继承"),e("code",[s._v("Array")]),s._v("的例子。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("class MyArray extends Array {\n  constructor(...args) {\n    super(...args);\n  }\n}\n\nvar arr = new MyArray();\narr[0] = 12;\narr.length // 1\n\narr.length = 0;\narr[0] // undefined\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br")])]),e("p",[s._v("上面代码定义了一个"),e("code",[s._v("MyArray")]),s._v("类，继承了"),e("code",[s._v("Array")]),s._v("构造函数，因此就可以从"),e("code",[s._v("MyArray")]),s._v("生成数组的实例。这意味着，ES6 可以自定义原生数据结构（比如"),e("code",[s._v("Array")]),s._v("、"),e("code",[s._v("String")]),s._v("等）的子类，这是 ES5 无法做到的。")]),s._v(" "),e("p",[s._v("上面这个例子也说明，"),e("code",[s._v("extends")]),s._v("关键字不仅可以用来继承类，还可以用来继承原生的构造函数。因此可以在原生数据结构的基础上，定义自己的数据结构。下面就是定义了一个带版本功能的数组。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("class VersionedArray extends Array {\n  constructor() {\n    super();\n    this.history = [[]];\n  }\n  commit() {\n    this.history.push(this.slice());\n  }\n  revert() {\n    this.splice(0, this.length, ...this.history[this.history.length - 1]);\n  }\n}\n\nvar x = new VersionedArray();\n\nx.push(1);\nx.push(2);\nx // [1, 2]\nx.history // [[]]\n\nx.commit();\nx.history // [[], [1, 2]]\n\nx.push(3);\nx // [1, 2, 3]\nx.history // [[], [1, 2]]\n\nx.revert();\nx // [1, 2]\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br")])]),e("p",[s._v("上面代码中，"),e("code",[s._v("VersionedArray")]),s._v("会通过"),e("code",[s._v("commit")]),s._v("方法，将自己的当前状态生成一个版本快照，存入"),e("code",[s._v("history")]),s._v("属性。"),e("code",[s._v("revert")]),s._v("方法用来将数组重置为最新一次保存的版本。除此之外，"),e("code",[s._v("VersionedArray")]),s._v("依然是一个普通数组，所有原生的数组方法都可以在它上面调用。")]),s._v(" "),e("p",[s._v("下面是一个自定义"),e("code",[s._v("Error")]),s._v("子类的例子，可以用来定制报错时的行为。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('class ExtendableError extends Error {\n  constructor(message) {\n    super();\n    this.message = message;\n    this.stack = (new Error()).stack;\n    this.name = this.constructor.name;\n  }\n}\n\nclass MyError extends ExtendableError {\n  constructor(m) {\n    super(m);\n  }\n}\n\nvar myerror = new MyError(\'ll\');\nmyerror.message // "ll"\nmyerror instanceof Error // true\nmyerror.name // "MyError"\nmyerror.stack\n// Error\n//     at MyError.ExtendableError\n//     ...\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br")])]),e("p",[s._v("注意，继承"),e("code",[s._v("Object")]),s._v("的子类，有一个"),e("a",{attrs:{href:"https://stackoverflow.com/questions/36203614/super-does-not-pass-arguments-when-instantiating-a-class-extended-from-object",target:"_blank",rel:"noopener noreferrer"}},[s._v("行为差异"),e("OutboundLink")],1),s._v("。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("class NewObj extends Object{\n  constructor(){\n    super(...arguments);\n  }\n}\nvar o = new NewObj({attr: true});\no.attr === true  // false\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br")])]),e("p",[s._v("上面代码中，"),e("code",[s._v("NewObj")]),s._v("继承了"),e("code",[s._v("Object")]),s._v("，但是无法通过"),e("code",[s._v("super")]),s._v("方法向父类"),e("code",[s._v("Object")]),s._v("传参。这是因为 ES6 改变了"),e("code",[s._v("Object")]),s._v("构造函数的行为，一旦发现"),e("code",[s._v("Object")]),s._v("方法不是通过"),e("code",[s._v("new Object()")]),s._v("这种形式调用，ES6 规定"),e("code",[s._v("Object")]),s._v("构造函数会忽略参数。")]),s._v(" "),e("h2",{attrs:{id:"mixin-模式的实现"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#mixin-模式的实现"}},[s._v("#")]),s._v(" Mixin 模式的实现")]),s._v(" "),e("p",[s._v("Mixin 指的是多个对象合成一个新的对象，新对象具有各个组成成员的接口。它的最简单实现如下。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("const a = {\n  a: 'a'\n};\nconst b = {\n  b: 'b'\n};\nconst c = {...a, ...b}; // {a: 'a', b: 'b'}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br")])]),e("p",[s._v("上面代码中，"),e("code",[s._v("c")]),s._v("对象是"),e("code",[s._v("a")]),s._v("对象和"),e("code",[s._v("b")]),s._v("对象的合成，具有两者的接口。")]),s._v(" "),e("p",[s._v("下面是一个更完备的实现，将多个类的接口“混入”（mix in）另一个类。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("function mix(...mixins) {\n  class Mix {\n    constructor() {\n      for (let mixin of mixins) {\n        copyProperties(this, new mixin()); // 拷贝实例属性\n      }\n    }\n  }\n\n  for (let mixin of mixins) {\n    copyProperties(Mix, mixin); // 拷贝静态属性\n    copyProperties(Mix.prototype, mixin.prototype); // 拷贝原型属性\n  }\n\n  return Mix;\n}\n\nfunction copyProperties(target, source) {\n  for (let key of Reflect.ownKeys(source)) {\n    if ( key !== 'constructor'\n      && key !== 'prototype'\n      && key !== 'name'\n    ) {\n      let desc = Object.getOwnPropertyDescriptor(source, key);\n      Object.defineProperty(target, key, desc);\n    }\n  }\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br")])]),e("p",[s._v("上面代码的"),e("code",[s._v("mix")]),s._v("函数，可以将多个对象合成为一个类。使用的时候，只要继承这个类即可。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("class DistributedEdit extends mix(Loggable, Serializable) {\n  // ...\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("h3",{attrs:{id:"留言"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#留言"}},[s._v("#")]),s._v(" 留言")])])}),[],!1,null,null,null);n.default=t.exports}}]);