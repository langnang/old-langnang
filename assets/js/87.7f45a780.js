(window.webpackJsonp=window.webpackJsonp||[]).push([[87],{556:function(s,n,a){"use strict";a.r(n);var e=a(18),t=Object(e.a)({},(function(){var s=this,n=s.$createElement,a=s._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"装饰器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#装饰器"}},[s._v("#")]),s._v(" 装饰器")]),s._v(" "),a("ol",[a("li",[a("a",{attrs:{href:"https://es6.ruanyifeng.com/#docs/decorator#%E8%A3%85%E9%A5%B0%E5%99%A8%E7%9A%84%E7%A7%8D%E7%B1%BB%EF%BC%88%E6%96%B0%E8%AF%AD%E6%B3%95%EF%BC%89",target:"_blank",rel:"noopener noreferrer"}},[s._v("装饰器的种类（新语法）"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"https://es6.ruanyifeng.com/#docs/decorator#%E8%A3%85%E9%A5%B0%E5%99%A8%20API%EF%BC%88%E6%96%B0%E8%AF%AD%E6%B3%95%EF%BC%89",target:"_blank",rel:"noopener noreferrer"}},[s._v("装饰器 API（新语法）"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"https://es6.ruanyifeng.com/#docs/decorator#%E7%B1%BB%E7%9A%84%E8%A3%85%E9%A5%B0",target:"_blank",rel:"noopener noreferrer"}},[s._v("类的装饰"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"https://es6.ruanyifeng.com/#docs/decorator#%E7%B1%BB%E8%A3%85%E9%A5%B0%E5%99%A8%EF%BC%88%E6%96%B0%E8%AF%AD%E6%B3%95%EF%BC%89",target:"_blank",rel:"noopener noreferrer"}},[s._v("类装饰器（新语法）"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"https://es6.ruanyifeng.com/#docs/decorator#%E6%96%B9%E6%B3%95%E8%A3%85%E9%A5%B0%E5%99%A8%EF%BC%88%E6%96%B0%E8%AF%AD%E6%B3%95%EF%BC%89",target:"_blank",rel:"noopener noreferrer"}},[s._v("方法装饰器（新语法）"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"https://es6.ruanyifeng.com/#docs/decorator#%E6%96%B9%E6%B3%95%E7%9A%84%E8%A3%85%E9%A5%B0",target:"_blank",rel:"noopener noreferrer"}},[s._v("方法的装饰"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"https://es6.ruanyifeng.com/#docs/decorator#%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A3%85%E9%A5%B0%E5%99%A8%E4%B8%8D%E8%83%BD%E7%94%A8%E4%BA%8E%E5%87%BD%E6%95%B0%EF%BC%9F",target:"_blank",rel:"noopener noreferrer"}},[s._v("为什么装饰器不能用于函数？"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"https://es6.ruanyifeng.com/#docs/decorator#%E5%AD%98%E5%8F%96%E5%99%A8%E8%A3%85%E9%A5%B0%E5%99%A8%EF%BC%88%E6%96%B0%E8%AF%AD%E6%B3%95%EF%BC%89",target:"_blank",rel:"noopener noreferrer"}},[s._v("存取器装饰器（新语法）"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"https://es6.ruanyifeng.com/#docs/decorator#%E5%B1%9E%E6%80%A7%E8%A3%85%E9%A5%B0%E5%99%A8%EF%BC%88%E6%96%B0%E8%AF%AD%E6%B3%95%EF%BC%89",target:"_blank",rel:"noopener noreferrer"}},[s._v("属性装饰器（新语法）"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"https://es6.ruanyifeng.com/#docs/decorator#accessor%20%E5%91%BD%E4%BB%A4%EF%BC%88%E6%96%B0%E8%AF%AD%E6%B3%95%EF%BC%89",target:"_blank",rel:"noopener noreferrer"}},[s._v("accessor 命令（新语法）"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"https://es6.ruanyifeng.com/#docs/decorator#addInitializer()%20%E6%96%B9%E6%B3%95%EF%BC%88%E6%96%B0%E8%AF%AD%E6%B3%95%EF%BC%89",target:"_blank",rel:"noopener noreferrer"}},[s._v("addInitializer() 方法（新语法）"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"https://es6.ruanyifeng.com/#docs/decorator#core-decorators.js",target:"_blank",rel:"noopener noreferrer"}},[s._v("core-decorators.js"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"https://es6.ruanyifeng.com/#docs/decorator#%E4%BD%BF%E7%94%A8%E8%A3%85%E9%A5%B0%E5%99%A8%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E5%8F%91%E5%B8%83%E4%BA%8B%E4%BB%B6",target:"_blank",rel:"noopener noreferrer"}},[s._v("使用装饰器实现自动发布事件"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"https://es6.ruanyifeng.com/#docs/decorator#Mixin",target:"_blank",rel:"noopener noreferrer"}},[s._v("Mixin"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"https://es6.ruanyifeng.com/#docs/decorator#Trait",target:"_blank",rel:"noopener noreferrer"}},[s._v("Trait"),a("OutboundLink")],1)])]),s._v(" "),a("p",[s._v("[说明] Decorator 提案经历了重大的语法变化，目前处于第三阶段，定案之前不知道是否还有变化。本章现在属于草稿阶段，凡是标注“新语法”的章节，都是基于当前的语法，不过没有详细整理，只是一些原始材料；未标注“新语法”的章节基于以前的语法，是过去遗留的稿子。之所以保留以前的内容，有两个原因，一是 TypeScript 装饰器会用到这些语法，二是里面包含不少有价值的内容。等到标准完全定案，本章将彻底重写：删去过时内容，补充材料，增加解释。（2022 年 6 月）")]),s._v(" "),a("p",[s._v("装饰器（Decorator）用来增强 JavaScript 类（class）的功能，许多面向对象的语言都有这种语法，目前有一个"),a("a",{attrs:{href:"https://github.com/tc39/proposal-decorators",target:"_blank",rel:"noopener noreferrer"}},[s._v("提案"),a("OutboundLink")],1),s._v("将其引入了 ECMAScript。")]),s._v(" "),a("p",[s._v("装饰器是一种函数，写成"),a("code",[s._v("@ + 函数名")]),s._v("。它可以放在类和类方法的定义前面。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("@frozen class Foo {\n  @configurable(false)\n  @enumerable(true)\n  method() {}\n\n  @throttle(500)\n  expensiveMethod() {}\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[s._v("上面代码一共使用了四个装饰器，一个用在类本身，另外三个用在类方法。它们不仅增加了代码的可读性，清晰地表达了意图，而且提供一种方便的手段，增加或修改类的功能。")]),s._v(" "),a("h2",{attrs:{id:"装饰器的种类-新语法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#装饰器的种类-新语法"}},[s._v("#")]),s._v(" 装饰器的种类（新语法）")]),s._v(" "),a("p",[s._v("装饰器可以用来装饰四种类型的值。")]),s._v(" "),a("ul",[a("li",[s._v("类")]),s._v(" "),a("li",[s._v("类的属性（public, private, and static）")]),s._v(" "),a("li",[s._v("类的方法（public, private, and static）")]),s._v(" "),a("li",[s._v("属性存取器（accessor）（public, private, and static）")])]),s._v(" "),a("h2",{attrs:{id:"装饰器-api-新语法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#装饰器-api-新语法"}},[s._v("#")]),s._v(" 装饰器 API（新语法）")]),s._v(" "),a("p",[s._v("装饰器是一个函数，API 的类型描述如下（TypeScript 写法）。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("type Decorator = (value: Input, context: {\n  kind: string;\n  name: string | symbol;\n  access: {\n    get?(): unknown;\n    set?(value: unknown): void;\n  };\n  private?: boolean;\n  static?: boolean;\n  addInitializer?(initializer: () => void): void;\n}) => Output | void;\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("p",[s._v("装饰器函数调用时，会接收到两个参数。")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("value")]),s._v("：被装饰的值，某些情况下可能是"),a("code",[s._v("undefined")]),s._v("（装饰属性时）。")]),s._v(" "),a("li",[a("code",[s._v("context")]),s._v("：一个对象，包含了被装饰的值的上下文信息。")])]),s._v(" "),a("p",[s._v("另外，"),a("code",[s._v("input")]),s._v("和"),a("code",[s._v("output")]),s._v("表示输入的值和输出的值，每种装饰器都不一样，放在后面介绍。所有装饰器都可以不返回任何值。")]),s._v(" "),a("p",[a("code",[s._v("context")]),s._v("对象的属性如下。")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("kind")]),s._v("：字符串，表示装饰类型，可能取值有"),a("code",[s._v("class")]),s._v("、"),a("code",[s._v("method")]),s._v("、"),a("code",[s._v("getter")]),s._v("、"),a("code",[s._v("setter")]),s._v("、"),a("code",[s._v("field")]),s._v("、"),a("code",[s._v("accessor")]),s._v("。")]),s._v(" "),a("li",[a("code",[s._v("name")]),s._v("：被装饰的值的名称: The name of the value, or in the case of private elements the description of it (e.g. the readable name).")]),s._v(" "),a("li",[a("code",[s._v("access")]),s._v("：对象，包含访问这个值的方法，即存值器和取值器。")]),s._v(" "),a("li",[a("code",[s._v("static")]),s._v(": 布尔值，该值是否为静态元素。")]),s._v(" "),a("li",[a("code",[s._v("private")]),s._v("：布尔值，该值是否为私有元素。")]),s._v(" "),a("li",[a("code",[s._v("addInitializer")]),s._v("：函数，允许用户增加初始化逻辑。")])]),s._v(" "),a("p",[s._v("装饰器的执行步骤如下。")]),s._v(" "),a("ol",[a("li",[s._v("计算各个装饰器的值，按照从左到右，从上到下的顺序。")]),s._v(" "),a("li",[s._v("调用方法装饰器。")]),s._v(" "),a("li",[s._v("调用类装饰器。")])]),s._v(" "),a("h2",{attrs:{id:"类的装饰"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类的装饰"}},[s._v("#")]),s._v(" 类的装饰")]),s._v(" "),a("p",[s._v("装饰器可以用来装饰整个类。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("@testable\nclass MyTestableClass {\n  // ...\n}\n\nfunction testable(target) {\n  target.isTestable = true;\n}\n\nMyTestableClass.isTestable // true\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("p",[s._v("上面代码中，"),a("code",[s._v("@testable")]),s._v("就是一个装饰器。它修改了"),a("code",[s._v("MyTestableClass")]),s._v("这个类的行为，为它加上了静态属性"),a("code",[s._v("isTestable")]),s._v("。"),a("code",[s._v("testable")]),s._v("函数的参数"),a("code",[s._v("target")]),s._v("是"),a("code",[s._v("MyTestableClass")]),s._v("类本身。")]),s._v(" "),a("p",[s._v("基本上，装饰器的行为就是下面这样。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("@decorator\nclass A {}\n\n// 等同于\n\nclass A {}\nA = decorator(A) || A;\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("也就是说，装饰器是一个对类进行处理的函数。装饰器函数的第一个参数，就是所要装饰的目标类。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function testable(target) {\n  // ...\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("上面代码中，"),a("code",[s._v("testable")]),s._v("函数的参数"),a("code",[s._v("target")]),s._v("，就是会被装饰的类。")]),s._v(" "),a("p",[s._v("如果觉得一个参数不够用，可以在装饰器外面再封装一层函数。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function testable(isTestable) {\n  return function(target) {\n    target.isTestable = isTestable;\n  }\n}\n\n@testable(true)\nclass MyTestableClass {}\nMyTestableClass.isTestable // true\n\n@testable(false)\nclass MyClass {}\nMyClass.isTestable // false\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br")])]),a("p",[s._v("上面代码中，装饰器"),a("code",[s._v("testable")]),s._v("可以接受参数，这就等于可以修改装饰器的行为。")]),s._v(" "),a("p",[s._v("注意，装饰器对类的行为的改变，是代码编译时发生的，而不是在运行时。这意味着，装饰器能在编译阶段运行代码。也就是说，装饰器本质就是编译时执行的函数。")]),s._v(" "),a("p",[s._v("前面的例子是为类添加一个静态属性，如果想添加实例属性，可以通过目标类的"),a("code",[s._v("prototype")]),s._v("对象操作。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function testable(target) {\n  target.prototype.isTestable = true;\n}\n\n@testable\nclass MyTestableClass {}\n\nlet obj = new MyTestableClass();\nobj.isTestable // true\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[s._v("上面代码中，装饰器函数"),a("code",[s._v("testable")]),s._v("是在目标类的"),a("code",[s._v("prototype")]),s._v("对象上添加属性，因此就可以在实例上调用。")]),s._v(" "),a("p",[s._v("下面是另外一个例子。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// mixins.js\nexport function mixins(...list) {\n  return function (target) {\n    Object.assign(target.prototype, ...list)\n  }\n}\n\n// main.js\nimport { mixins } from './mixins.js'\n\nconst Foo = {\n  foo() { console.log('foo') }\n};\n\n@mixins(Foo)\nclass MyClass {}\n\nlet obj = new MyClass();\nobj.foo() // 'foo'\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br")])]),a("p",[s._v("上面代码通过装饰器"),a("code",[s._v("mixins")]),s._v("，把"),a("code",[s._v("Foo")]),s._v("对象的方法添加到了"),a("code",[s._v("MyClass")]),s._v("的实例上面。可以用"),a("code",[s._v("Object.assign()")]),s._v("模拟这个功能。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("const Foo = {\n  foo() { console.log('foo') }\n};\n\nclass MyClass {}\n\nObject.assign(MyClass.prototype, Foo);\n\nlet obj = new MyClass();\nobj.foo() // 'foo'\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("p",[s._v("实际开发中，React 与 Redux 库结合使用时，常常需要写成下面这样。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("class MyReactComponent extends React.Component {}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MyReactComponent);\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("有了装饰器，就可以改写上面的代码。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("@connect(mapStateToProps, mapDispatchToProps)\nexport default class MyReactComponent extends React.Component {}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("相对来说，后一种写法看上去更容易理解。")]),s._v(" "),a("h2",{attrs:{id:"类装饰器-新语法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类装饰器-新语法"}},[s._v("#")]),s._v(" 类装饰器（新语法）")]),s._v(" "),a("p",[s._v("类装饰器的类型描述如下。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('type ClassDecorator = (value: Function, context: {\n  kind: "class";\n  name: string | undefined;\n  addInitializer(initializer: () => void): void;\n}) => Function | void;\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("类装饰器的第一个参数，就是被装饰的类。第二个参数是上下文对象，如果被装饰的类是一个匿名类，"),a("code",[s._v("name")]),s._v("属性就为"),a("code",[s._v("undefined")]),s._v("。")]),s._v(" "),a("p",[s._v("类装饰器可以返回一个新的类，取代原来的类，也可以不返回任何值。如果返回的不是构造函数，就会报错。")]),s._v(" "),a("p",[s._v("下面是一个例子。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('function logged(value, { kind, name }) {\n  if (kind === "class") {\n    return class extends value {\n      constructor(...args) {\n        super(...args);\n        console.log(`constructing an instance of ${name} with arguments ${args.join(", ")}`);\n      }\n    }\n  }\n\n  // ...\n}\n\n@logged\nclass C {}\n\nnew C(1);\n// constructing an instance of C with arguments 1\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br")])]),a("p",[s._v("如果不使用装饰器，类装饰器实际上执行的是下面的语法。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('class C {}\n\nC = logged(C, {\n  kind: "class",\n  name: "C",\n}) ?? C;\n\nnew C(1);\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("h2",{attrs:{id:"方法装饰器-新语法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#方法装饰器-新语法"}},[s._v("#")]),s._v(" 方法装饰器（新语法）")]),s._v(" "),a("p",[s._v("方式装饰器使用 TypeScript 描述类型如下。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('type ClassMethodDecorator = (value: Function, context: {\n  kind: "method";\n  name: string | symbol;\n  access: { get(): unknown };\n  static: boolean;\n  private: boolean;\n  addInitializer(initializer: () => void): void;\n}) => Function | void;\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[s._v("方法装饰器的第一个参数"),a("code",[s._v("value")]),s._v("，就是所要装饰的方法。")]),s._v(" "),a("p",[s._v("方法装饰器可以返回一个新方法，取代原来的方法，也可以不返回值，表示依然使用原来的方法。如果返回其他类型的值，就会报错。")]),s._v(" "),a("p",[s._v("下面是一个例子。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('function logged(value, { kind, name }) {\n  if (kind === "method") {\n    return function (...args) {\n      console.log(`starting ${name} with arguments ${args.join(", ")}`);\n      const ret = value.call(this, ...args);\n      console.log(`ending ${name}`);\n      return ret;\n    };\n  }\n}\n\nclass C {\n  @logged\n  m(arg) {}\n}\n\nnew C().m(1);\n// starting m with arguments 1\n// ending m\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br")])]),a("p",[s._v("上面示例中，装饰器"),a("code",[s._v("@logged")]),s._v("返回一个函数，代替原来的"),a("code",[s._v("m()")]),s._v("方法。")]),s._v(" "),a("p",[s._v("这里的装饰器实际上是一个语法糖，真正的操作是像下面这样，改掉原型链上面"),a("code",[s._v("m()")]),s._v("方法。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('class C {\n  m(arg) {}\n}\n\nC.prototype.m = logged(C.prototype.m, {\n  kind: "method",\n  name: "m",\n  static: false,\n  private: false,\n}) ?? C.prototype.m;\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("h2",{attrs:{id:"方法的装饰"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#方法的装饰"}},[s._v("#")]),s._v(" 方法的装饰")]),s._v(" "),a("p",[s._v("装饰器不仅可以装饰类，还可以装饰类的属性。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("class Person {\n  @readonly\n  name() { return `${this.first} ${this.last}` }\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("上面代码中，装饰器"),a("code",[s._v("readonly")]),s._v("用来装饰“类”的"),a("code",[s._v("name")]),s._v("方法。")]),s._v(" "),a("p",[s._v("装饰器函数"),a("code",[s._v("readonly")]),s._v("一共可以接受三个参数。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function readonly(target, name, descriptor){\n  // descriptor对象原来的值如下\n  // {\n  //   value: specifiedFunction,\n  //   enumerable: false,\n  //   configurable: true,\n  //   writable: true\n  // };\n  descriptor.writable = false;\n  return descriptor;\n}\n\nreadonly(Person.prototype, 'name', descriptor);\n// 类似于\nObject.defineProperty(Person.prototype, 'name', descriptor);\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br")])]),a("p",[s._v("装饰器第一个参数是类的原型对象，上例是"),a("code",[s._v("Person.prototype")]),s._v("，装饰器的本意是要“装饰”类的实例，但是这个时候实例还没生成，所以只能去装饰原型（这不同于类的装饰，那种情况时"),a("code",[s._v("target")]),s._v("参数指的是类本身）；第二个参数是所要装饰的属性名，第三个参数是该属性的描述对象。")]),s._v(" "),a("p",[s._v("另外，上面代码说明，装饰器（readonly）会修改属性的描述对象（descriptor），然后被修改的描述对象再用来定义属性。")]),s._v(" "),a("p",[s._v("下面是另一个例子，修改属性描述对象的"),a("code",[s._v("enumerable")]),s._v("属性，使得该属性不可遍历。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("class Person {\n  @nonenumerable\n  get kidCount() { return this.children.length; }\n}\n\nfunction nonenumerable(target, name, descriptor) {\n  descriptor.enumerable = false;\n  return descriptor;\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[s._v("下面的"),a("code",[s._v("@log")]),s._v("装饰器，可以起到输出日志的作用。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("class Math {\n  @log\n  add(a, b) {\n    return a + b;\n  }\n}\n\nfunction log(target, name, descriptor) {\n  var oldValue = descriptor.value;\n\n  descriptor.value = function() {\n    console.log(`Calling ${name} with`, arguments);\n    return oldValue.apply(this, arguments);\n  };\n\n  return descriptor;\n}\n\nconst math = new Math();\n\n// passed parameters should get logged now\nmath.add(2, 4);\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br")])]),a("p",[s._v("上面代码中，"),a("code",[s._v("@log")]),s._v("装饰器的作用就是在执行原始的操作之前，执行一次"),a("code",[s._v("console.log")]),s._v("，从而达到输出日志的目的。")]),s._v(" "),a("p",[s._v("装饰器有注释的作用。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("@testable\nclass Person {\n  @readonly\n  @nonenumerable\n  name() { return `${this.first} ${this.last}` }\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("从上面代码中，我们一眼就能看出，"),a("code",[s._v("Person")]),s._v("类是可测试的，而"),a("code",[s._v("name")]),s._v("方法是只读和不可枚举的。")]),s._v(" "),a("p",[s._v("下面是使用 Decorator 写法的"),a("a",{attrs:{href:"https://github.com/ionic-team/stencil",target:"_blank",rel:"noopener noreferrer"}},[s._v("组件"),a("OutboundLink")],1),s._v("，看上去一目了然。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("@Component({\n  tag: 'my-component',\n  styleUrl: 'my-component.scss'\n})\nexport class MyComponent {\n  @Prop() first: string;\n  @Prop() last: string;\n  @State() isVisible: boolean = true;\n\n  render() {\n    return (\n      <p>Hello, my name is {this.first} {this.last}</p>\n    );\n  }\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br")])]),a("p",[s._v("如果同一个方法有多个装饰器，会像剥洋葱一样，先从外到内进入，然后由内向外执行。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function dec(id){\n  console.log('evaluated', id);\n  return (target, property, descriptor) => console.log('executed', id);\n}\n\nclass Example {\n    @dec(1)\n    @dec(2)\n    method(){}\n}\n// evaluated 1\n// evaluated 2\n// executed 2\n// executed 1\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br")])]),a("p",[s._v("上面代码中，外层装饰器"),a("code",[s._v("@dec(1)")]),s._v("先进入，但是内层装饰器"),a("code",[s._v("@dec(2)")]),s._v("先执行。")]),s._v(" "),a("p",[s._v("除了注释，装饰器还能用来类型检查。所以，对于类来说，这项功能相当有用。从长期来看，它将是 JavaScript 代码静态分析的重要工具。")]),s._v(" "),a("h2",{attrs:{id:"为什么装饰器不能用于函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么装饰器不能用于函数"}},[s._v("#")]),s._v(" 为什么装饰器不能用于函数？")]),s._v(" "),a("p",[s._v("装饰器只能用于类和类的方法，不能用于函数，因为存在函数提升。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("var counter = 0;\n\nvar add = function () {\n  counter++;\n};\n\n@add\nfunction foo() {\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[s._v("上面的代码，意图是执行后"),a("code",[s._v("counter")]),s._v("等于 1，但是实际上结果是"),a("code",[s._v("counter")]),s._v("等于 0。因为函数提升，使得实际执行的代码是下面这样。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("var counter;\nvar add;\n\n@add\nfunction foo() {\n}\n\ncounter = 0;\n\nadd = function () {\n  counter++;\n};\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("p",[s._v("下面是另一个例子。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('var readOnly = require("some-decorator");\n\n@readOnly\nfunction foo() {\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("上面代码也有问题，因为实际执行是下面这样。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('var readOnly;\n\n@readOnly\nfunction foo() {\n}\n\nreadOnly = require("some-decorator");\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("总之，由于存在函数提升，使得装饰器不能用于函数。类是不会提升的，所以就没有这方面的问题。")]),s._v(" "),a("p",[s._v("另一方面，如果一定要装饰函数，可以采用高阶函数的形式直接执行。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function doSomething(name) {\n  console.log('Hello, ' + name);\n}\n\nfunction loggingDecorator(wrapped) {\n  return function() {\n    console.log('Starting');\n    const result = wrapped.apply(this, arguments);\n    console.log('Finished');\n    return result;\n  }\n}\n\nconst wrapped = loggingDecorator(doSomething);\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br")])]),a("h2",{attrs:{id:"存取器装饰器-新语法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#存取器装饰器-新语法"}},[s._v("#")]),s._v(" 存取器装饰器（新语法）")]),s._v(" "),a("p",[s._v("存取器装饰器使用 TypeScript 描述的类型如下。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('type ClassGetterDecorator = (value: Function, context: {\n  kind: "getter";\n  name: string | symbol;\n  access: { get(): unknown };\n  static: boolean;\n  private: boolean;\n  addInitializer(initializer: () => void): void;\n}) => Function | void;\n\ntype ClassSetterDecorator = (value: Function, context: {\n  kind: "setter";\n  name: string | symbol;\n  access: { set(value: unknown): void };\n  static: boolean;\n  private: boolean;\n  addInitializer(initializer: () => void): void;\n}) => Function | void;\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br")])]),a("p",[s._v("存取器装饰器的第一个参数就是原始的存值器（setter）和取值器（getter）。")]),s._v(" "),a("p",[s._v("存取器装饰器的返回值如果是一个函数，就会取代原来的存取器。本质上，就像方法装饰器一样，修改发生在类的原型对象上。它也可以不返回任何值，继续使用原来的存取器。如果返回其他类型的值，就会报错。")]),s._v(" "),a("p",[s._v("存取器装饰器对存值器（setter）和取值器（getter）是分开作用的。下面的例子里面，"),a("code",[s._v("@foo")]),s._v("只装饰"),a("code",[s._v("get x()")]),s._v("，不装饰"),a("code",[s._v("set x()")]),s._v("。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("class C {\n  @foo\n  get x() {\n    // ...\n  }\n\n  set x(val) {\n    // ...\n  }\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("p",[s._v("上一节的"),a("code",[s._v("@logged")]),s._v("装饰器稍加修改，就可以用在存取装饰器。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('function logged(value, { kind, name }) {\n  if (kind === "method" || kind === "getter" || kind === "setter") {\n    return function (...args) {\n      console.log(`starting ${name} with arguments ${args.join(", ")}`);\n      const ret = value.call(this, ...args);\n      console.log(`ending ${name}`);\n      return ret;\n    };\n  }\n}\n\nclass C {\n  @logged\n  set x(arg) {}\n}\n\nnew C().x = 1\n// starting x with arguments 1\n// ending x\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br")])]),a("p",[s._v("如果去掉语法糖，使用传统语法来写，就是改掉了类的原型链。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('class C {\n  set x(arg) {}\n}\n\nlet { set } = Object.getOwnPropertyDescriptor(C.prototype, "x");\nset = logged(set, {\n  kind: "setter",\n  name: "x",\n  static: false,\n  private: false,\n}) ?? set;\n\nObject.defineProperty(C.prototype, "x", { set });\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br")])]),a("h2",{attrs:{id:"属性装饰器-新语法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#属性装饰器-新语法"}},[s._v("#")]),s._v(" 属性装饰器（新语法）")]),s._v(" "),a("p",[s._v("属性装饰器的类型描述如下。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('type ClassFieldDecorator = (value: undefined, context: {\n  kind: "field";\n  name: string | symbol;\n  access: { get(): unknown, set(value: unknown): void };\n  static: boolean;\n  private: boolean;\n}) => (initialValue: unknown) => unknown | void;\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("属性装饰器的第一个参数是"),a("code",[s._v("undefined")]),s._v("，即没有一个直接的输入值。用户可以选择让装饰器返回一个初始化函数，当该属性被赋值时，这个初始化函数会自动运行，它会收到属性的初始值，然后返回一个新的初始值。属性装饰器也可以不返回任何值。只要返回的不是函数，而是其他类型的值，就会报错。")]),s._v(" "),a("p",[s._v("下面是一个例子。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('function logged(value, { kind, name }) {\n  if (kind === "field") {\n    return function (initialValue) {\n      console.log(`initializing ${name} with value ${initialValue}`);\n      return initialValue;\n    };\n  }\n\n  // ...\n}\n\nclass C {\n  @logged x = 1;\n}\n\nnew C();\n// initializing x with value 1\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br")])]),a("p",[s._v("如果不使用装饰器语法，属性装饰器的实际作用如下。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('let initializeX = logged(undefined, {\n  kind: "field",\n  name: "x",\n  static: false,\n  private: false,\n}) ?? (initialValue) => initialValue;\n\nclass C {\n  x = initializeX.call(this, 1);\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("h2",{attrs:{id:"accessor-命令-新语法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#accessor-命令-新语法"}},[s._v("#")]),s._v(" accessor 命令（新语法）")]),s._v(" "),a("p",[s._v("类装饰器引入了一个新命令"),a("code",[s._v("accessor")]),s._v("，用来属性的前缀。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("class C {\n  accessor x = 1;\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("它是一种简写形式，相当于声明属性"),a("code",[s._v("x")]),s._v("是私有属性"),a("code",[s._v("#x")]),s._v("的存取接口。上面的代码等同于下面的代码。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("class C {\n  #x = 1;\n\n  get x() {\n    return this.#x;\n  }\n\n  set x(val) {\n    this.#x = val;\n  }\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("p",[a("code",[s._v("accessor")]),s._v("命令前面，还可以加上"),a("code",[s._v("static")]),s._v("命令和"),a("code",[s._v("private")]),s._v("命令。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("class C {\n  static accessor x = 1;\n  accessor #y = 2;\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[a("code",[s._v("accessor")]),s._v("命令前面还可以接受属性装饰器。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('function logged(value, { kind, name }) {\n  if (kind === "accessor") {\n    let { get, set } = value;\n\n    return {\n      get() {\n        console.log(`getting ${name}`);\n\n        return get.call(this);\n      },\n\n      set(val) {\n        console.log(`setting ${name} to ${val}`);\n\n        return set.call(this, val);\n      },\n\n      init(initialValue) {\n        console.log(`initializing ${name} with value ${initialValue}`);\n        return initialValue;\n      }\n    };\n  }\n\n  // ...\n}\n\nclass C {\n  @logged accessor x = 1;\n}\n\nlet c = new C();\n// initializing x with value 1\nc.x;\n// getting x\nc.x = 123;\n// setting x to 123\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br")])]),a("p",[s._v("上面的示例等同于使用"),a("code",[s._v("@logged")]),s._v("装饰器，改写"),a("code",[s._v("accessor")]),s._v("属性的 getter 和 setter 方法。")]),s._v(" "),a("p",[s._v("用于"),a("code",[s._v("accessor")]),s._v("的属性装饰器的类型描述如下。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('type ClassAutoAccessorDecorator = (\n  value: {\n    get: () => unknown;\n    set(value: unknown) => void;\n  },\n  context: {\n    kind: "accessor";\n    name: string | symbol;\n    access: { get(): unknown, set(value: unknown): void };\n    static: boolean;\n    private: boolean;\n    addInitializer(initializer: () => void): void;\n  }\n) => {\n  get?: () => unknown;\n  set?: (value: unknown) => void;\n  initialize?: (initialValue: unknown) => unknown;\n} | void;\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br")])]),a("p",[a("code",[s._v("accessor")]),s._v("命令的第一个参数接收到的是一个对象，包含了"),a("code",[s._v("accessor")]),s._v("命令定义的属性的存取器 get 和 set。属性装饰器可以返回一个新对象，其中包含了新的存取器，用来取代原来的，即相当于拦截了原来的存取器。此外，返回的对象还可以包括一个"),a("code",[s._v("initialize")]),s._v("函数，用来改变私有属性的初始值。装饰器也可以不返回值，如果返回的是其他类型的值，或者包含其他属性的对象，就会报错。")]),s._v(" "),a("h2",{attrs:{id:"addinitializer-方法-新语法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#addinitializer-方法-新语法"}},[s._v("#")]),s._v(" addInitializer() 方法（新语法）")]),s._v(" "),a("p",[s._v("除了属性装饰器，其他装饰器的上下文对象还包括一个"),a("code",[s._v("addInitializer()")]),s._v("方法，用来完成初始化操作。")]),s._v(" "),a("p",[s._v("它的运行时间如下。")]),s._v(" "),a("ul",[a("li",[s._v("类装饰器：在类被完全定义之后。")]),s._v(" "),a("li",[s._v("方法装饰器：在类构造期间运行，在属性初始化之前。")]),s._v(" "),a("li",[s._v("静态方法装饰器：在类定义期间运行，早于静态属性定义，但晚于类方法的定义。")])]),s._v(" "),a("p",[s._v("下面是一个例子。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function customElement(name) {\n  return (value, { addInitializer }) => {\n    addInitializer(function() {\n      customElements.define(name, this);\n    });\n  }\n}\n\n@customElement('my-element')\nclass MyElement extends HTMLElement {\n  static get observedAttributes() {\n    return ['some', 'attrs'];\n  }\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br")])]),a("p",[s._v("上面的代码等同于下面不使用装饰器的代码。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("class MyElement {\n  static get observedAttributes() {\n    return ['some', 'attrs'];\n  }\n}\n\nlet initializersForMyElement = [];\n\nMyElement = customElement('my-element')(MyElement, {\n  kind: \"class\",\n  name: \"MyElement\",\n  addInitializer(fn) {\n    initializersForMyElement.push(fn);\n  },\n}) ?? MyElement;\n\nfor (let initializer of initializersForMyElement) {\n  initializer.call(MyElement);\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br")])]),a("p",[s._v("下面是方法装饰器的例子。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('function bound(value, { name, addInitializer }) {\n  addInitializer(function () {\n    this[name] = this[name].bind(this);\n  });\n}\n\nclass C {\n  message = "hello!";\n\n  @bound\n  m() {\n    console.log(this.message);\n  }\n}\n\nlet { m } = new C();\n\nm(); // hello!\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br")])]),a("p",[s._v("上面的代码等同于下面不使用装饰器的代码。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('class C {\n  constructor() {\n    for (let initializer of initializersForM) {\n      initializer.call(this);\n    }\n\n    this.message = "hello!";\n  }\n\n  m() {}\n}\n\nlet initializersForM = []\n\nC.prototype.m = bound(\n  C.prototype.m,\n  {\n    kind: "method",\n    name: "m",\n    static: false,\n    private: false,\n    addInitializer(fn) {\n      initializersForM.push(fn);\n    },\n  }\n) ?? C.prototype.m;\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br")])]),a("h2",{attrs:{id:"core-decorators-js"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#core-decorators-js"}},[s._v("#")]),s._v(" core-decorators.js")]),s._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/jayphelps/core-decorators.js",target:"_blank",rel:"noopener noreferrer"}},[s._v("core-decorators.js"),a("OutboundLink")],1),s._v("是一个第三方模块，提供了几个常见的装饰器，通过它可以更好地理解装饰器。")]),s._v(" "),a("p",[a("strong",[s._v("（1）@autobind")])]),s._v(" "),a("p",[a("code",[s._v("autobind")]),s._v("装饰器使得方法中的"),a("code",[s._v("this")]),s._v("对象，绑定原始对象。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("import { autobind } from 'core-decorators';\n\nclass Person {\n  @autobind\n  getPerson() {\n    return this;\n  }\n}\n\nlet person = new Person();\nlet getPerson = person.getPerson;\n\ngetPerson() === person;\n// true\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br")])]),a("p",[a("strong",[s._v("（2）@readonly")])]),s._v(" "),a("p",[a("code",[s._v("readonly")]),s._v("装饰器使得属性或方法不可写。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("import { readonly } from 'core-decorators';\n\nclass Meal {\n  @readonly\n  entree = 'steak';\n}\n\nvar dinner = new Meal();\ndinner.entree = 'salmon';\n// Cannot assign to read only property 'entree' of [object Object]\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("p",[a("strong",[s._v("（3）@override")])]),s._v(" "),a("p",[a("code",[s._v("override")]),s._v("装饰器检查子类的方法，是否正确覆盖了父类的同名方法，如果不正确会报错。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("import { override } from 'core-decorators';\n\nclass Parent {\n  speak(first, second) {}\n}\n\nclass Child extends Parent {\n  @override\n  speak() {}\n  // SyntaxError: Child#speak() does not properly override Parent#speak(first, second)\n}\n\n// or\n\nclass Child extends Parent {\n  @override\n  speaks() {}\n  // SyntaxError: No descriptor matching Child#speaks() was found on the prototype chain.\n  //\n  //   Did you mean \"speak\"?\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br")])]),a("p",[a("strong",[s._v("（4）@deprecate (别名@deprecated)")])]),s._v(" "),a("p",[a("code",[s._v("deprecate")]),s._v("或"),a("code",[s._v("deprecated")]),s._v("装饰器在控制台显示一条警告，表示该方法将废除。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("import { deprecate } from 'core-decorators';\n\nclass Person {\n  @deprecate\n  facepalm() {}\n\n  @deprecate('We stopped facepalming')\n  facepalmHard() {}\n\n  @deprecate('We stopped facepalming', { url: 'http://knowyourmeme.com/memes/facepalm' })\n  facepalmHarder() {}\n}\n\nlet person = new Person();\n\nperson.facepalm();\n// DEPRECATION Person#facepalm: This function will be removed in future versions.\n\nperson.facepalmHard();\n// DEPRECATION Person#facepalmHard: We stopped facepalming\n\nperson.facepalmHarder();\n// DEPRECATION Person#facepalmHarder: We stopped facepalming\n//\n//     See http://knowyourmeme.com/memes/facepalm for more details.\n//\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br")])]),a("p",[a("strong",[s._v("（5）@suppressWarnings")])]),s._v(" "),a("p",[a("code",[s._v("suppressWarnings")]),s._v("装饰器抑制"),a("code",[s._v("deprecated")]),s._v("装饰器导致的"),a("code",[s._v("console.warn()")]),s._v("调用。但是，异步代码发出的调用除外。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("import { suppressWarnings } from 'core-decorators';\n\nclass Person {\n  @deprecated\n  facepalm() {}\n\n  @suppressWarnings\n  facepalmWithoutWarning() {\n    this.facepalm();\n  }\n}\n\nlet person = new Person();\n\nperson.facepalmWithoutWarning();\n// no warning is logged\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br")])]),a("h2",{attrs:{id:"使用装饰器实现自动发布事件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用装饰器实现自动发布事件"}},[s._v("#")]),s._v(" 使用装饰器实现自动发布事件")]),s._v(" "),a("p",[s._v("我们可以使用装饰器，使得对象的方法被调用时，自动发出一个事件。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("const postal = require(\"postal/lib/postal.lodash\");\n\nexport default function publish(topic, channel) {\n  const channelName = channel || '/';\n  const msgChannel = postal.channel(channelName);\n  msgChannel.subscribe(topic, v => {\n    console.log('频道: ', channelName);\n    console.log('事件: ', topic);\n    console.log('数据: ', v);\n  });\n\n  return function(target, name, descriptor) {\n    const fn = descriptor.value;\n\n    descriptor.value = function() {\n      let value = fn.apply(this, arguments);\n      msgChannel.publish(topic, value);\n    };\n  };\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br")])]),a("p",[s._v("上面代码定义了一个名为"),a("code",[s._v("publish")]),s._v("的装饰器，它通过改写"),a("code",[s._v("descriptor.value")]),s._v("，使得原方法被调用时，会自动发出一个事件。它使用的事件“发布/订阅”库是"),a("a",{attrs:{href:"https://github.com/postaljs/postal.js",target:"_blank",rel:"noopener noreferrer"}},[s._v("Postal.js"),a("OutboundLink")],1),s._v("。")]),s._v(" "),a("p",[s._v("它的用法如下。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// index.js\nimport publish from './publish';\n\nclass FooComponent {\n  @publish('foo.some.message', 'component')\n  someMethod() {\n    return { my: 'data' };\n  }\n  @publish('foo.some.other')\n  anotherMethod() {\n    // ...\n  }\n}\n\nlet foo = new FooComponent();\n\nfoo.someMethod();\nfoo.anotherMethod();\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br")])]),a("p",[s._v("以后，只要调用"),a("code",[s._v("someMethod")]),s._v("或者"),a("code",[s._v("anotherMethod")]),s._v("，就会自动发出一个事件。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("$ bash-node index.js\n频道:  component\n事件:  foo.some.message\n数据:  { my: 'data' }\n\n频道:  /\n事件:  foo.some.other\n数据:  undefined\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("h2",{attrs:{id:"mixin"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mixin"}},[s._v("#")]),s._v(" Mixin")]),s._v(" "),a("p",[s._v("在装饰器的基础上，可以实现"),a("code",[s._v("Mixin")]),s._v("模式。所谓"),a("code",[s._v("Mixin")]),s._v("模式，就是对象继承的一种替代方案，中文译为“混入”（mix in），意为在一个对象之中混入另外一个对象的方法。")]),s._v(" "),a("p",[s._v("请看下面的例子。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("const Foo = {\n  foo() { console.log('foo') }\n};\n\nclass MyClass {}\n\nObject.assign(MyClass.prototype, Foo);\n\nlet obj = new MyClass();\nobj.foo() // 'foo'\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("p",[s._v("上面代码之中，对象"),a("code",[s._v("Foo")]),s._v("有一个"),a("code",[s._v("foo")]),s._v("方法，通过"),a("code",[s._v("Object.assign")]),s._v("方法，可以将"),a("code",[s._v("foo")]),s._v("方法“混入”"),a("code",[s._v("MyClass")]),s._v("类，导致"),a("code",[s._v("MyClass")]),s._v("的实例"),a("code",[s._v("obj")]),s._v("对象都具有"),a("code",[s._v("foo")]),s._v("方法。这就是“混入”模式的一个简单实现。")]),s._v(" "),a("p",[s._v("下面，我们部署一个通用脚本"),a("code",[s._v("mixins.js")]),s._v("，将 Mixin 写成一个装饰器。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("export function mixins(...list) {\n  return function (target) {\n    Object.assign(target.prototype, ...list);\n  };\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("然后，就可以使用上面这个装饰器，为类“混入”各种方法。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("import { mixins } from './mixins.js';\n\nconst Foo = {\n  foo() { console.log('foo') }\n};\n\n@mixins(Foo)\nclass MyClass {}\n\nlet obj = new MyClass();\nobj.foo() // \"foo\"\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("p",[s._v("通过"),a("code",[s._v("mixins")]),s._v("这个装饰器，实现了在"),a("code",[s._v("MyClass")]),s._v("类上面“混入”"),a("code",[s._v("Foo")]),s._v("对象的"),a("code",[s._v("foo")]),s._v("方法。")]),s._v(" "),a("p",[s._v("不过，上面的方法会改写"),a("code",[s._v("MyClass")]),s._v("类的"),a("code",[s._v("prototype")]),s._v("对象，如果不喜欢这一点，也可以通过类的继承实现 Mixin。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("class MyClass extends MyBaseClass {\n  /* ... */\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("上面代码中，"),a("code",[s._v("MyClass")]),s._v("继承了"),a("code",[s._v("MyBaseClass")]),s._v("。如果我们想在"),a("code",[s._v("MyClass")]),s._v("里面“混入”一个"),a("code",[s._v("foo")]),s._v("方法，一个办法是在"),a("code",[s._v("MyClass")]),s._v("和"),a("code",[s._v("MyBaseClass")]),s._v("之间插入一个混入类，这个类具有"),a("code",[s._v("foo")]),s._v("方法，并且继承了"),a("code",[s._v("MyBaseClass")]),s._v("的所有方法，然后"),a("code",[s._v("MyClass")]),s._v("再继承这个类。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("let MyMixin = (superclass) => class extends superclass {\n  foo() {\n    console.log('foo from MyMixin');\n  }\n};\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("上面代码中，"),a("code",[s._v("MyMixin")]),s._v("是一个混入类生成器，接受"),a("code",[s._v("superclass")]),s._v("作为参数，然后返回一个继承"),a("code",[s._v("superclass")]),s._v("的子类，该子类包含一个"),a("code",[s._v("foo")]),s._v("方法。")]),s._v(" "),a("p",[s._v("接着，目标类再去继承这个混入类，就达到了“混入”"),a("code",[s._v("foo")]),s._v("方法的目的。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('class MyClass extends MyMixin(MyBaseClass) {\n  /* ... */\n}\n\nlet c = new MyClass();\nc.foo(); // "foo from MyMixin"\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("如果需要“混入”多个方法，就生成多个混入类。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("class MyClass extends Mixin1(Mixin2(MyBaseClass)) {\n  /* ... */\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("这种写法的一个好处，是可以调用"),a("code",[s._v("super")]),s._v("，因此可以避免在“混入”过程中覆盖父类的同名方法。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("let Mixin1 = (superclass) => class extends superclass {\n  foo() {\n    console.log('foo from Mixin1');\n    if (super.foo) super.foo();\n  }\n};\n\nlet Mixin2 = (superclass) => class extends superclass {\n  foo() {\n    console.log('foo from Mixin2');\n    if (super.foo) super.foo();\n  }\n};\n\nclass S {\n  foo() {\n    console.log('foo from S');\n  }\n}\n\nclass C extends Mixin1(Mixin2(S)) {\n  foo() {\n    console.log('foo from C');\n    super.foo();\n  }\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br")])]),a("p",[s._v("上面代码中，每一次"),a("code",[s._v("混入")]),s._v("发生时，都调用了父类的"),a("code",[s._v("super.foo")]),s._v("方法，导致父类的同名方法没有被覆盖，行为被保留了下来。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("new C().foo()\n// foo from C\n// foo from Mixin1\n// foo from Mixin2\n// foo from S\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("h2",{attrs:{id:"trait"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#trait"}},[s._v("#")]),s._v(" Trait")]),s._v(" "),a("p",[s._v("Trait 也是一种装饰器，效果与 Mixin 类似，但是提供更多功能，比如防止同名方法的冲突、排除混入某些方法、为混入的方法起别名等等。")]),s._v(" "),a("p",[s._v("下面采用"),a("a",{attrs:{href:"https://github.com/CocktailJS/traits-decorator",target:"_blank",rel:"noopener noreferrer"}},[s._v("traits-decorator"),a("OutboundLink")],1),s._v("这个第三方模块作为例子。这个模块提供的"),a("code",[s._v("traits")]),s._v("装饰器，不仅可以接受对象，还可以接受 ES6 类作为参数。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("import { traits } from 'traits-decorator';\n\nclass TFoo {\n  foo() { console.log('foo') }\n}\n\nconst TBar = {\n  bar() { console.log('bar') }\n};\n\n@traits(TFoo, TBar)\nclass MyClass { }\n\nlet obj = new MyClass();\nobj.foo() // foo\nobj.bar() // bar\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br")])]),a("p",[s._v("上面代码中，通过"),a("code",[s._v("traits")]),s._v("装饰器，在"),a("code",[s._v("MyClass")]),s._v("类上面“混入”了"),a("code",[s._v("TFoo")]),s._v("类的"),a("code",[s._v("foo")]),s._v("方法和"),a("code",[s._v("TBar")]),s._v("对象的"),a("code",[s._v("bar")]),s._v("方法。")]),s._v(" "),a("p",[s._v("Trait 不允许“混入”同名方法。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("import { traits } from 'traits-decorator';\n\nclass TFoo {\n  foo() { console.log('foo') }\n}\n\nconst TBar = {\n  bar() { console.log('bar') },\n  foo() { console.log('foo') }\n};\n\n@traits(TFoo, TBar)\nclass MyClass { }\n// 报错\n// throw new Error('Method named: ' + methodName + ' is defined twice.');\n//        ^\n// Error: Method named: foo is defined twice.\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br")])]),a("p",[s._v("上面代码中，"),a("code",[s._v("TFoo")]),s._v("和"),a("code",[s._v("TBar")]),s._v("都有"),a("code",[s._v("foo")]),s._v("方法，结果"),a("code",[s._v("traits")]),s._v("装饰器报错。")]),s._v(" "),a("p",[s._v("一种解决方法是排除"),a("code",[s._v("TBar")]),s._v("的"),a("code",[s._v("foo")]),s._v("方法。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("import { traits, excludes } from 'traits-decorator';\n\nclass TFoo {\n  foo() { console.log('foo') }\n}\n\nconst TBar = {\n  bar() { console.log('bar') },\n  foo() { console.log('foo') }\n};\n\n@traits(TFoo, TBar::excludes('foo'))\nclass MyClass { }\n\nlet obj = new MyClass();\nobj.foo() // foo\nobj.bar() // bar\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br")])]),a("p",[s._v("上面代码使用绑定运算符（::）在"),a("code",[s._v("TBar")]),s._v("上排除"),a("code",[s._v("foo")]),s._v("方法，混入时就不会报错了。")]),s._v(" "),a("p",[s._v("另一种方法是为"),a("code",[s._v("TBar")]),s._v("的"),a("code",[s._v("foo")]),s._v("方法起一个别名。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("import { traits, alias } from 'traits-decorator';\n\nclass TFoo {\n  foo() { console.log('foo') }\n}\n\nconst TBar = {\n  bar() { console.log('bar') },\n  foo() { console.log('foo') }\n};\n\n@traits(TFoo, TBar::alias({foo: 'aliasFoo'}))\nclass MyClass { }\n\nlet obj = new MyClass();\nobj.foo() // foo\nobj.aliasFoo() // foo\nobj.bar() // bar\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br")])]),a("p",[s._v("上面代码为"),a("code",[s._v("TBar")]),s._v("的"),a("code",[s._v("foo")]),s._v("方法起了别名"),a("code",[s._v("aliasFoo")]),s._v("，于是"),a("code",[s._v("MyClass")]),s._v("也可以混入"),a("code",[s._v("TBar")]),s._v("的"),a("code",[s._v("foo")]),s._v("方法了。")]),s._v(" "),a("p",[a("code",[s._v("alias")]),s._v("和"),a("code",[s._v("excludes")]),s._v("方法，可以结合起来使用。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("@traits(TExample::excludes('foo','bar')::alias({baz:'exampleBaz'}))\nclass MyClass {}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("上面代码排除了"),a("code",[s._v("TExample")]),s._v("的"),a("code",[s._v("foo")]),s._v("方法和"),a("code",[s._v("bar")]),s._v("方法，为"),a("code",[s._v("baz")]),s._v("方法起了别名"),a("code",[s._v("exampleBaz")]),s._v("。")]),s._v(" "),a("p",[a("code",[s._v("as")]),s._v("方法则为上面的代码提供了另一种写法。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("@traits(TExample::as({excludes:['foo', 'bar'], alias: {baz: 'exampleBaz'}}))\nclass MyClass {}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("h3",{attrs:{id:"留言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#留言"}},[s._v("#")]),s._v(" 留言")])])}),[],!1,null,null,null);n.default=t.exports}}]);