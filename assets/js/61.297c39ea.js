(window.webpackJsonp=window.webpackJsonp||[]).push([[61],{530:function(a,e,s){"use strict";s.r(e);var n=s(18),t=Object(n.a)({},(function(){var a=this,e=a.$createElement,s=a._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"字符串的新增方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#字符串的新增方法"}},[a._v("#")]),a._v(" 字符串的新增方法")]),a._v(" "),s("ol",[s("li",[s("a",{attrs:{href:"https://es6.ruanyifeng.com/#docs/string-methods#String.fromCodePoint()",target:"_blank",rel:"noopener noreferrer"}},[a._v("String.fromCodePoint()"),s("OutboundLink")],1)]),a._v(" "),s("li",[s("a",{attrs:{href:"https://es6.ruanyifeng.com/#docs/string-methods#String.raw()",target:"_blank",rel:"noopener noreferrer"}},[a._v("String.raw()"),s("OutboundLink")],1)]),a._v(" "),s("li",[s("a",{attrs:{href:"https://es6.ruanyifeng.com/#docs/string-methods#%E5%AE%9E%E4%BE%8B%E6%96%B9%E6%B3%95%EF%BC%9AcodePointAt()",target:"_blank",rel:"noopener noreferrer"}},[a._v("实例方法：codePointAt()"),s("OutboundLink")],1)]),a._v(" "),s("li",[s("a",{attrs:{href:"https://es6.ruanyifeng.com/#docs/string-methods#%E5%AE%9E%E4%BE%8B%E6%96%B9%E6%B3%95%EF%BC%9Anormalize()",target:"_blank",rel:"noopener noreferrer"}},[a._v("实例方法：normalize()"),s("OutboundLink")],1)]),a._v(" "),s("li",[s("a",{attrs:{href:"https://es6.ruanyifeng.com/#docs/string-methods#%E5%AE%9E%E4%BE%8B%E6%96%B9%E6%B3%95%EF%BC%9Aincludes(),%20startsWith(),%20endsWith()",target:"_blank",rel:"noopener noreferrer"}},[a._v("实例方法：includes(), startsWith(), endsWith()"),s("OutboundLink")],1)]),a._v(" "),s("li",[s("a",{attrs:{href:"https://es6.ruanyifeng.com/#docs/string-methods#%E5%AE%9E%E4%BE%8B%E6%96%B9%E6%B3%95%EF%BC%9Arepeat()",target:"_blank",rel:"noopener noreferrer"}},[a._v("实例方法：repeat()"),s("OutboundLink")],1)]),a._v(" "),s("li",[s("a",{attrs:{href:"https://es6.ruanyifeng.com/#docs/string-methods#%E5%AE%9E%E4%BE%8B%E6%96%B9%E6%B3%95%EF%BC%9ApadStart()%EF%BC%8CpadEnd()",target:"_blank",rel:"noopener noreferrer"}},[a._v("实例方法：padStart()，padEnd()"),s("OutboundLink")],1)]),a._v(" "),s("li",[s("a",{attrs:{href:"https://es6.ruanyifeng.com/#docs/string-methods#%E5%AE%9E%E4%BE%8B%E6%96%B9%E6%B3%95%EF%BC%9AtrimStart()%EF%BC%8CtrimEnd()",target:"_blank",rel:"noopener noreferrer"}},[a._v("实例方法：trimStart()，trimEnd()"),s("OutboundLink")],1)]),a._v(" "),s("li",[s("a",{attrs:{href:"https://es6.ruanyifeng.com/#docs/string-methods#%E5%AE%9E%E4%BE%8B%E6%96%B9%E6%B3%95%EF%BC%9AmatchAll()",target:"_blank",rel:"noopener noreferrer"}},[a._v("实例方法：matchAll()"),s("OutboundLink")],1)]),a._v(" "),s("li",[s("a",{attrs:{href:"https://es6.ruanyifeng.com/#docs/string-methods#%E5%AE%9E%E4%BE%8B%E6%96%B9%E6%B3%95%EF%BC%9AreplaceAll()",target:"_blank",rel:"noopener noreferrer"}},[a._v("实例方法：replaceAll()"),s("OutboundLink")],1)]),a._v(" "),s("li",[s("a",{attrs:{href:"https://es6.ruanyifeng.com/#docs/string-methods#%E5%AE%9E%E4%BE%8B%E6%96%B9%E6%B3%95%EF%BC%9Aat()",target:"_blank",rel:"noopener noreferrer"}},[a._v("实例方法：at()"),s("OutboundLink")],1)])]),a._v(" "),s("p",[a._v("本章介绍字符串对象的新增方法。")]),a._v(" "),s("h2",{attrs:{id:"string-fromcodepoint"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#string-fromcodepoint"}},[a._v("#")]),a._v(" String.fromCodePoint()")]),a._v(" "),s("p",[a._v("ES5 提供"),s("code",[a._v("String.fromCharCode()")]),a._v("方法，用于从 Unicode 码点返回对应字符，但是这个方法不能识别码点大于"),s("code",[a._v("0xFFFF")]),a._v("的字符。")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('String.fromCharCode(0x20BB7)\n// "ஷ"\n')])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br")])]),s("p",[a._v("上面代码中，"),s("code",[a._v("String.fromCharCode()")]),a._v("不能识别大于"),s("code",[a._v("0xFFFF")]),a._v("的码点，所以"),s("code",[a._v("0x20BB7")]),a._v("就发生了溢出，最高位"),s("code",[a._v("2")]),a._v("被舍弃了，最后返回码点"),s("code",[a._v("U+0BB7")]),a._v("对应的字符，而不是码点"),s("code",[a._v("U+20BB7")]),a._v("对应的字符。")]),a._v(" "),s("p",[a._v("ES6 提供了"),s("code",[a._v("String.fromCodePoint()")]),a._v("方法，可以识别大于"),s("code",[a._v("0xFFFF")]),a._v("的字符，弥补了"),s("code",[a._v("String.fromCharCode()")]),a._v("方法的不足。在作用上，正好与下面的"),s("code",[a._v("codePointAt()")]),a._v("方法相反。")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("String.fromCodePoint(0x20BB7)\n// \"𠮷\"\nString.fromCodePoint(0x78, 0x1f680, 0x79) === 'x\\uD83D\\uDE80y'\n// true\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br")])]),s("p",[a._v("上面代码中，如果"),s("code",[a._v("String.fromCodePoint")]),a._v("方法有多个参数，则它们会被合并成一个字符串返回。")]),a._v(" "),s("p",[a._v("注意，"),s("code",[a._v("fromCodePoint")]),a._v("方法定义在"),s("code",[a._v("String")]),a._v("对象上，而"),s("code",[a._v("codePointAt")]),a._v("方法定义在字符串的实例对象上。")]),a._v(" "),s("h2",{attrs:{id:"string-raw"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#string-raw"}},[a._v("#")]),a._v(" String.raw()")]),a._v(" "),s("p",[a._v("ES6 还为原生的 String 对象，提供了一个"),s("code",[a._v("raw()")]),a._v("方法。该方法返回一个斜杠都被转义（即斜杠前面再加一个斜杠）的字符串，往往用于模板字符串的处理方法。")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('String.raw`Hi\\n${2+3}!`\n// 实际返回 "Hi\\\\n5!"，显示的是转义后的结果 "Hi\\n5!"\n\nString.raw`Hi\\u000A!`;\n// 实际返回 "Hi\\\\u000A!"，显示的是转义后的结果 "Hi\\u000A!"\n')])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br")])]),s("p",[a._v("如果原字符串的斜杠已经转义，那么"),s("code",[a._v("String.raw()")]),a._v("会进行再次转义。")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('String.raw`Hi\\\\n`\n// 返回 "Hi\\\\\\\\n"\n\nString.raw`Hi\\\\n` === "Hi\\\\\\\\n" // true\n')])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br")])]),s("p",[s("code",[a._v("String.raw()")]),a._v("方法可以作为处理模板字符串的基本方法，它会将所有变量替换，而且对斜杠进行转义，方便下一步作为字符串来使用。")]),a._v(" "),s("p",[s("code",[a._v("String.raw()")]),a._v("本质上是一个正常的函数，只是专用于模板字符串的标签函数。如果写成正常函数的形式，它的第一个参数，应该是一个具有"),s("code",[a._v("raw")]),a._v("属性的对象，且"),s("code",[a._v("raw")]),a._v("属性的值应该是一个数组，对应模板字符串解析后的值。")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("// `foo${1 + 2}bar`\n// 等同于\nString.raw({ raw: ['foo', 'bar'] }, 1 + 2) // \"foo3bar\"\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br")])]),s("p",[a._v("上面代码中，"),s("code",[a._v("String.raw()")]),a._v("方法的第一个参数是一个对象，它的"),s("code",[a._v("raw")]),a._v("属性等同于原始的模板字符串解析后得到的数组。")]),a._v(" "),s("p",[a._v("作为函数，"),s("code",[a._v("String.raw()")]),a._v("的代码实现基本如下。")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("String.raw = function (strings, ...values) {\n  let output = '';\n  let index;\n  for (index = 0; index < values.length; index++) {\n    output += strings.raw[index] + values[index];\n  }\n\n  output += strings.raw[index]\n  return output;\n}\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br")])]),s("h2",{attrs:{id:"实例方法-codepointat"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#实例方法-codepointat"}},[a._v("#")]),a._v(" 实例方法：codePointAt()")]),a._v(" "),s("p",[a._v("JavaScript 内部，字符以 UTF-16 的格式储存，每个字符固定为"),s("code",[a._v("2")]),a._v("个字节。对于那些需要"),s("code",[a._v("4")]),a._v("个字节储存的字符（Unicode 码点大于"),s("code",[a._v("0xFFFF")]),a._v("的字符），JavaScript 会认为它们是两个字符。")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("var s = \"𠮷\";\n\ns.length // 2\ns.charAt(0) // ''\ns.charAt(1) // ''\ns.charCodeAt(0) // 55362\ns.charCodeAt(1) // 57271\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br")])]),s("p",[a._v("上面代码中，汉字“𠮷”（注意，这个字不是“吉祥”的“吉”）的码点是"),s("code",[a._v("0x20BB7")]),a._v("，UTF-16 编码为"),s("code",[a._v("0xD842 0xDFB7")]),a._v("（十进制为"),s("code",[a._v("55362 57271")]),a._v("），需要"),s("code",[a._v("4")]),a._v("个字节储存。对于这种"),s("code",[a._v("4")]),a._v("个字节的字符，JavaScript 不能正确处理，字符串长度会误判为"),s("code",[a._v("2")]),a._v("，而且"),s("code",[a._v("charAt()")]),a._v("方法无法读取整个字符，"),s("code",[a._v("charCodeAt()")]),a._v("方法只能分别返回前两个字节和后两个字节的值。")]),a._v(" "),s("p",[a._v("ES6 提供了"),s("code",[a._v("codePointAt()")]),a._v("方法，能够正确处理 4 个字节储存的字符，返回一个字符的码点。")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("let s = '𠮷a';\n\ns.codePointAt(0) // 134071\ns.codePointAt(1) // 57271\n\ns.codePointAt(2) // 97\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br")])]),s("p",[s("code",[a._v("codePointAt()")]),a._v("方法的参数，是字符在字符串中的位置（从 0 开始）。上面代码中，JavaScript 将“𠮷 a”视为三个字符，codePointAt 方法在第一个字符上，正确地识别了“𠮷”，返回了它的十进制码点 134071（即十六进制的"),s("code",[a._v("20BB7")]),a._v("）。在第二个字符（即“𠮷”的后两个字节）和第三个字符“a”上，"),s("code",[a._v("codePointAt()")]),a._v("方法的结果与"),s("code",[a._v("charCodeAt()")]),a._v("方法相同。")]),a._v(" "),s("p",[a._v("总之，"),s("code",[a._v("codePointAt()")]),a._v("方法会正确返回 32 位的 UTF-16 字符的码点。对于那些两个字节储存的常规字符，它的返回结果与"),s("code",[a._v("charCodeAt()")]),a._v("方法相同。")]),a._v(" "),s("p",[s("code",[a._v("codePointAt()")]),a._v("方法返回的是码点的十进制值，如果想要十六进制的值，可以使用"),s("code",[a._v("toString()")]),a._v("方法转换一下。")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('let s = \'𠮷a\';\n\ns.codePointAt(0).toString(16) // "20bb7"\ns.codePointAt(2).toString(16) // "61"\n')])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br")])]),s("p",[a._v("你可能注意到了，"),s("code",[a._v("codePointAt()")]),a._v("方法的参数，仍然是不正确的。比如，上面代码中，字符"),s("code",[a._v("a")]),a._v("在字符串"),s("code",[a._v("s")]),a._v("的正确位置序号应该是 1，但是必须向"),s("code",[a._v("codePointAt()")]),a._v("方法传入 2。解决这个问题的一个办法是使用"),s("code",[a._v("for...of")]),a._v("循环，因为它会正确识别 32 位的 UTF-16 字符。")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("let s = '𠮷a';\nfor (let ch of s) {\n  console.log(ch.codePointAt(0).toString(16));\n}\n// 20bb7\n// 61\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br")])]),s("p",[a._v("另一种方法也可以，使用扩展运算符（"),s("code",[a._v("...")]),a._v("）进行展开运算。")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("let arr = [...'𠮷a']; // arr.length === 2\narr.forEach(\n  ch => console.log(ch.codePointAt(0).toString(16))\n);\n// 20bb7\n// 61\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br")])]),s("p",[s("code",[a._v("codePointAt()")]),a._v("方法是测试一个字符由两个字节还是由四个字节组成的最简单方法。")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('function is32Bit(c) {\n  return c.codePointAt(0) > 0xFFFF;\n}\n\nis32Bit("𠮷") // true\nis32Bit("a") // false\n')])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br")])]),s("h2",{attrs:{id:"实例方法-normalize"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#实例方法-normalize"}},[a._v("#")]),a._v(" 实例方法：normalize()")]),a._v(" "),s("p",[a._v("许多欧洲语言有语调符号和重音符号。为了表示它们，Unicode 提供了两种方法。一种是直接提供带重音符号的字符，比如"),s("code",[a._v("Ǒ")]),a._v("（\\u01D1）。另一种是提供合成符号（combining character），即原字符与重音符号的合成，两个字符合成一个字符，比如"),s("code",[a._v("O")]),a._v("（\\u004F）和"),s("code",[a._v("ˇ")]),a._v("（\\u030C）合成"),s("code",[a._v("Ǒ")]),a._v("（\\u004F\\u030C）。")]),a._v(" "),s("p",[a._v("这两种表示方法，在视觉和语义上都等价，但是 JavaScript 不能识别。")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("'\\u01D1'==='\\u004F\\u030C' //false\n\n'\\u01D1'.length // 1\n'\\u004F\\u030C'.length // 2\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br")])]),s("p",[a._v("上面代码表示，JavaScript 将合成字符视为两个字符，导致两种表示方法不相等。")]),a._v(" "),s("p",[a._v("ES6 提供字符串实例的"),s("code",[a._v("normalize()")]),a._v("方法，用来将字符的不同表示方法统一为同样的形式，这称为 Unicode 正规化。")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("'\\u01D1'.normalize() === '\\u004F\\u030C'.normalize()\n// true\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br")])]),s("p",[s("code",[a._v("normalize")]),a._v("方法可以接受一个参数来指定"),s("code",[a._v("normalize")]),a._v("的方式，参数的四个可选值如下。")]),a._v(" "),s("ul",[s("li",[s("code",[a._v("NFC")]),a._v("，默认参数，表示“标准等价合成”（Normalization Form Canonical Composition），返回多个简单字符的合成字符。所谓“标准等价”指的是视觉和语义上的等价。")]),a._v(" "),s("li",[s("code",[a._v("NFD")]),a._v("，表示“标准等价分解”（Normalization Form Canonical Decomposition），即在标准等价的前提下，返回合成字符分解的多个简单字符。")]),a._v(" "),s("li",[s("code",[a._v("NFKC")]),a._v("，表示“兼容等价合成”（Normalization Form Compatibility Composition），返回合成字符。所谓“兼容等价”指的是语义上存在等价，但视觉上不等价，比如“囍”和“喜喜”。（这只是用来举例，"),s("code",[a._v("normalize")]),a._v("方法不能识别中文。）")]),a._v(" "),s("li",[s("code",[a._v("NFKD")]),a._v("，表示“兼容等价分解”（Normalization Form Compatibility Decomposition），即在兼容等价的前提下，返回合成字符分解的多个简单字符。")])]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("'\\u004F\\u030C'.normalize('NFC').length // 1\n'\\u004F\\u030C'.normalize('NFD').length // 2\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br")])]),s("p",[a._v("上面代码表示，"),s("code",[a._v("NFC")]),a._v("参数返回字符的合成形式，"),s("code",[a._v("NFD")]),a._v("参数返回字符的分解形式。")]),a._v(" "),s("p",[a._v("不过，"),s("code",[a._v("normalize")]),a._v("方法目前不能识别三个或三个以上字符的合成。这种情况下，还是只能使用正则表达式，通过 Unicode 编号区间判断。")]),a._v(" "),s("h2",{attrs:{id:"实例方法-includes-startswith-endswith"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#实例方法-includes-startswith-endswith"}},[a._v("#")]),a._v(" 实例方法：includes(), startsWith(), endsWith()")]),a._v(" "),s("p",[a._v("传统上，JavaScript 只有"),s("code",[a._v("indexOf")]),a._v("方法，可以用来确定一个字符串是否包含在另一个字符串中。ES6 又提供了三种新方法。")]),a._v(" "),s("ul",[s("li",[s("strong",[a._v("includes()")]),a._v("：返回布尔值，表示是否找到了参数字符串。")]),a._v(" "),s("li",[s("strong",[a._v("startsWith()")]),a._v("：返回布尔值，表示参数字符串是否在原字符串的头部。")]),a._v(" "),s("li",[s("strong",[a._v("endsWith()")]),a._v("：返回布尔值，表示参数字符串是否在原字符串的尾部。")])]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("let s = 'Hello world!';\n\ns.startsWith('Hello') // true\ns.endsWith('!') // true\ns.includes('o') // true\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br")])]),s("p",[a._v("这三个方法都支持第二个参数，表示开始搜索的位置。")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("let s = 'Hello world!';\n\ns.startsWith('world', 6) // true\ns.endsWith('Hello', 5) // true\ns.includes('Hello', 6) // false\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br")])]),s("p",[a._v("上面代码表示，使用第二个参数"),s("code",[a._v("n")]),a._v("时，"),s("code",[a._v("endsWith")]),a._v("的行为与其他两个方法有所不同。它针对前"),s("code",[a._v("n")]),a._v("个字符，而其他两个方法针对从第"),s("code",[a._v("n")]),a._v("个位置直到字符串结束。")]),a._v(" "),s("h2",{attrs:{id:"实例方法-repeat"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#实例方法-repeat"}},[a._v("#")]),a._v(" 实例方法：repeat()")]),a._v(" "),s("p",[s("code",[a._v("repeat")]),a._v("方法返回一个新字符串，表示将原字符串重复"),s("code",[a._v("n")]),a._v("次。")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("'x'.repeat(3) // \"xxx\"\n'hello'.repeat(2) // \"hellohello\"\n'na'.repeat(0) // \"\"\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br")])]),s("p",[a._v("参数如果是小数，会被取整。")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("'na'.repeat(2.9) // \"nana\"\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("p",[a._v("如果"),s("code",[a._v("repeat")]),a._v("的参数是负数或者"),s("code",[a._v("Infinity")]),a._v("，会报错。")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("'na'.repeat(Infinity)\n// RangeError\n'na'.repeat(-1)\n// RangeError\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br")])]),s("p",[a._v("但是，如果参数是 0 到-1 之间的小数，则等同于 0，这是因为会先进行取整运算。0 到-1 之间的小数，取整以后等于"),s("code",[a._v("-0")]),a._v("，"),s("code",[a._v("repeat")]),a._v("视同为 0。")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("'na'.repeat(-0.9) // \"\"\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("p",[a._v("参数"),s("code",[a._v("NaN")]),a._v("等同于 0。")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("'na'.repeat(NaN) // \"\"\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("p",[a._v("如果"),s("code",[a._v("repeat")]),a._v("的参数是字符串，则会先转换成数字。")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("'na'.repeat('na') // \"\"\n'na'.repeat('3') // \"nanana\"\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br")])]),s("h2",{attrs:{id:"实例方法-padstart-padend"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#实例方法-padstart-padend"}},[a._v("#")]),a._v(" 实例方法：padStart()，padEnd()")]),a._v(" "),s("p",[a._v("ES2017 引入了字符串补全长度的功能。如果某个字符串不够指定长度，会在头部或尾部补全。"),s("code",[a._v("padStart()")]),a._v("用于头部补全，"),s("code",[a._v("padEnd()")]),a._v("用于尾部补全。")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("'x'.padStart(5, 'ab') // 'ababx'\n'x'.padStart(4, 'ab') // 'abax'\n\n'x'.padEnd(5, 'ab') // 'xabab'\n'x'.padEnd(4, 'ab') // 'xaba'\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br")])]),s("p",[a._v("上面代码中，"),s("code",[a._v("padStart()")]),a._v("和"),s("code",[a._v("padEnd()")]),a._v("一共接受两个参数，第一个参数是字符串补全生效的最大长度，第二个参数是用来补全的字符串。")]),a._v(" "),s("p",[a._v("如果原字符串的长度，等于或大于最大长度，则字符串补全不生效，返回原字符串。")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("'xxx'.padStart(2, 'ab') // 'xxx'\n'xxx'.padEnd(2, 'ab') // 'xxx'\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br")])]),s("p",[a._v("如果用来补全的字符串与原字符串，两者的长度之和超过了最大长度，则会截去超出位数的补全字符串。")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("'abc'.padStart(10, '0123456789')\n// '0123456abc'\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br")])]),s("p",[a._v("如果省略第二个参数，默认使用空格补全长度。")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("'x'.padStart(4) // '   x'\n'x'.padEnd(4) // 'x   '\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br")])]),s("p",[s("code",[a._v("padStart()")]),a._v("的常见用途是为数值补全指定位数。下面代码生成 10 位的数值字符串。")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("'1'.padStart(10, '0') // \"0000000001\"\n'12'.padStart(10, '0') // \"0000000012\"\n'123456'.padStart(10, '0') // \"0000123456\"\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br")])]),s("p",[a._v("另一个用途是提示字符串格式。")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("'12'.padStart(10, 'YYYY-MM-DD') // \"YYYY-MM-12\"\n'09-12'.padStart(10, 'YYYY-MM-DD') // \"YYYY-09-12\"\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br")])]),s("h2",{attrs:{id:"实例方法-trimstart-trimend"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#实例方法-trimstart-trimend"}},[a._v("#")]),a._v(" 实例方法：trimStart()，trimEnd()")]),a._v(" "),s("p",[s("a",{attrs:{href:"https://github.com/tc39/proposal-string-left-right-trim",target:"_blank",rel:"noopener noreferrer"}},[a._v("ES2019"),s("OutboundLink")],1),a._v(" 对字符串实例新增了"),s("code",[a._v("trimStart()")]),a._v("和"),s("code",[a._v("trimEnd()")]),a._v("这两个方法。它们的行为与"),s("code",[a._v("trim()")]),a._v("一致，"),s("code",[a._v("trimStart()")]),a._v("消除字符串头部的空格，"),s("code",[a._v("trimEnd()")]),a._v("消除尾部的空格。它们返回的都是新字符串，不会修改原始字符串。")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('const s = \'  abc  \';\n\ns.trim() // "abc"\ns.trimStart() // "abc  "\ns.trimEnd() // "  abc"\n')])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br")])]),s("p",[a._v("上面代码中，"),s("code",[a._v("trimStart()")]),a._v("只消除头部的空格，保留尾部的空格。"),s("code",[a._v("trimEnd()")]),a._v("也是类似行为。")]),a._v(" "),s("p",[a._v("除了空格键，这两个方法对字符串头部（或尾部）的 tab 键、换行符等不可见的空白符号也有效。")]),a._v(" "),s("p",[a._v("浏览器还部署了额外的两个方法，"),s("code",[a._v("trimLeft()")]),a._v("是"),s("code",[a._v("trimStart()")]),a._v("的别名，"),s("code",[a._v("trimRight()")]),a._v("是"),s("code",[a._v("trimEnd()")]),a._v("的别名。")]),a._v(" "),s("h2",{attrs:{id:"实例方法-matchall"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#实例方法-matchall"}},[a._v("#")]),a._v(" 实例方法：matchAll()")]),a._v(" "),s("p",[s("code",[a._v("matchAll()")]),a._v("方法返回一个正则表达式在当前字符串的所有匹配，详见《正则的扩展》的一章。")]),a._v(" "),s("h2",{attrs:{id:"实例方法-replaceall"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#实例方法-replaceall"}},[a._v("#")]),a._v(" 实例方法：replaceAll()")]),a._v(" "),s("p",[a._v("历史上，字符串的实例方法"),s("code",[a._v("replace()")]),a._v("只能替换第一个匹配。")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("'aabbcc'.replace('b', '_')\n// 'aa_bcc'\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br")])]),s("p",[a._v("上面例子中，"),s("code",[a._v("replace()")]),a._v("只将第一个"),s("code",[a._v("b")]),a._v("替换成了下划线。")]),a._v(" "),s("p",[a._v("如果要替换所有的匹配，不得不使用正则表达式的"),s("code",[a._v("g")]),a._v("修饰符。")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("'aabbcc'.replace(/b/g, '_')\n// 'aa__cc'\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br")])]),s("p",[a._v("正则表达式毕竟不是那么方便和直观，"),s("a",{attrs:{href:"https://github.com/tc39/proposal-string-replaceall",target:"_blank",rel:"noopener noreferrer"}},[a._v("ES2021"),s("OutboundLink")],1),a._v(" 引入了"),s("code",[a._v("replaceAll()")]),a._v("方法，可以一次性替换所有匹配。")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("'aabbcc'.replaceAll('b', '_')\n// 'aa__cc'\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br")])]),s("p",[a._v("它的用法与"),s("code",[a._v("replace()")]),a._v("相同，返回一个新字符串，不会改变原字符串。")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("String.prototype.replaceAll(searchValue, replacement)\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("p",[a._v("上面代码中，"),s("code",[a._v("searchValue")]),a._v("是搜索模式，可以是一个字符串，也可以是一个全局的正则表达式（带有"),s("code",[a._v("g")]),a._v("修饰符）。")]),a._v(" "),s("p",[a._v("如果"),s("code",[a._v("searchValue")]),a._v("是一个不带有"),s("code",[a._v("g")]),a._v("修饰符的正则表达式，"),s("code",[a._v("replaceAll()")]),a._v("会报错。这一点跟"),s("code",[a._v("replace()")]),a._v("不同。")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("// 不报错\n'aabbcc'.replace(/b/, '_')\n\n// 报错\n'aabbcc'.replaceAll(/b/, '_')\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br")])]),s("p",[a._v("上面例子中，"),s("code",[a._v("/b/")]),a._v("不带有"),s("code",[a._v("g")]),a._v("修饰符，会导致"),s("code",[a._v("replaceAll()")]),a._v("报错。")]),a._v(" "),s("p",[s("code",[a._v("replaceAll()")]),a._v("的第二个参数"),s("code",[a._v("replacement")]),a._v("是一个字符串，表示替换的文本，其中可以使用一些特殊字符串。")]),a._v(" "),s("ul",[s("li",[s("code",[a._v("$&")]),a._v("：匹配的字符串。")]),a._v(" "),s("li",[s("code",[a._v("$`")]),a._v(" ：匹配结果前面的文本。")]),a._v(" "),s("li",[s("code",[a._v("$'")]),a._v("：匹配结果后面的文本。")]),a._v(" "),s("li",[s("code",[a._v("$n")]),a._v("：匹配成功的第"),s("code",[a._v("n")]),a._v("组内容，"),s("code",[a._v("n")]),a._v("是从 1 开始的自然数。这个参数生效的前提是，第一个参数必须是正则表达式。")]),a._v(" "),s("li",[s("code",[a._v("$$")]),a._v("：指代美元符号"),s("code",[a._v("$")]),a._v("。")])]),a._v(" "),s("p",[a._v("下面是一些例子。")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("// $& 表示匹配的字符串，即`b`本身\n// 所以返回结果与原字符串一致\n'abbc'.replaceAll('b', '$&')\n// 'abbc'\n\n// $` 表示匹配结果之前的字符串\n// 对于第一个`b`，$` 指代`a`\n// 对于第二个`b`，$` 指代`ab`\n'abbc'.replaceAll('b', '$`')\n// 'aaabc'\n\n// $' 表示匹配结果之后的字符串\n// 对于第一个`b`，$' 指代`bc`\n// 对于第二个`b`，$' 指代`c`\n'abbc'.replaceAll('b', `$'`)\n// 'abccc'\n\n// $1 表示正则表达式的第一个组匹配，指代`ab`\n// $2 表示正则表达式的第二个组匹配，指代`bc`\n'abbc'.replaceAll(/(ab)(bc)/g, '$2$1')\n// 'bcab'\n\n// $$ 指代 $\n'abc'.replaceAll('b', '$$')\n// 'a$c'\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br"),s("span",{staticClass:"line-number"},[a._v("12")]),s("br"),s("span",{staticClass:"line-number"},[a._v("13")]),s("br"),s("span",{staticClass:"line-number"},[a._v("14")]),s("br"),s("span",{staticClass:"line-number"},[a._v("15")]),s("br"),s("span",{staticClass:"line-number"},[a._v("16")]),s("br"),s("span",{staticClass:"line-number"},[a._v("17")]),s("br"),s("span",{staticClass:"line-number"},[a._v("18")]),s("br"),s("span",{staticClass:"line-number"},[a._v("19")]),s("br"),s("span",{staticClass:"line-number"},[a._v("20")]),s("br"),s("span",{staticClass:"line-number"},[a._v("21")]),s("br"),s("span",{staticClass:"line-number"},[a._v("22")]),s("br"),s("span",{staticClass:"line-number"},[a._v("23")]),s("br"),s("span",{staticClass:"line-number"},[a._v("24")]),s("br"),s("span",{staticClass:"line-number"},[a._v("25")]),s("br")])]),s("p",[s("code",[a._v("replaceAll()")]),a._v("的第二个参数"),s("code",[a._v("replacement")]),a._v("除了为字符串，也可以是一个函数，该函数的返回值将替换掉第一个参数"),s("code",[a._v("searchValue")]),a._v("匹配的文本。")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("'aabbcc'.replaceAll('b', () => '_')\n// 'aa__cc'\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br")])]),s("p",[a._v("上面例子中，"),s("code",[a._v("replaceAll()")]),a._v("的第二个参数是一个函数，该函数的返回值会替换掉所有"),s("code",[a._v("b")]),a._v("的匹配。")]),a._v(" "),s("p",[a._v("这个替换函数可以接受多个参数。第一个参数是捕捉到的匹配内容，第二个参数捕捉到是组匹配（有多少个组匹配，就有多少个对应的参数）。此外，最后还可以添加两个参数，倒数第二个参数是捕捉到的内容在整个字符串中的位置，最后一个参数是原字符串。")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("const str = '123abc456';\nconst regex = /(\\d+)([a-z]+)(\\d+)/g;\n\nfunction replacer(match, p1, p2, p3, offset, string) {\n  return [p1, p2, p3].join(' - ');\n}\n\nstr.replaceAll(regex, replacer)\n// 123 - abc - 456\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br")])]),s("p",[a._v("上面例子中，正则表达式有三个组匹配，所以"),s("code",[a._v("replacer()")]),a._v("函数的第一个参数"),s("code",[a._v("match")]),a._v("是捕捉到的匹配内容（即字符串"),s("code",[a._v("123abc456")]),a._v("），后面三个参数"),s("code",[a._v("p1")]),a._v("、"),s("code",[a._v("p2")]),a._v("、"),s("code",[a._v("p3")]),a._v("则依次为三个组匹配。")]),a._v(" "),s("h2",{attrs:{id:"实例方法-at"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#实例方法-at"}},[a._v("#")]),a._v(" 实例方法：at()")]),a._v(" "),s("p",[s("code",[a._v("at()")]),a._v("方法接受一个整数作为参数，返回参数指定位置的字符，支持负索引（即倒数的位置）。")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('const str = \'hello\';\nstr.at(1) // "e"\nstr.at(-1) // "o"\n')])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br")])]),s("p",[a._v("如果参数位置超出了字符串范围，"),s("code",[a._v("at()")]),a._v("返回"),s("code",[a._v("undefined")]),a._v("。")]),a._v(" "),s("p",[a._v("该方法来自数组添加的"),s("code",[a._v("at()")]),a._v("方法，目前还是一个第三阶段的提案，可以参考《数组》一章的介绍。")]),a._v(" "),s("h3",{attrs:{id:"留言"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#留言"}},[a._v("#")]),a._v(" 留言")])])}),[],!1,null,null,null);e.default=t.exports}}]);