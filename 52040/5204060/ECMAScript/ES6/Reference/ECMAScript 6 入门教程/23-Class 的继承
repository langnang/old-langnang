<!DOCTYPE html>
<html lang="en-US">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width,initial-scale=1">
    <title>Class 的继承 | Hello Langnang</title>
    <meta name="generator" content="VuePress 1.9.7">
    
    <meta name="description" content="Welcome to langnang">
    
    <link rel="preload" href="/langnang/assets/css/0.styles.8911c2d2.css" as="style"><link rel="preload" href="/langnang/assets/js/app.d31b4f67.js" as="script"><link rel="preload" href="/langnang/assets/js/3.4862c1a5.js" as="script"><link rel="preload" href="/langnang/assets/js/79.2179f40d.js" as="script"><link rel="prefetch" href="/langnang/assets/js/10.775593e7.js"><link rel="prefetch" href="/langnang/assets/js/100.3b42a1b3.js"><link rel="prefetch" href="/langnang/assets/js/101.f90544bb.js"><link rel="prefetch" href="/langnang/assets/js/102.5948090a.js"><link rel="prefetch" href="/langnang/assets/js/103.646bae3d.js"><link rel="prefetch" href="/langnang/assets/js/104.388c68f6.js"><link rel="prefetch" href="/langnang/assets/js/105.3dc547ce.js"><link rel="prefetch" href="/langnang/assets/js/106.711f4951.js"><link rel="prefetch" href="/langnang/assets/js/107.8c7375e5.js"><link rel="prefetch" href="/langnang/assets/js/108.06de7dc8.js"><link rel="prefetch" href="/langnang/assets/js/109.5b31d5ad.js"><link rel="prefetch" href="/langnang/assets/js/11.0a5dae33.js"><link rel="prefetch" href="/langnang/assets/js/110.009ec9bb.js"><link rel="prefetch" href="/langnang/assets/js/111.bac229c8.js"><link rel="prefetch" href="/langnang/assets/js/112.c418e9e1.js"><link rel="prefetch" href="/langnang/assets/js/113.24a8ee24.js"><link rel="prefetch" href="/langnang/assets/js/114.8fe6afae.js"><link rel="prefetch" href="/langnang/assets/js/115.d2df2dc5.js"><link rel="prefetch" href="/langnang/assets/js/116.b5ccbd12.js"><link rel="prefetch" href="/langnang/assets/js/117.d172ce1f.js"><link rel="prefetch" href="/langnang/assets/js/118.6db473b1.js"><link rel="prefetch" href="/langnang/assets/js/119.19ec0599.js"><link rel="prefetch" href="/langnang/assets/js/12.0af39c0b.js"><link rel="prefetch" href="/langnang/assets/js/120.3c6dfea3.js"><link rel="prefetch" href="/langnang/assets/js/121.72a9adf6.js"><link rel="prefetch" href="/langnang/assets/js/122.75b8b13f.js"><link rel="prefetch" href="/langnang/assets/js/123.f5011de7.js"><link rel="prefetch" href="/langnang/assets/js/124.7a73b968.js"><link rel="prefetch" href="/langnang/assets/js/125.2fd0f7a8.js"><link rel="prefetch" href="/langnang/assets/js/126.56416ba6.js"><link rel="prefetch" href="/langnang/assets/js/127.ccd25ff4.js"><link rel="prefetch" href="/langnang/assets/js/128.8edc62a9.js"><link rel="prefetch" href="/langnang/assets/js/129.216fd032.js"><link rel="prefetch" href="/langnang/assets/js/13.c03d4d79.js"><link rel="prefetch" href="/langnang/assets/js/130.c57710d0.js"><link rel="prefetch" href="/langnang/assets/js/131.35330210.js"><link rel="prefetch" href="/langnang/assets/js/132.ec0bf031.js"><link rel="prefetch" href="/langnang/assets/js/133.c6a81315.js"><link rel="prefetch" href="/langnang/assets/js/134.9e3141d7.js"><link rel="prefetch" href="/langnang/assets/js/135.111242f1.js"><link rel="prefetch" href="/langnang/assets/js/136.ef67c601.js"><link rel="prefetch" href="/langnang/assets/js/137.bb3e40a9.js"><link rel="prefetch" href="/langnang/assets/js/138.80a1b191.js"><link rel="prefetch" href="/langnang/assets/js/139.608bdbfe.js"><link rel="prefetch" href="/langnang/assets/js/14.050f82cf.js"><link rel="prefetch" href="/langnang/assets/js/140.e736bed7.js"><link rel="prefetch" href="/langnang/assets/js/141.8bb3e423.js"><link rel="prefetch" href="/langnang/assets/js/142.599583d1.js"><link rel="prefetch" href="/langnang/assets/js/143.1b03e7c9.js"><link rel="prefetch" href="/langnang/assets/js/144.d59da5cd.js"><link rel="prefetch" href="/langnang/assets/js/145.69f830c2.js"><link rel="prefetch" href="/langnang/assets/js/146.f1d0d249.js"><link rel="prefetch" href="/langnang/assets/js/147.6ffe2b0a.js"><link rel="prefetch" href="/langnang/assets/js/148.a23cb0f6.js"><link rel="prefetch" href="/langnang/assets/js/149.fc2d720e.js"><link rel="prefetch" href="/langnang/assets/js/15.52373675.js"><link rel="prefetch" href="/langnang/assets/js/150.fde1fdfc.js"><link rel="prefetch" href="/langnang/assets/js/151.ad337b6b.js"><link rel="prefetch" href="/langnang/assets/js/152.c27a6a8b.js"><link rel="prefetch" href="/langnang/assets/js/153.d1df63e4.js"><link rel="prefetch" href="/langnang/assets/js/154.37e8d179.js"><link rel="prefetch" href="/langnang/assets/js/155.20a7bd1e.js"><link rel="prefetch" href="/langnang/assets/js/156.3eb0c337.js"><link rel="prefetch" href="/langnang/assets/js/157.b439abfe.js"><link rel="prefetch" href="/langnang/assets/js/158.e27914da.js"><link rel="prefetch" href="/langnang/assets/js/159.e2c81e4d.js"><link rel="prefetch" href="/langnang/assets/js/16.d39a414a.js"><link rel="prefetch" href="/langnang/assets/js/160.be13652a.js"><link rel="prefetch" href="/langnang/assets/js/161.bb2944ac.js"><link rel="prefetch" href="/langnang/assets/js/162.03f5841b.js"><link rel="prefetch" href="/langnang/assets/js/163.ab0cc579.js"><link rel="prefetch" href="/langnang/assets/js/164.d1c5018d.js"><link rel="prefetch" href="/langnang/assets/js/165.6041bd7d.js"><link rel="prefetch" href="/langnang/assets/js/166.4007cfdb.js"><link rel="prefetch" href="/langnang/assets/js/167.60edd5dc.js"><link rel="prefetch" href="/langnang/assets/js/168.6c3f208e.js"><link rel="prefetch" href="/langnang/assets/js/169.c0440ecf.js"><link rel="prefetch" href="/langnang/assets/js/17.742bbdba.js"><link rel="prefetch" href="/langnang/assets/js/170.a3a5c6fc.js"><link rel="prefetch" href="/langnang/assets/js/171.9da19196.js"><link rel="prefetch" href="/langnang/assets/js/172.81335ae9.js"><link rel="prefetch" href="/langnang/assets/js/173.eff4c653.js"><link rel="prefetch" href="/langnang/assets/js/174.067a131c.js"><link rel="prefetch" href="/langnang/assets/js/175.d9f2d29c.js"><link rel="prefetch" href="/langnang/assets/js/176.9160d186.js"><link rel="prefetch" href="/langnang/assets/js/177.961ca383.js"><link rel="prefetch" href="/langnang/assets/js/178.f6a50663.js"><link rel="prefetch" href="/langnang/assets/js/179.32053b51.js"><link rel="prefetch" href="/langnang/assets/js/18.c296e2e1.js"><link rel="prefetch" href="/langnang/assets/js/180.78baa277.js"><link rel="prefetch" href="/langnang/assets/js/181.fd6da4b7.js"><link rel="prefetch" href="/langnang/assets/js/182.409f2a7a.js"><link rel="prefetch" href="/langnang/assets/js/183.5a920d84.js"><link rel="prefetch" href="/langnang/assets/js/184.105cf2a5.js"><link rel="prefetch" href="/langnang/assets/js/185.a58308b2.js"><link rel="prefetch" href="/langnang/assets/js/186.0e5bd82d.js"><link rel="prefetch" href="/langnang/assets/js/187.4fa04382.js"><link rel="prefetch" href="/langnang/assets/js/188.97d376e0.js"><link rel="prefetch" href="/langnang/assets/js/189.80b00f18.js"><link rel="prefetch" href="/langnang/assets/js/19.1c5a6ebf.js"><link rel="prefetch" href="/langnang/assets/js/190.69690b18.js"><link rel="prefetch" href="/langnang/assets/js/191.0e3e1b72.js"><link rel="prefetch" href="/langnang/assets/js/192.9bd72dc2.js"><link rel="prefetch" href="/langnang/assets/js/193.56adf4dc.js"><link rel="prefetch" href="/langnang/assets/js/194.93bc1c26.js"><link rel="prefetch" href="/langnang/assets/js/195.b22b4646.js"><link rel="prefetch" href="/langnang/assets/js/196.7ab4c9c4.js"><link rel="prefetch" href="/langnang/assets/js/20.cb8b7c79.js"><link rel="prefetch" href="/langnang/assets/js/21.fa864efa.js"><link rel="prefetch" href="/langnang/assets/js/22.f9b2bb9e.js"><link rel="prefetch" href="/langnang/assets/js/23.f1d633b3.js"><link rel="prefetch" href="/langnang/assets/js/24.d48086ba.js"><link rel="prefetch" href="/langnang/assets/js/25.fae94c8a.js"><link rel="prefetch" href="/langnang/assets/js/26.0a794c38.js"><link rel="prefetch" href="/langnang/assets/js/27.3ab27b41.js"><link rel="prefetch" href="/langnang/assets/js/28.04cb9534.js"><link rel="prefetch" href="/langnang/assets/js/29.e736eb74.js"><link rel="prefetch" href="/langnang/assets/js/30.21343d23.js"><link rel="prefetch" href="/langnang/assets/js/31.46d8bc29.js"><link rel="prefetch" href="/langnang/assets/js/32.adbfd3d7.js"><link rel="prefetch" href="/langnang/assets/js/33.a652cb4a.js"><link rel="prefetch" href="/langnang/assets/js/34.a7cbf3be.js"><link rel="prefetch" href="/langnang/assets/js/35.682fcd4d.js"><link rel="prefetch" href="/langnang/assets/js/36.cf77b46c.js"><link rel="prefetch" href="/langnang/assets/js/37.72bb2cea.js"><link rel="prefetch" href="/langnang/assets/js/38.1f71af35.js"><link rel="prefetch" href="/langnang/assets/js/39.44ae3ca7.js"><link rel="prefetch" href="/langnang/assets/js/4.0015768f.js"><link rel="prefetch" href="/langnang/assets/js/40.d5c32fc6.js"><link rel="prefetch" href="/langnang/assets/js/41.b76618fa.js"><link rel="prefetch" href="/langnang/assets/js/42.f86242dc.js"><link rel="prefetch" href="/langnang/assets/js/43.762e6005.js"><link rel="prefetch" href="/langnang/assets/js/44.1d3f1771.js"><link rel="prefetch" href="/langnang/assets/js/45.0489851f.js"><link rel="prefetch" href="/langnang/assets/js/46.111d0911.js"><link rel="prefetch" href="/langnang/assets/js/47.089ce059.js"><link rel="prefetch" href="/langnang/assets/js/48.797a6840.js"><link rel="prefetch" href="/langnang/assets/js/49.bcf6b30e.js"><link rel="prefetch" href="/langnang/assets/js/5.a912fbe1.js"><link rel="prefetch" href="/langnang/assets/js/50.ec9ff8bb.js"><link rel="prefetch" href="/langnang/assets/js/51.da32bd2c.js"><link rel="prefetch" href="/langnang/assets/js/52.9ac7037d.js"><link rel="prefetch" href="/langnang/assets/js/53.913a149f.js"><link rel="prefetch" href="/langnang/assets/js/54.a39f0290.js"><link rel="prefetch" href="/langnang/assets/js/55.ce2fd45a.js"><link rel="prefetch" href="/langnang/assets/js/56.f95f2056.js"><link rel="prefetch" href="/langnang/assets/js/57.9641f8db.js"><link rel="prefetch" href="/langnang/assets/js/58.9e0bd9f9.js"><link rel="prefetch" href="/langnang/assets/js/59.ff799c4d.js"><link rel="prefetch" href="/langnang/assets/js/6.a83dfbde.js"><link rel="prefetch" href="/langnang/assets/js/60.e148b970.js"><link rel="prefetch" href="/langnang/assets/js/61.297c39ea.js"><link rel="prefetch" href="/langnang/assets/js/62.3f65914a.js"><link rel="prefetch" href="/langnang/assets/js/63.820344bb.js"><link rel="prefetch" href="/langnang/assets/js/64.e6d80ada.js"><link rel="prefetch" href="/langnang/assets/js/65.6645abf1.js"><link rel="prefetch" href="/langnang/assets/js/66.83b70802.js"><link rel="prefetch" href="/langnang/assets/js/67.c7861816.js"><link rel="prefetch" href="/langnang/assets/js/68.7bd18b26.js"><link rel="prefetch" href="/langnang/assets/js/69.51bc914a.js"><link rel="prefetch" href="/langnang/assets/js/7.c49c916e.js"><link rel="prefetch" href="/langnang/assets/js/70.adb07203.js"><link rel="prefetch" href="/langnang/assets/js/71.166ddd79.js"><link rel="prefetch" href="/langnang/assets/js/72.f3f769b7.js"><link rel="prefetch" href="/langnang/assets/js/73.a2cebf9d.js"><link rel="prefetch" href="/langnang/assets/js/74.31312659.js"><link rel="prefetch" href="/langnang/assets/js/75.c8eaec5f.js"><link rel="prefetch" href="/langnang/assets/js/76.9dcdecdd.js"><link rel="prefetch" href="/langnang/assets/js/77.7c23270e.js"><link rel="prefetch" href="/langnang/assets/js/78.f3e0ecf5.js"><link rel="prefetch" href="/langnang/assets/js/8.63d120fa.js"><link rel="prefetch" href="/langnang/assets/js/80.89a31bb9.js"><link rel="prefetch" href="/langnang/assets/js/81.f95bb1af.js"><link rel="prefetch" href="/langnang/assets/js/82.cab0e3cc.js"><link rel="prefetch" href="/langnang/assets/js/83.c8ba333b.js"><link rel="prefetch" href="/langnang/assets/js/84.46b333b4.js"><link rel="prefetch" href="/langnang/assets/js/85.e8942270.js"><link rel="prefetch" href="/langnang/assets/js/86.f4fba564.js"><link rel="prefetch" href="/langnang/assets/js/87.7f45a780.js"><link rel="prefetch" href="/langnang/assets/js/88.9fc00189.js"><link rel="prefetch" href="/langnang/assets/js/89.e4e6e356.js"><link rel="prefetch" href="/langnang/assets/js/9.17377351.js"><link rel="prefetch" href="/langnang/assets/js/90.2a30069d.js"><link rel="prefetch" href="/langnang/assets/js/91.d1fffc51.js"><link rel="prefetch" href="/langnang/assets/js/92.6d054837.js"><link rel="prefetch" href="/langnang/assets/js/93.6a2aeb2d.js"><link rel="prefetch" href="/langnang/assets/js/94.dfcb77e8.js"><link rel="prefetch" href="/langnang/assets/js/95.4e7702b3.js"><link rel="prefetch" href="/langnang/assets/js/96.5174433b.js"><link rel="prefetch" href="/langnang/assets/js/97.1afd331d.js"><link rel="prefetch" href="/langnang/assets/js/98.2888b244.js"><link rel="prefetch" href="/langnang/assets/js/99.1b857e0e.js"><link rel="prefetch" href="/langnang/assets/js/vendors~flowchart.d11844ea.js">
    <link rel="stylesheet" href="/langnang/assets/css/0.styles.8911c2d2.css">
  </head>
  <body>
    <div id="app" data-server-rendered="true"><div class="theme-container"><header class="navbar"><div class="sidebar-button"><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" role="img" viewBox="0 0 448 512" class="icon"><path fill="currentColor" d="M436 124H12c-6.627 0-12-5.373-12-12V80c0-6.627 5.373-12 12-12h424c6.627 0 12 5.373 12 12v32c0 6.627-5.373 12-12 12zm0 160H12c-6.627 0-12-5.373-12-12v-32c0-6.627 5.373-12 12-12h424c6.627 0 12 5.373 12 12v32c0 6.627-5.373 12-12 12zm0 160H12c-6.627 0-12-5.373-12-12v-32c0-6.627 5.373-12 12-12h424c6.627 0 12 5.373 12 12v32c0 6.627-5.373 12-12 12z"></path></svg></div> <a href="/langnang/" class="home-link router-link-active"><!----> <span class="site-name">Hello Langnang</span></a> <div class="links"><div class="search-box"><input aria-label="Search" autocomplete="off" spellcheck="false" value=""> <!----></div> <nav class="nav-links can-hide"><div class="nav-item"><a href="/langnang/" class="nav-link">
  Home
</a></div><div class="nav-item"><a href="/langnang/Interview/" class="nav-link">
  面试题
</a></div><div class="nav-item"><a href="/langnang/toolkit/" class="nav-link">
  软件工具&amp;服务
</a></div><div class="nav-item"><div class="dropdown-wrapper"><button type="button" aria-label="计算机科学技术" class="dropdown-title"><span class="title">计算机科学技术</span> <span class="arrow down"></span></button> <button type="button" aria-label="计算机科学技术" class="mobile-dropdown-title"><span class="title">计算机科学技术</span> <span class="arrow right"></span></button> <ul class="nav-dropdown" style="display:none;"><li class="dropdown-item"><h4>
          计算机科学技术基础
        </h4> <ul class="dropdown-subitem-wrapper"><li class="dropdown-subitem"><a href="/langnang/52010/5201040/" class="nav-link">
  算法理论
</a></li><li class="dropdown-subitem"><a href="/langnang/52010/5201050/" class="nav-link">
  数据结构
</a></li><li class="dropdown-subitem"><a href="/langnang/52010/5201060/" class="nav-link">
  数据安全与计算机安全
</a></li></ul></li><li class="dropdown-item"><h4>
          计算机软件
        </h4> <ul class="dropdown-subitem-wrapper"><li class="dropdown-subitem"><a href="/langnang/52040/5204010/" class="nav-link">
  软件理论
</a></li><li class="dropdown-subitem"><a href="/langnang/52040/5204020/" class="nav-link">
  操作系统与操作环境
</a></li><li class="dropdown-subitem"><a href="/langnang/52040/5204030/" class="nav-link">
  程序设计及其语言
</a></li><li class="dropdown-subitem"><a href="/langnang/52040/5204050/" class="nav-link">
  数据库
</a></li><li class="dropdown-subitem"><a href="/langnang/52040/5204060/HTML/" class="nav-link">
  软件开发环境与开发技术
</a></li><li class="dropdown-subitem"><a href="/langnang/52040/5204070/" class="nav-link">
  软件工程
</a></li></ul></li></ul></div></div><div class="nav-item"><a href="https://github.com/langnang/langnang" target="_blank" rel="noopener noreferrer" class="nav-link external">
  GitHub
  <span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a></div><div class="nav-item"><div class="dropdown-wrapper"><button type="button" aria-label="Langnang" class="dropdown-title"><span class="title">Langnang</span> <span class="arrow down"></span></button> <button type="button" aria-label="Langnang" class="mobile-dropdown-title"><span class="title">Langnang</span> <span class="arrow right"></span></button> <ul class="nav-dropdown" style="display:none;"><li class="dropdown-item"><!----> <a href="https://langnang.github.io/langnang" target="_blank" rel="noopener noreferrer" class="nav-link external">
  Langnang
  <span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a></li><li class="dropdown-item"><!----> <a href="https://langnang-temp.github.io/langnang-temp" target="_blank" rel="noopener noreferrer" class="nav-link external">
  Templates
  <span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a></li><li class="dropdown-item"><!----> <a href="https://langnang-package.github.io/langnang-package" target="_blank" rel="noopener noreferrer" class="nav-link external">
  Packages
  <span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a></li></ul></div></div> <!----></nav></div></header> <div class="sidebar-mask"></div> <aside class="sidebar"><nav class="nav-links"><div class="nav-item"><a href="/langnang/" class="nav-link">
  Home
</a></div><div class="nav-item"><a href="/langnang/Interview/" class="nav-link">
  面试题
</a></div><div class="nav-item"><a href="/langnang/toolkit/" class="nav-link">
  软件工具&amp;服务
</a></div><div class="nav-item"><div class="dropdown-wrapper"><button type="button" aria-label="计算机科学技术" class="dropdown-title"><span class="title">计算机科学技术</span> <span class="arrow down"></span></button> <button type="button" aria-label="计算机科学技术" class="mobile-dropdown-title"><span class="title">计算机科学技术</span> <span class="arrow right"></span></button> <ul class="nav-dropdown" style="display:none;"><li class="dropdown-item"><h4>
          计算机科学技术基础
        </h4> <ul class="dropdown-subitem-wrapper"><li class="dropdown-subitem"><a href="/langnang/52010/5201040/" class="nav-link">
  算法理论
</a></li><li class="dropdown-subitem"><a href="/langnang/52010/5201050/" class="nav-link">
  数据结构
</a></li><li class="dropdown-subitem"><a href="/langnang/52010/5201060/" class="nav-link">
  数据安全与计算机安全
</a></li></ul></li><li class="dropdown-item"><h4>
          计算机软件
        </h4> <ul class="dropdown-subitem-wrapper"><li class="dropdown-subitem"><a href="/langnang/52040/5204010/" class="nav-link">
  软件理论
</a></li><li class="dropdown-subitem"><a href="/langnang/52040/5204020/" class="nav-link">
  操作系统与操作环境
</a></li><li class="dropdown-subitem"><a href="/langnang/52040/5204030/" class="nav-link">
  程序设计及其语言
</a></li><li class="dropdown-subitem"><a href="/langnang/52040/5204050/" class="nav-link">
  数据库
</a></li><li class="dropdown-subitem"><a href="/langnang/52040/5204060/HTML/" class="nav-link">
  软件开发环境与开发技术
</a></li><li class="dropdown-subitem"><a href="/langnang/52040/5204070/" class="nav-link">
  软件工程
</a></li></ul></li></ul></div></div><div class="nav-item"><a href="https://github.com/langnang/langnang" target="_blank" rel="noopener noreferrer" class="nav-link external">
  GitHub
  <span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a></div><div class="nav-item"><div class="dropdown-wrapper"><button type="button" aria-label="Langnang" class="dropdown-title"><span class="title">Langnang</span> <span class="arrow down"></span></button> <button type="button" aria-label="Langnang" class="mobile-dropdown-title"><span class="title">Langnang</span> <span class="arrow right"></span></button> <ul class="nav-dropdown" style="display:none;"><li class="dropdown-item"><!----> <a href="https://langnang.github.io/langnang" target="_blank" rel="noopener noreferrer" class="nav-link external">
  Langnang
  <span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a></li><li class="dropdown-item"><!----> <a href="https://langnang-temp.github.io/langnang-temp" target="_blank" rel="noopener noreferrer" class="nav-link external">
  Templates
  <span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a></li><li class="dropdown-item"><!----> <a href="https://langnang-package.github.io/langnang-package" target="_blank" rel="noopener noreferrer" class="nav-link external">
  Packages
  <span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a></li></ul></div></div> <!----></nav>  <ul class="sidebar-links"><li><a href="/langnang/52040/5204010/" class="sidebar-link">软件理论</a></li><li><a href="/langnang/52040/5204020/" class="sidebar-link">操作系统与操作环境</a></li><li><a href="/langnang/52040/5204030/" class="sidebar-link">程序设计及其语言</a></li><li><a href="/langnang/52040/5204050/" class="sidebar-link">数据库</a></li><li><section class="sidebar-group collapsable depth-0"><p class="sidebar-heading open"><span>软件开发环境与开发技术</span> <span class="arrow down"></span></p> <ul class="sidebar-links sidebar-group-items"><li><a href="/langnang/52040/5204060/HTML/" class="sidebar-link">HTML</a></li><li><section class="sidebar-group collapsable is-sub-group depth-1"><a href="/langnang/52040/5204060/CSS/" class="sidebar-heading clickable"><span>CSS</span> <span class="arrow right"></span></a> <!----></section></li><li><section class="sidebar-group collapsable is-sub-group depth-1"><a href="/langnang/52040/5204060/JavaScript/" class="sidebar-heading clickable"><span>JavaScript</span> <span class="arrow right"></span></a> <!----></section></li><li><section class="sidebar-group collapsable is-sub-group depth-1"><a href="/langnang/52040/5204060/ECMAScript/ES6/" class="sidebar-heading clickable router-link-active open"><span>ES2015/ES6</span> <span class="arrow down"></span></a> <ul class="sidebar-links sidebar-group-items"><li><section class="sidebar-group collapsable is-sub-group depth-2"><p class="sidebar-heading"><span>面试题</span> <span class="arrow right"></span></p> <!----></section></li><li><section class="sidebar-group collapsable is-sub-group depth-2"><p class="sidebar-heading open"><span>参考手册</span> <span class="arrow down"></span></p> <ul class="sidebar-links sidebar-group-items"><li><section class="sidebar-group collapsable is-sub-group depth-3"><p class="sidebar-heading open"><span>ECMAScript 6 入门教程</span> <span class="arrow down"></span></p> <ul class="sidebar-links sidebar-group-items"><li><a href="/langnang/52040/5204060/ECMAScript/ES6/Reference/ECMAScript 6 入门教程/01-ECMAScript 6 简介.html" class="sidebar-link">ECMAScript 6 简介</a></li><li><a href="/langnang/52040/5204060/ECMAScript/ES6/Reference/ECMAScript 6 入门教程/02-let 和 const 命令.html" class="sidebar-link">let 和 const 命令</a></li><li><a href="/langnang/52040/5204060/ECMAScript/ES6/Reference/ECMAScript 6 入门教程/03-变量的解构赋值.html" class="sidebar-link">变量的解构赋值</a></li><li><a href="/langnang/52040/5204060/ECMAScript/ES6/Reference/ECMAScript 6 入门教程/04-字符串的扩展.html" class="sidebar-link">字符串的扩展</a></li><li><a href="/langnang/52040/5204060/ECMAScript/ES6/Reference/ECMAScript 6 入门教程/05-字符串的新增方法.html" class="sidebar-link">字符串的新增方法</a></li><li><a href="/langnang/52040/5204060/ECMAScript/ES6/Reference/ECMAScript 6 入门教程/06-正则的扩展.html" class="sidebar-link">正则的扩展</a></li><li><a href="/langnang/52040/5204060/ECMAScript/ES6/Reference/ECMAScript 6 入门教程/07-数值的扩展.html" class="sidebar-link">数值的扩展</a></li><li><a href="/langnang/52040/5204060/ECMAScript/ES6/Reference/ECMAScript 6 入门教程/08-函数的扩展.html" class="sidebar-link">函数的扩展</a></li><li><a href="/langnang/52040/5204060/ECMAScript/ES6/Reference/ECMAScript 6 入门教程/09-数组的扩展.html" class="sidebar-link">数组的扩展</a></li><li><a href="/langnang/52040/5204060/ECMAScript/ES6/Reference/ECMAScript 6 入门教程/10-对象的扩展.html" class="sidebar-link">对象的扩展</a></li><li><a href="/langnang/52040/5204060/ECMAScript/ES6/Reference/ECMAScript 6 入门教程/11-对象的新增方法.html" class="sidebar-link">对象的新增方法</a></li><li><a href="/langnang/52040/5204060/ECMAScript/ES6/Reference/ECMAScript 6 入门教程/12-运算符的扩展.html" class="sidebar-link">运算符的扩展</a></li><li><a href="/langnang/52040/5204060/ECMAScript/ES6/Reference/ECMAScript 6 入门教程/13-Symbol.html" class="sidebar-link">Symbol</a></li><li><a href="/langnang/52040/5204060/ECMAScript/ES6/Reference/ECMAScript 6 入门教程/14-Set 和 Map 数据结构.html" class="sidebar-link">Set 和 Map 数据结构</a></li><li><a href="/langnang/52040/5204060/ECMAScript/ES6/Reference/ECMAScript 6 入门教程/15-Proxy.html" class="sidebar-link">Set 和 Map 数据结构</a></li><li><a href="/langnang/52040/5204060/ECMAScript/ES6/Reference/ECMAScript 6 入门教程/16-Reflect.html" class="sidebar-link">Reflect</a></li><li><a href="/langnang/52040/5204060/ECMAScript/ES6/Reference/ECMAScript 6 入门教程/17-Promise 对象.html" class="sidebar-link">Promise 对象</a></li><li><a href="/langnang/52040/5204060/ECMAScript/ES6/Reference/ECMAScript 6 入门教程/18-Iterator 和 for...of 循环.html" class="sidebar-link">Iterator 和 for...of 循环</a></li><li><a href="/langnang/52040/5204060/ECMAScript/ES6/Reference/ECMAScript 6 入门教程/19-Generator 函数的语法.html" class="sidebar-link">Generator 函数的语法</a></li><li><a href="/langnang/52040/5204060/ECMAScript/ES6/Reference/ECMAScript 6 入门教程/20-Generator 函数的异步应用.html" class="sidebar-link">Generator 函数的异步应用</a></li><li><a href="/langnang/52040/5204060/ECMAScript/ES6/Reference/ECMAScript 6 入门教程/21-async 函数.html" class="sidebar-link">async 函数</a></li><li><a href="/langnang/52040/5204060/ECMAScript/ES6/Reference/ECMAScript 6 入门教程/22-Class 的基本语法.html" class="sidebar-link">Class 的基本语法</a></li><li><a href="/langnang/52040/5204060/ECMAScript/ES6/Reference/ECMAScript 6 入门教程/23-Class 的继承.html" class="active sidebar-link">Class 的继承</a><ul class="sidebar-sub-headers"><li class="sidebar-sub-header"><a href="/langnang/52040/5204060/ECMAScript/ES6/Reference/ECMAScript 6 入门教程/23-Class 的继承.html#简介" class="sidebar-link">简介</a></li><li class="sidebar-sub-header"><a href="/langnang/52040/5204060/ECMAScript/ES6/Reference/ECMAScript 6 入门教程/23-Class 的继承.html#object-getprototypeof" class="sidebar-link">Object.getPrototypeOf()</a></li><li class="sidebar-sub-header"><a href="/langnang/52040/5204060/ECMAScript/ES6/Reference/ECMAScript 6 入门教程/23-Class 的继承.html#super-关键字" class="sidebar-link">super 关键字</a></li><li class="sidebar-sub-header"><a href="/langnang/52040/5204060/ECMAScript/ES6/Reference/ECMAScript 6 入门教程/23-Class 的继承.html#类的-prototype-属性和-proto-属性" class="sidebar-link">类的 prototype 属性和__proto__属性</a></li><li class="sidebar-sub-header"><a href="/langnang/52040/5204060/ECMAScript/ES6/Reference/ECMAScript 6 入门教程/23-Class 的继承.html#原生构造函数的继承" class="sidebar-link">原生构造函数的继承</a></li><li class="sidebar-sub-header"><a href="/langnang/52040/5204060/ECMAScript/ES6/Reference/ECMAScript 6 入门教程/23-Class 的继承.html#mixin-模式的实现" class="sidebar-link">Mixin 模式的实现</a></li></ul></li><li><a href="/langnang/52040/5204060/ECMAScript/ES6/Reference/ECMAScript 6 入门教程/24-Module 的语法.html" class="sidebar-link">Class 的继承</a></li><li><a href="/langnang/52040/5204060/ECMAScript/ES6/Reference/ECMAScript 6 入门教程/25-Module 的加载实现.html" class="sidebar-link">Module 的加载实现</a></li><li><a href="/langnang/52040/5204060/ECMAScript/ES6/Reference/ECMAScript 6 入门教程/26-编程风格.html" class="sidebar-link">编程风格</a></li><li><a href="/langnang/52040/5204060/ECMAScript/ES6/Reference/ECMAScript 6 入门教程/27-读懂 ECMAScript 规格.html" class="sidebar-link">读懂 ECMAScript 规格</a></li><li><a href="/langnang/52040/5204060/ECMAScript/ES6/Reference/ECMAScript 6 入门教程/28-异步遍历器.html" class="sidebar-link">异步遍历器</a></li><li><a href="/langnang/52040/5204060/ECMAScript/ES6/Reference/ECMAScript 6 入门教程/29-ArrayBuffer.html" class="sidebar-link">ArrayBuffer</a></li><li><a href="/langnang/52040/5204060/ECMAScript/ES6/Reference/ECMAScript 6 入门教程/30-最新提案.html" class="sidebar-link">最新提案</a></li><li><a href="/langnang/52040/5204060/ECMAScript/ES6/Reference/ECMAScript 6 入门教程/31-装饰器.html" class="sidebar-link">装饰器</a></li><li><a href="/langnang/52040/5204060/ECMAScript/ES6/Reference/ECMAScript 6 入门教程/32-参考链接.html" class="sidebar-link">参考链接</a></li></ul></section></li></ul></section></li></ul></section></li><li><section class="sidebar-group collapsable is-sub-group depth-1"><a href="/langnang/52040/5204060/NodeJs/" class="sidebar-heading clickable"><span>NodeJs</span> <span class="arrow right"></span></a> <!----></section></li><li><a href="/langnang/52040/5204060/React/" class="sidebar-link">React</a></li><li><section class="sidebar-group collapsable is-sub-group depth-1"><a href="/langnang/52040/5204060/Vue/" class="sidebar-heading clickable"><span>Vue</span> <span class="arrow right"></span></a> <!----></section></li><li><a href="/langnang/52040/5204060/TypeScript/" class="sidebar-link">TypeScript</a></li><li><a href="/langnang/52040/5204060/WeChat/" class="sidebar-link">小程序</a></li><li><section class="sidebar-group collapsable is-sub-group depth-1"><p class="sidebar-heading"><span>NPM Packages</span> <span class="arrow right"></span></p> <!----></section></li></ul></section></li><li><a href="/langnang/52040/5204070/" class="sidebar-link">软件工程</a></li></ul> </aside> <main class="page"> <div class="theme-default-content content__default"><h1 id="class-的继承"><a href="#class-的继承" class="header-anchor">#</a> Class 的继承</h1> <ol><li><a href="https://es6.ruanyifeng.com/#docs/class-extends#%E7%AE%80%E4%BB%8B" target="_blank" rel="noopener noreferrer">简介<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a></li> <li><a href="https://es6.ruanyifeng.com/#docs/class-extends#Object.getPrototypeOf()" target="_blank" rel="noopener noreferrer">Object.getPrototypeOf()<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a></li> <li><a href="https://es6.ruanyifeng.com/#docs/class-extends#super%20%E5%85%B3%E9%94%AE%E5%AD%97" target="_blank" rel="noopener noreferrer">super 关键字<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a></li> <li><a href="https://es6.ruanyifeng.com/#docs/class-extends#%E7%B1%BB%E7%9A%84%20prototype%20%E5%B1%9E%E6%80%A7%E5%92%8C__proto__%E5%B1%9E%E6%80%A7" target="_blank" rel="noopener noreferrer">类的 prototype 属性和__proto__属性<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a></li> <li><a href="https://es6.ruanyifeng.com/#docs/class-extends#%E5%8E%9F%E7%94%9F%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E7%9A%84%E7%BB%A7%E6%89%BF" target="_blank" rel="noopener noreferrer">原生构造函数的继承<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a></li> <li><a href="https://es6.ruanyifeng.com/#docs/class-extends#Mixin%20%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%AE%9E%E7%8E%B0" target="_blank" rel="noopener noreferrer">Mixin 模式的实现<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a></li></ol> <h2 id="简介"><a href="#简介" class="header-anchor">#</a> 简介</h2> <p>Class 可以通过<code>extends</code>关键字实现继承，让子类继承父类的属性和方法。extends 的写法比 ES5 的原型链继承，要清晰和方便很多。</p> <div class="language- line-numbers-mode"><pre class="language-text"><code>class Point {
}

class ColorPoint extends Point {
}
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>上面示例中，<code>Point</code>是父类，<code>ColorPoint</code>是子类，它通过<code>extends</code>关键字，继承了<code>Point</code>类的所有属性和方法。但是由于没有部署任何代码，所以这两个类完全一样，等于复制了一个<code>Point</code>类。</p> <p>下面，我们在<code>ColorPoint</code>内部加上代码。</p> <div class="language- line-numbers-mode"><pre class="language-text"><code>class Point { /* ... */ }

class ColorPoint extends Point {
  constructor(x, y, color) {
    super(x, y); // 调用父类的constructor(x, y)
    this.color = color;
  }

  toString() {
    return this.color + ' ' + super.toString(); // 调用父类的toString()
  }
}
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>上面示例中，<code>constructor()</code>方法和<code>toString()</code>方法内部，都出现了<code>super</code>关键字。<code>super</code>在这里表示父类的构造函数，用来新建一个父类的实例对象。</p> <p>ES6 规定，子类必须在<code>constructor()</code>方法中调用<code>super()</code>，否则就会报错。这是因为子类自己的<code>this</code>对象，必须先通过父类的构造函数完成塑造，得到与父类同样的实例属性和方法，然后再对其进行加工，添加子类自己的实例属性和方法。如果不调用<code>super()</code>方法，子类就得不到自己的<code>this</code>对象。</p> <div class="language- line-numbers-mode"><pre class="language-text"><code>class Point { /* ... */ }

class ColorPoint extends Point {
  constructor() {
  }
}

let cp = new ColorPoint(); // ReferenceError
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>上面代码中，<code>ColorPoint</code>继承了父类<code>Point</code>，但是它的构造函数没有调用<code>super()</code>，导致新建实例时报错。</p> <p>为什么子类的构造函数，一定要调用<code>super()</code>？原因就在于 ES6 的继承机制，与 ES5 完全不同。ES5 的继承机制，是先创造一个独立的子类的实例对象，然后再将父类的方法添加到这个对象上面，即“实例在前，继承在后”。ES6 的继承机制，则是先将父类的属性和方法，加到一个空的对象上面，然后再将该对象作为子类的实例，即“继承在前，实例在后”。这就是为什么 ES6 的继承必须先调用<code>super()</code>方法，因为这一步会生成一个继承父类的<code>this</code>对象，没有这一步就无法继承父类。</p> <p>注意，这意味着新建子类实例时，父类的构造函数必定会先运行一次。</p> <div class="language- line-numbers-mode"><pre class="language-text"><code>class Foo {
  constructor() {
    console.log(1);
  }
}

class Bar extends Foo {
  constructor() {
    super();
    console.log(2);
  }
}

const bar = new Bar();
// 1
// 2
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>上面示例中，子类 Bar 新建实例时，会输出 1 和 2。原因就是子类构造函数调用<code>super()</code>时，会执行一次父类构造函数。</p> <p>另一个需要注意的地方是，在子类的构造函数中，只有调用<code>super()</code>之后，才可以使用<code>this</code>关键字，否则会报错。这是因为子类实例的构建，必须先完成父类的继承，只有<code>super()</code>方法才能让子类实例继承父类。</p> <div class="language- line-numbers-mode"><pre class="language-text"><code>class Point {
  constructor(x, y) {
    this.x = x;
    this.y = y;
  }
}

class ColorPoint extends Point {
  constructor(x, y, color) {
    this.color = color; // ReferenceError
    super(x, y);
    this.color = color; // 正确
  }
}
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>上面代码中，子类的<code>constructor()</code>方法没有调用<code>super()</code>之前，就使用<code>this</code>关键字，结果报错，而放在<code>super()</code>之后就是正确的。</p> <p>如果子类没有定义<code>constructor()</code>方法，这个方法会默认添加，并且里面会调用<code>super()</code>。也就是说，不管有没有显式定义，任何一个子类都有<code>constructor()</code>方法。</p> <div class="language- line-numbers-mode"><pre class="language-text"><code>class ColorPoint extends Point {
}

// 等同于
class ColorPoint extends Point {
  constructor(...args) {
    super(...args);
  }
}
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>有了子类的定义，就可以生成子类的实例了。</p> <div class="language- line-numbers-mode"><pre class="language-text"><code>let cp = new ColorPoint(25, 8, 'green');

cp instanceof ColorPoint // true
cp instanceof Point // true
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>上面示例中，实例对象<code>cp</code>同时是<code>ColorPoint</code>和<code>Point</code>两个类的实例，这与 ES5 的行为完全一致。</p> <p>除了私有属性，父类的所有属性和方法，都会被子类继承，其中包括静态方法。</p> <div class="language- line-numbers-mode"><pre class="language-text"><code>class A {
  static hello() {
    console.log('hello world');
  }
}

class B extends A {
}

B.hello()  // hello world
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>上面代码中，<code>hello()</code>是<code>A</code>类的静态方法，<code>B</code>继承<code>A</code>，也继承了<code>A</code>的静态方法。</p> <p>子类无法继承父类的私有属性，或者说，私有属性只能在定义它的 class 里面使用。</p> <div class="language- line-numbers-mode"><pre class="language-text"><code>class Foo {
  #p = 1;
  #m() {
    console.log('hello');
  }
}

class Bar extends Foo {
  constructor() {
    super();
    console.log(this.#p); // 报错
    this.#m(); // 报错
  }
}
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>上面示例中，子类 Bar 调用父类 Foo 的私有属性或私有方法，都会报错。</p> <p>如果父类定义了私有属性的读写方法，子类就可以通过这些方法，读写私有属性。</p> <div class="language- line-numbers-mode"><pre class="language-text"><code>class Foo {
  #p = 1;
  getP() {
    return this.#p;
  }
}

class Bar extends Foo {
  constructor() {
    super();
    console.log(this.getP()); // 1
  }
}
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>上面示例中，<code>getP()</code>是父类用来读取私有属性的方法，通过该方法，子类就可以读到父类的私有属性。</p> <h2 id="object-getprototypeof"><a href="#object-getprototypeof" class="header-anchor">#</a> Object.getPrototypeOf()</h2> <p><code>Object.getPrototypeOf()</code>方法可以用来从子类上获取父类。</p> <div class="language- line-numbers-mode"><pre class="language-text"><code>class Point { /*...*/ }

class ColorPoint extends Point { /*...*/ }

Object.getPrototypeOf(ColorPoint) === Point
// true
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>因此，可以使用这个方法判断，一个类是否继承了另一个类。</p> <h2 id="super-关键字"><a href="#super-关键字" class="header-anchor">#</a> super 关键字</h2> <p><code>super</code>这个关键字，既可以当作函数使用，也可以当作对象使用。在这两种情况下，它的用法完全不同。</p> <p>第一种情况，<code>super</code>作为函数调用时，代表父类的构造函数。ES6 要求，子类的构造函数必须执行一次<code>super</code>函数。</p> <div class="language- line-numbers-mode"><pre class="language-text"><code>class A {}

class B extends A {
  constructor() {
    super();
  }
}
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>上面代码中，子类<code>B</code>的构造函数之中的<code>super()</code>，代表调用父类的构造函数。这是必须的，否则 JavaScript 引擎会报错。</p> <p>注意，<code>super</code>虽然代表了父类<code>A</code>的构造函数，但是返回的是子类<code>B</code>的实例，即<code>super</code>内部的<code>this</code>指的是<code>B</code>的实例，因此<code>super()</code>在这里相当于<code>A.prototype.constructor.call(this)</code>。</p> <div class="language- line-numbers-mode"><pre class="language-text"><code>class A {
  constructor() {
    console.log(new.target.name);
  }
}
class B extends A {
  constructor() {
    super();
  }
}
new A() // A
new B() // B
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>上面代码中，<code>new.target</code>指向当前正在执行的函数。可以看到，在<code>super()</code>执行时，它指向的是子类<code>B</code>的构造函数，而不是父类<code>A</code>的构造函数。也就是说，<code>super()</code>内部的<code>this</code>指向的是<code>B</code>。</p> <p>作为函数时，<code>super()</code>只能用在子类的构造函数之中，用在其他地方就会报错。</p> <div class="language- line-numbers-mode"><pre class="language-text"><code>class A {}

class B extends A {
  m() {
    super(); // 报错
  }
}
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>上面代码中，<code>super()</code>用在<code>B</code>类的<code>m</code>方法之中，就会造成语法错误。</p> <p>第二种情况，<code>super</code>作为对象时，在普通方法中，指向父类的原型对象；在静态方法中，指向父类。</p> <div class="language- line-numbers-mode"><pre class="language-text"><code>class A {
  p() {
    return 2;
  }
}

class B extends A {
  constructor() {
    super();
    console.log(super.p()); // 2
  }
}

let b = new B();
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>上面代码中，子类<code>B</code>当中的<code>super.p()</code>，就是将<code>super</code>当作一个对象使用。这时，<code>super</code>在普通方法之中，指向<code>A.prototype</code>，所以<code>super.p()</code>就相当于<code>A.prototype.p()</code>。</p> <p>这里需要注意，由于<code>super</code>指向父类的原型对象，所以定义在父类实例上的方法或属性，是无法通过<code>super</code>调用的。</p> <div class="language- line-numbers-mode"><pre class="language-text"><code>class A {
  constructor() {
    this.p = 2;
  }
}

class B extends A {
  get m() {
    return super.p;
  }
}

let b = new B();
b.m // undefined
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>上面代码中，<code>p</code>是父类<code>A</code>实例的属性，<code>super.p</code>就引用不到它。</p> <p>如果属性定义在父类的原型对象上，<code>super</code>就可以取到。</p> <div class="language- line-numbers-mode"><pre class="language-text"><code>class A {}
A.prototype.x = 2;

class B extends A {
  constructor() {
    super();
    console.log(super.x) // 2
  }
}

let b = new B();
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>上面代码中，属性<code>x</code>是定义在<code>A.prototype</code>上面的，所以<code>super.x</code>可以取到它的值。</p> <p>ES6 规定，在子类普通方法中通过<code>super</code>调用父类的方法时，方法内部的<code>this</code>指向当前的子类实例。</p> <div class="language- line-numbers-mode"><pre class="language-text"><code>class A {
  constructor() {
    this.x = 1;
  }
  print() {
    console.log(this.x);
  }
}

class B extends A {
  constructor() {
    super();
    this.x = 2;
  }
  m() {
    super.print();
  }
}

let b = new B();
b.m() // 2
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p>上面代码中，<code>super.print()</code>虽然调用的是<code>A.prototype.print()</code>，但是<code>A.prototype.print()</code>内部的<code>this</code>指向子类<code>B</code>的实例，导致输出的是<code>2</code>，而不是<code>1</code>。也就是说，实际上执行的是<code>super.print.call(this)</code>。</p> <p>由于<code>this</code>指向子类实例，所以如果通过<code>super</code>对某个属性赋值，这时<code>super</code>就是<code>this</code>，赋值的属性会变成子类实例的属性。</p> <div class="language- line-numbers-mode"><pre class="language-text"><code>class A {
  constructor() {
    this.x = 1;
  }
}

class B extends A {
  constructor() {
    super();
    this.x = 2;
    super.x = 3;
    console.log(super.x); // undefined
    console.log(this.x); // 3
  }
}

let b = new B();
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>上面代码中，<code>super.x</code>赋值为<code>3</code>，这时等同于对<code>this.x</code>赋值为<code>3</code>。而当读取<code>super.x</code>的时候，读的是<code>A.prototype.x</code>，所以返回<code>undefined</code>。</p> <p>如果<code>super</code>作为对象，用在静态方法之中，这时<code>super</code>将指向父类，而不是父类的原型对象。</p> <div class="language- line-numbers-mode"><pre class="language-text"><code>class Parent {
  static myMethod(msg) {
    console.log('static', msg);
  }

  myMethod(msg) {
    console.log('instance', msg);
  }
}

class Child extends Parent {
  static myMethod(msg) {
    super.myMethod(msg);
  }

  myMethod(msg) {
    super.myMethod(msg);
  }
}

Child.myMethod(1); // static 1

var child = new Child();
child.myMethod(2); // instance 2
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><p>上面代码中，<code>super</code>在静态方法之中指向父类，在普通方法之中指向父类的原型对象。</p> <p>另外，在子类的静态方法中通过<code>super</code>调用父类的方法时，方法内部的<code>this</code>指向当前的子类，而不是子类的实例。</p> <div class="language- line-numbers-mode"><pre class="language-text"><code>class A {
  constructor() {
    this.x = 1;
  }
  static print() {
    console.log(this.x);
  }
}

class B extends A {
  constructor() {
    super();
    this.x = 2;
  }
  static m() {
    super.print();
  }
}

B.x = 3;
B.m() // 3
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p>上面代码中，静态方法<code>B.m</code>里面，<code>super.print</code>指向父类的静态方法。这个方法里面的<code>this</code>指向的是<code>B</code>，而不是<code>B</code>的实例。</p> <p>注意，使用<code>super</code>的时候，必须显式指定是作为函数、还是作为对象使用，否则会报错。</p> <div class="language- line-numbers-mode"><pre class="language-text"><code>class A {}

class B extends A {
  constructor() {
    super();
    console.log(super); // 报错
  }
}
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>上面代码中，<code>console.log(super)</code>当中的<code>super</code>，无法看出是作为函数使用，还是作为对象使用，所以 JavaScript 引擎解析代码的时候就会报错。这时，如果能清晰地表明<code>super</code>的数据类型，就不会报错。</p> <div class="language- line-numbers-mode"><pre class="language-text"><code>class A {}

class B extends A {
  constructor() {
    super();
    console.log(super.valueOf() instanceof B); // true
  }
}

let b = new B();
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>上面代码中，<code>super.valueOf()</code>表明<code>super</code>是一个对象，因此就不会报错。同时，由于<code>super</code>使得<code>this</code>指向<code>B</code>的实例，所以<code>super.valueOf()</code>返回的是一个<code>B</code>的实例。</p> <p>最后，由于对象总是继承其他对象的，所以可以在任意一个对象中，使用<code>super</code>关键字。</p> <div class="language- line-numbers-mode"><pre class="language-text"><code>var obj = {
  toString() {
    return &quot;MyObject: &quot; + super.toString();
  }
};

obj.toString(); // MyObject: [object Object]
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="类的-prototype-属性和-proto-属性"><a href="#类的-prototype-属性和-proto-属性" class="header-anchor">#</a> 类的 prototype 属性和__proto__属性</h2> <p>大多数浏览器的 ES5 实现之中，每一个对象都有<code>__proto__</code>属性，指向对应的构造函数的<code>prototype</code>属性。Class 作为构造函数的语法糖，同时有<code>prototype</code>属性和<code>__proto__</code>属性，因此同时存在两条继承链。</p> <p>（1）子类的<code>__proto__</code>属性，表示构造函数的继承，总是指向父类。</p> <p>（2）子类<code>prototype</code>属性的<code>__proto__</code>属性，表示方法的继承，总是指向父类的<code>prototype</code>属性。</p> <div class="language- line-numbers-mode"><pre class="language-text"><code>class A {
}

class B extends A {
}

B.__proto__ === A // true
B.prototype.__proto__ === A.prototype // true
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>上面代码中，子类<code>B</code>的<code>__proto__</code>属性指向父类<code>A</code>，子类<code>B</code>的<code>prototype</code>属性的<code>__proto__</code>属性指向父类<code>A</code>的<code>prototype</code>属性。</p> <p>这样的结果是因为，类的继承是按照下面的模式实现的。</p> <div class="language- line-numbers-mode"><pre class="language-text"><code>class A {
}

class B {
}

// B 的实例继承 A 的实例
Object.setPrototypeOf(B.prototype, A.prototype);

// B 继承 A 的静态属性
Object.setPrototypeOf(B, A);

const b = new B();
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>《对象的扩展》一章给出过<code>Object.setPrototypeOf</code>方法的实现。</p> <div class="language- line-numbers-mode"><pre class="language-text"><code>Object.setPrototypeOf = function (obj, proto) {
  obj.__proto__ = proto;
  return obj;
}
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>因此，就得到了上面的结果。</p> <div class="language- line-numbers-mode"><pre class="language-text"><code>Object.setPrototypeOf(B.prototype, A.prototype);
// 等同于
B.prototype.__proto__ = A.prototype;

Object.setPrototypeOf(B, A);
// 等同于
B.__proto__ = A;
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>这两条继承链，可以这样理解：作为一个对象，子类（<code>B</code>）的原型（<code>__proto__</code>属性）是父类（<code>A</code>）；作为一个构造函数，子类（<code>B</code>）的原型对象（<code>prototype</code>属性）是父类的原型对象（<code>prototype</code>属性）的实例。</p> <div class="language- line-numbers-mode"><pre class="language-text"><code>B.prototype = Object.create(A.prototype);
// 等同于
B.prototype.__proto__ = A.prototype;
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><code>extends</code>关键字后面可以跟多种类型的值。</p> <div class="language- line-numbers-mode"><pre class="language-text"><code>class B extends A {
}
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>上面代码的<code>A</code>，只要是一个有<code>prototype</code>属性的函数，就能被<code>B</code>继承。由于函数都有<code>prototype</code>属性（除了<code>Function.prototype</code>函数），因此<code>A</code>可以是任意函数。</p> <p>下面，讨论两种情况。第一种，子类继承<code>Object</code>类。</p> <div class="language- line-numbers-mode"><pre class="language-text"><code>class A extends Object {
}

A.__proto__ === Object // true
A.prototype.__proto__ === Object.prototype // true
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>这种情况下，<code>A</code>其实就是构造函数<code>Object</code>的复制，<code>A</code>的实例就是<code>Object</code>的实例。</p> <p>第二种情况，不存在任何继承。</p> <div class="language- line-numbers-mode"><pre class="language-text"><code>class A {
}

A.__proto__ === Function.prototype // true
A.prototype.__proto__ === Object.prototype // true
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>这种情况下，<code>A</code>作为一个基类（即不存在任何继承），就是一个普通函数，所以直接继承<code>Function.prototype</code>。但是，<code>A</code>调用后返回一个空对象（即<code>Object</code>实例），所以<code>A.prototype.__proto__</code>指向构造函数（<code>Object</code>）的<code>prototype</code>属性。</p> <h3 id="实例的-proto-属性"><a href="#实例的-proto-属性" class="header-anchor">#</a> 实例的 __proto__ 属性</h3> <p>子类实例的<code>__proto__</code>属性的<code>__proto__</code>属性，指向父类实例的<code>__proto__</code>属性。也就是说，子类的原型的原型，是父类的原型。</p> <div class="language- line-numbers-mode"><pre class="language-text"><code>var p1 = new Point(2, 3);
var p2 = new ColorPoint(2, 3, 'red');

p2.__proto__ === p1.__proto__ // false
p2.__proto__.__proto__ === p1.__proto__ // true
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>上面代码中，<code>ColorPoint</code>继承了<code>Point</code>，导致前者原型的原型是后者的原型。</p> <p>因此，通过子类实例的<code>__proto__.__proto__</code>属性，可以修改父类实例的行为。</p> <div class="language- line-numbers-mode"><pre class="language-text"><code>p2.__proto__.__proto__.printName = function () {
  console.log('Ha');
};

p1.printName() // &quot;Ha&quot;
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>上面代码在<code>ColorPoint</code>的实例<code>p2</code>上向<code>Point</code>类添加方法，结果影响到了<code>Point</code>的实例<code>p1</code>。</p> <h2 id="原生构造函数的继承"><a href="#原生构造函数的继承" class="header-anchor">#</a> 原生构造函数的继承</h2> <p>原生构造函数是指语言内置的构造函数，通常用来生成数据结构。ECMAScript 的原生构造函数大致有下面这些。</p> <ul><li>Boolean()</li> <li>Number()</li> <li>String()</li> <li>Array()</li> <li>Date()</li> <li>Function()</li> <li>RegExp()</li> <li>Error()</li> <li>Object()</li></ul> <p>以前，这些原生构造函数是无法继承的，比如，不能自己定义一个<code>Array</code>的子类。</p> <div class="language- line-numbers-mode"><pre class="language-text"><code>function MyArray() {
  Array.apply(this, arguments);
}

MyArray.prototype = Object.create(Array.prototype, {
  constructor: {
    value: MyArray,
    writable: true,
    configurable: true,
    enumerable: true
  }
});
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>上面代码定义了一个继承 Array 的<code>MyArray</code>类。但是，这个类的行为与<code>Array</code>完全不一致。</p> <div class="language- line-numbers-mode"><pre class="language-text"><code>var colors = new MyArray();
colors[0] = &quot;red&quot;;
colors.length  // 0

colors.length = 0;
colors[0]  // &quot;red&quot;
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>之所以会发生这种情况，是因为子类无法获得原生构造函数的内部属性，通过<code>Array.apply()</code>或者分配给原型对象都不行。原生构造函数会忽略<code>apply</code>方法传入的<code>this</code>，也就是说，原生构造函数的<code>this</code>无法绑定，导致拿不到内部属性。</p> <p>ES5 是先新建子类的实例对象<code>this</code>，再将父类的属性添加到子类上，由于父类的内部属性无法获取，导致无法继承原生的构造函数。比如，<code>Array</code>构造函数有一个内部属性<code>[[DefineOwnProperty]]</code>，用来定义新属性时，更新<code>length</code>属性，这个内部属性无法在子类获取，导致子类的<code>length</code>属性行为不正常。</p> <p>下面的例子中，我们想让一个普通对象继承<code>Error</code>对象。</p> <div class="language- line-numbers-mode"><pre class="language-text"><code>var e = {};

Object.getOwnPropertyNames(Error.call(e))
// [ 'stack' ]

Object.getOwnPropertyNames(e)
// []
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>上面代码中，我们想通过<code>Error.call(e)</code>这种写法，让普通对象<code>e</code>具有<code>Error</code>对象的实例属性。但是，<code>Error.call()</code>完全忽略传入的第一个参数，而是返回一个新对象，<code>e</code>本身没有任何变化。这证明了<code>Error.call(e)</code>这种写法，无法继承原生构造函数。</p> <p>ES6 允许继承原生构造函数定义子类，因为 ES6 是先新建父类的实例对象<code>this</code>，然后再用子类的构造函数修饰<code>this</code>，使得父类的所有行为都可以继承。下面是一个继承<code>Array</code>的例子。</p> <div class="language- line-numbers-mode"><pre class="language-text"><code>class MyArray extends Array {
  constructor(...args) {
    super(...args);
  }
}

var arr = new MyArray();
arr[0] = 12;
arr.length // 1

arr.length = 0;
arr[0] // undefined
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>上面代码定义了一个<code>MyArray</code>类，继承了<code>Array</code>构造函数，因此就可以从<code>MyArray</code>生成数组的实例。这意味着，ES6 可以自定义原生数据结构（比如<code>Array</code>、<code>String</code>等）的子类，这是 ES5 无法做到的。</p> <p>上面这个例子也说明，<code>extends</code>关键字不仅可以用来继承类，还可以用来继承原生的构造函数。因此可以在原生数据结构的基础上，定义自己的数据结构。下面就是定义了一个带版本功能的数组。</p> <div class="language- line-numbers-mode"><pre class="language-text"><code>class VersionedArray extends Array {
  constructor() {
    super();
    this.history = [[]];
  }
  commit() {
    this.history.push(this.slice());
  }
  revert() {
    this.splice(0, this.length, ...this.history[this.history.length - 1]);
  }
}

var x = new VersionedArray();

x.push(1);
x.push(2);
x // [1, 2]
x.history // [[]]

x.commit();
x.history // [[], [1, 2]]

x.push(3);
x // [1, 2, 3]
x.history // [[], [1, 2]]

x.revert();
x // [1, 2]
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div><p>上面代码中，<code>VersionedArray</code>会通过<code>commit</code>方法，将自己的当前状态生成一个版本快照，存入<code>history</code>属性。<code>revert</code>方法用来将数组重置为最新一次保存的版本。除此之外，<code>VersionedArray</code>依然是一个普通数组，所有原生的数组方法都可以在它上面调用。</p> <p>下面是一个自定义<code>Error</code>子类的例子，可以用来定制报错时的行为。</p> <div class="language- line-numbers-mode"><pre class="language-text"><code>class ExtendableError extends Error {
  constructor(message) {
    super();
    this.message = message;
    this.stack = (new Error()).stack;
    this.name = this.constructor.name;
  }
}

class MyError extends ExtendableError {
  constructor(m) {
    super(m);
  }
}

var myerror = new MyError('ll');
myerror.message // &quot;ll&quot;
myerror instanceof Error // true
myerror.name // &quot;MyError&quot;
myerror.stack
// Error
//     at MyError.ExtendableError
//     ...
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><p>注意，继承<code>Object</code>的子类，有一个<a href="https://stackoverflow.com/questions/36203614/super-does-not-pass-arguments-when-instantiating-a-class-extended-from-object" target="_blank" rel="noopener noreferrer">行为差异<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a>。</p> <div class="language- line-numbers-mode"><pre class="language-text"><code>class NewObj extends Object{
  constructor(){
    super(...arguments);
  }
}
var o = new NewObj({attr: true});
o.attr === true  // false
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>上面代码中，<code>NewObj</code>继承了<code>Object</code>，但是无法通过<code>super</code>方法向父类<code>Object</code>传参。这是因为 ES6 改变了<code>Object</code>构造函数的行为，一旦发现<code>Object</code>方法不是通过<code>new Object()</code>这种形式调用，ES6 规定<code>Object</code>构造函数会忽略参数。</p> <h2 id="mixin-模式的实现"><a href="#mixin-模式的实现" class="header-anchor">#</a> Mixin 模式的实现</h2> <p>Mixin 指的是多个对象合成一个新的对象，新对象具有各个组成成员的接口。它的最简单实现如下。</p> <div class="language- line-numbers-mode"><pre class="language-text"><code>const a = {
  a: 'a'
};
const b = {
  b: 'b'
};
const c = {...a, ...b}; // {a: 'a', b: 'b'}
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>上面代码中，<code>c</code>对象是<code>a</code>对象和<code>b</code>对象的合成，具有两者的接口。</p> <p>下面是一个更完备的实现，将多个类的接口“混入”（mix in）另一个类。</p> <div class="language- line-numbers-mode"><pre class="language-text"><code>function mix(...mixins) {
  class Mix {
    constructor() {
      for (let mixin of mixins) {
        copyProperties(this, new mixin()); // 拷贝实例属性
      }
    }
  }

  for (let mixin of mixins) {
    copyProperties(Mix, mixin); // 拷贝静态属性
    copyProperties(Mix.prototype, mixin.prototype); // 拷贝原型属性
  }

  return Mix;
}

function copyProperties(target, source) {
  for (let key of Reflect.ownKeys(source)) {
    if ( key !== 'constructor'
      &amp;&amp; key !== 'prototype'
      &amp;&amp; key !== 'name'
    ) {
      let desc = Object.getOwnPropertyDescriptor(source, key);
      Object.defineProperty(target, key, desc);
    }
  }
}
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><p>上面代码的<code>mix</code>函数，可以将多个对象合成为一个类。使用的时候，只要继承这个类即可。</p> <div class="language- line-numbers-mode"><pre class="language-text"><code>class DistributedEdit extends mix(Loggable, Serializable) {
  // ...
}
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="留言"><a href="#留言" class="header-anchor">#</a> 留言</h3></div> <footer class="page-edit"><!----> <div class="last-updated"><span class="prefix">Last Updated:</span> <span class="time">7/29/2022, 7:39:19 AM</span></div></footer> <!----> </main></div><div class="global-ui"><!----></div></div>
    <script src="/langnang/assets/js/app.d31b4f67.js" defer></script><script src="/langnang/assets/js/3.4862c1a5.js" defer></script><script src="/langnang/assets/js/79.2179f40d.js" defer></script>
  </body>
</html>
