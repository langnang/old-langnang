<!DOCTYPE html>
<html lang="en-US">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width,initial-scale=1">
    <title>Set 和 Map 数据结构 | Hello Langnang</title>
    <meta name="generator" content="VuePress 1.9.7">
    
    <meta name="description" content="Welcome to langnang">
    
    <link rel="preload" href="/langnang/assets/css/0.styles.8911c2d2.css" as="style"><link rel="preload" href="/langnang/assets/js/app.d31b4f67.js" as="script"><link rel="preload" href="/langnang/assets/js/3.4862c1a5.js" as="script"><link rel="preload" href="/langnang/assets/js/70.adb07203.js" as="script"><link rel="prefetch" href="/langnang/assets/js/10.775593e7.js"><link rel="prefetch" href="/langnang/assets/js/100.3b42a1b3.js"><link rel="prefetch" href="/langnang/assets/js/101.f90544bb.js"><link rel="prefetch" href="/langnang/assets/js/102.5948090a.js"><link rel="prefetch" href="/langnang/assets/js/103.646bae3d.js"><link rel="prefetch" href="/langnang/assets/js/104.388c68f6.js"><link rel="prefetch" href="/langnang/assets/js/105.3dc547ce.js"><link rel="prefetch" href="/langnang/assets/js/106.711f4951.js"><link rel="prefetch" href="/langnang/assets/js/107.8c7375e5.js"><link rel="prefetch" href="/langnang/assets/js/108.06de7dc8.js"><link rel="prefetch" href="/langnang/assets/js/109.5b31d5ad.js"><link rel="prefetch" href="/langnang/assets/js/11.0a5dae33.js"><link rel="prefetch" href="/langnang/assets/js/110.009ec9bb.js"><link rel="prefetch" href="/langnang/assets/js/111.bac229c8.js"><link rel="prefetch" href="/langnang/assets/js/112.c418e9e1.js"><link rel="prefetch" href="/langnang/assets/js/113.24a8ee24.js"><link rel="prefetch" href="/langnang/assets/js/114.8fe6afae.js"><link rel="prefetch" href="/langnang/assets/js/115.d2df2dc5.js"><link rel="prefetch" href="/langnang/assets/js/116.b5ccbd12.js"><link rel="prefetch" href="/langnang/assets/js/117.d172ce1f.js"><link rel="prefetch" href="/langnang/assets/js/118.6db473b1.js"><link rel="prefetch" href="/langnang/assets/js/119.19ec0599.js"><link rel="prefetch" href="/langnang/assets/js/12.0af39c0b.js"><link rel="prefetch" href="/langnang/assets/js/120.3c6dfea3.js"><link rel="prefetch" href="/langnang/assets/js/121.72a9adf6.js"><link rel="prefetch" href="/langnang/assets/js/122.75b8b13f.js"><link rel="prefetch" href="/langnang/assets/js/123.f5011de7.js"><link rel="prefetch" href="/langnang/assets/js/124.7a73b968.js"><link rel="prefetch" href="/langnang/assets/js/125.2fd0f7a8.js"><link rel="prefetch" href="/langnang/assets/js/126.56416ba6.js"><link rel="prefetch" href="/langnang/assets/js/127.ccd25ff4.js"><link rel="prefetch" href="/langnang/assets/js/128.8edc62a9.js"><link rel="prefetch" href="/langnang/assets/js/129.216fd032.js"><link rel="prefetch" href="/langnang/assets/js/13.c03d4d79.js"><link rel="prefetch" href="/langnang/assets/js/130.c57710d0.js"><link rel="prefetch" href="/langnang/assets/js/131.35330210.js"><link rel="prefetch" href="/langnang/assets/js/132.ec0bf031.js"><link rel="prefetch" href="/langnang/assets/js/133.c6a81315.js"><link rel="prefetch" href="/langnang/assets/js/134.9e3141d7.js"><link rel="prefetch" href="/langnang/assets/js/135.111242f1.js"><link rel="prefetch" href="/langnang/assets/js/136.ef67c601.js"><link rel="prefetch" href="/langnang/assets/js/137.bb3e40a9.js"><link rel="prefetch" href="/langnang/assets/js/138.80a1b191.js"><link rel="prefetch" href="/langnang/assets/js/139.608bdbfe.js"><link rel="prefetch" href="/langnang/assets/js/14.050f82cf.js"><link rel="prefetch" href="/langnang/assets/js/140.e736bed7.js"><link rel="prefetch" href="/langnang/assets/js/141.8bb3e423.js"><link rel="prefetch" href="/langnang/assets/js/142.599583d1.js"><link rel="prefetch" href="/langnang/assets/js/143.1b03e7c9.js"><link rel="prefetch" href="/langnang/assets/js/144.d59da5cd.js"><link rel="prefetch" href="/langnang/assets/js/145.69f830c2.js"><link rel="prefetch" href="/langnang/assets/js/146.f1d0d249.js"><link rel="prefetch" href="/langnang/assets/js/147.6ffe2b0a.js"><link rel="prefetch" href="/langnang/assets/js/148.a23cb0f6.js"><link rel="prefetch" href="/langnang/assets/js/149.fc2d720e.js"><link rel="prefetch" href="/langnang/assets/js/15.52373675.js"><link rel="prefetch" href="/langnang/assets/js/150.fde1fdfc.js"><link rel="prefetch" href="/langnang/assets/js/151.ad337b6b.js"><link rel="prefetch" href="/langnang/assets/js/152.c27a6a8b.js"><link rel="prefetch" href="/langnang/assets/js/153.d1df63e4.js"><link rel="prefetch" href="/langnang/assets/js/154.37e8d179.js"><link rel="prefetch" href="/langnang/assets/js/155.20a7bd1e.js"><link rel="prefetch" href="/langnang/assets/js/156.3eb0c337.js"><link rel="prefetch" href="/langnang/assets/js/157.b439abfe.js"><link rel="prefetch" href="/langnang/assets/js/158.e27914da.js"><link rel="prefetch" href="/langnang/assets/js/159.e2c81e4d.js"><link rel="prefetch" href="/langnang/assets/js/16.d39a414a.js"><link rel="prefetch" href="/langnang/assets/js/160.be13652a.js"><link rel="prefetch" href="/langnang/assets/js/161.bb2944ac.js"><link rel="prefetch" href="/langnang/assets/js/162.03f5841b.js"><link rel="prefetch" href="/langnang/assets/js/163.ab0cc579.js"><link rel="prefetch" href="/langnang/assets/js/164.d1c5018d.js"><link rel="prefetch" href="/langnang/assets/js/165.6041bd7d.js"><link rel="prefetch" href="/langnang/assets/js/166.4007cfdb.js"><link rel="prefetch" href="/langnang/assets/js/167.60edd5dc.js"><link rel="prefetch" href="/langnang/assets/js/168.6c3f208e.js"><link rel="prefetch" href="/langnang/assets/js/169.c0440ecf.js"><link rel="prefetch" href="/langnang/assets/js/17.742bbdba.js"><link rel="prefetch" href="/langnang/assets/js/170.a3a5c6fc.js"><link rel="prefetch" href="/langnang/assets/js/171.9da19196.js"><link rel="prefetch" href="/langnang/assets/js/172.81335ae9.js"><link rel="prefetch" href="/langnang/assets/js/173.eff4c653.js"><link rel="prefetch" href="/langnang/assets/js/174.067a131c.js"><link rel="prefetch" href="/langnang/assets/js/175.d9f2d29c.js"><link rel="prefetch" href="/langnang/assets/js/176.9160d186.js"><link rel="prefetch" href="/langnang/assets/js/177.961ca383.js"><link rel="prefetch" href="/langnang/assets/js/178.f6a50663.js"><link rel="prefetch" href="/langnang/assets/js/179.32053b51.js"><link rel="prefetch" href="/langnang/assets/js/18.c296e2e1.js"><link rel="prefetch" href="/langnang/assets/js/180.78baa277.js"><link rel="prefetch" href="/langnang/assets/js/181.fd6da4b7.js"><link rel="prefetch" href="/langnang/assets/js/182.409f2a7a.js"><link rel="prefetch" href="/langnang/assets/js/183.5a920d84.js"><link rel="prefetch" href="/langnang/assets/js/184.105cf2a5.js"><link rel="prefetch" href="/langnang/assets/js/185.a58308b2.js"><link rel="prefetch" href="/langnang/assets/js/186.0e5bd82d.js"><link rel="prefetch" href="/langnang/assets/js/187.4fa04382.js"><link rel="prefetch" href="/langnang/assets/js/188.97d376e0.js"><link rel="prefetch" href="/langnang/assets/js/189.80b00f18.js"><link rel="prefetch" href="/langnang/assets/js/19.1c5a6ebf.js"><link rel="prefetch" href="/langnang/assets/js/190.69690b18.js"><link rel="prefetch" href="/langnang/assets/js/191.0e3e1b72.js"><link rel="prefetch" href="/langnang/assets/js/192.9bd72dc2.js"><link rel="prefetch" href="/langnang/assets/js/193.56adf4dc.js"><link rel="prefetch" href="/langnang/assets/js/194.93bc1c26.js"><link rel="prefetch" href="/langnang/assets/js/195.b22b4646.js"><link rel="prefetch" href="/langnang/assets/js/196.7ab4c9c4.js"><link rel="prefetch" href="/langnang/assets/js/20.cb8b7c79.js"><link rel="prefetch" href="/langnang/assets/js/21.fa864efa.js"><link rel="prefetch" href="/langnang/assets/js/22.f9b2bb9e.js"><link rel="prefetch" href="/langnang/assets/js/23.f1d633b3.js"><link rel="prefetch" href="/langnang/assets/js/24.d48086ba.js"><link rel="prefetch" href="/langnang/assets/js/25.fae94c8a.js"><link rel="prefetch" href="/langnang/assets/js/26.0a794c38.js"><link rel="prefetch" href="/langnang/assets/js/27.3ab27b41.js"><link rel="prefetch" href="/langnang/assets/js/28.04cb9534.js"><link rel="prefetch" href="/langnang/assets/js/29.e736eb74.js"><link rel="prefetch" href="/langnang/assets/js/30.21343d23.js"><link rel="prefetch" href="/langnang/assets/js/31.46d8bc29.js"><link rel="prefetch" href="/langnang/assets/js/32.adbfd3d7.js"><link rel="prefetch" href="/langnang/assets/js/33.a652cb4a.js"><link rel="prefetch" href="/langnang/assets/js/34.a7cbf3be.js"><link rel="prefetch" href="/langnang/assets/js/35.682fcd4d.js"><link rel="prefetch" href="/langnang/assets/js/36.cf77b46c.js"><link rel="prefetch" href="/langnang/assets/js/37.72bb2cea.js"><link rel="prefetch" href="/langnang/assets/js/38.1f71af35.js"><link rel="prefetch" href="/langnang/assets/js/39.44ae3ca7.js"><link rel="prefetch" href="/langnang/assets/js/4.0015768f.js"><link rel="prefetch" href="/langnang/assets/js/40.d5c32fc6.js"><link rel="prefetch" href="/langnang/assets/js/41.b76618fa.js"><link rel="prefetch" href="/langnang/assets/js/42.f86242dc.js"><link rel="prefetch" href="/langnang/assets/js/43.762e6005.js"><link rel="prefetch" href="/langnang/assets/js/44.1d3f1771.js"><link rel="prefetch" href="/langnang/assets/js/45.0489851f.js"><link rel="prefetch" href="/langnang/assets/js/46.111d0911.js"><link rel="prefetch" href="/langnang/assets/js/47.089ce059.js"><link rel="prefetch" href="/langnang/assets/js/48.797a6840.js"><link rel="prefetch" href="/langnang/assets/js/49.bcf6b30e.js"><link rel="prefetch" href="/langnang/assets/js/5.a912fbe1.js"><link rel="prefetch" href="/langnang/assets/js/50.ec9ff8bb.js"><link rel="prefetch" href="/langnang/assets/js/51.da32bd2c.js"><link rel="prefetch" href="/langnang/assets/js/52.9ac7037d.js"><link rel="prefetch" href="/langnang/assets/js/53.913a149f.js"><link rel="prefetch" href="/langnang/assets/js/54.a39f0290.js"><link rel="prefetch" href="/langnang/assets/js/55.ce2fd45a.js"><link rel="prefetch" href="/langnang/assets/js/56.f95f2056.js"><link rel="prefetch" href="/langnang/assets/js/57.9641f8db.js"><link rel="prefetch" href="/langnang/assets/js/58.9e0bd9f9.js"><link rel="prefetch" href="/langnang/assets/js/59.ff799c4d.js"><link rel="prefetch" href="/langnang/assets/js/6.a83dfbde.js"><link rel="prefetch" href="/langnang/assets/js/60.e148b970.js"><link rel="prefetch" href="/langnang/assets/js/61.297c39ea.js"><link rel="prefetch" href="/langnang/assets/js/62.3f65914a.js"><link rel="prefetch" href="/langnang/assets/js/63.820344bb.js"><link rel="prefetch" href="/langnang/assets/js/64.e6d80ada.js"><link rel="prefetch" href="/langnang/assets/js/65.6645abf1.js"><link rel="prefetch" href="/langnang/assets/js/66.83b70802.js"><link rel="prefetch" href="/langnang/assets/js/67.c7861816.js"><link rel="prefetch" href="/langnang/assets/js/68.7bd18b26.js"><link rel="prefetch" href="/langnang/assets/js/69.51bc914a.js"><link rel="prefetch" href="/langnang/assets/js/7.c49c916e.js"><link rel="prefetch" href="/langnang/assets/js/71.166ddd79.js"><link rel="prefetch" href="/langnang/assets/js/72.f3f769b7.js"><link rel="prefetch" href="/langnang/assets/js/73.a2cebf9d.js"><link rel="prefetch" href="/langnang/assets/js/74.31312659.js"><link rel="prefetch" href="/langnang/assets/js/75.c8eaec5f.js"><link rel="prefetch" href="/langnang/assets/js/76.9dcdecdd.js"><link rel="prefetch" href="/langnang/assets/js/77.7c23270e.js"><link rel="prefetch" href="/langnang/assets/js/78.f3e0ecf5.js"><link rel="prefetch" href="/langnang/assets/js/79.2179f40d.js"><link rel="prefetch" href="/langnang/assets/js/8.63d120fa.js"><link rel="prefetch" href="/langnang/assets/js/80.89a31bb9.js"><link rel="prefetch" href="/langnang/assets/js/81.f95bb1af.js"><link rel="prefetch" href="/langnang/assets/js/82.cab0e3cc.js"><link rel="prefetch" href="/langnang/assets/js/83.c8ba333b.js"><link rel="prefetch" href="/langnang/assets/js/84.46b333b4.js"><link rel="prefetch" href="/langnang/assets/js/85.e8942270.js"><link rel="prefetch" href="/langnang/assets/js/86.f4fba564.js"><link rel="prefetch" href="/langnang/assets/js/87.7f45a780.js"><link rel="prefetch" href="/langnang/assets/js/88.9fc00189.js"><link rel="prefetch" href="/langnang/assets/js/89.e4e6e356.js"><link rel="prefetch" href="/langnang/assets/js/9.17377351.js"><link rel="prefetch" href="/langnang/assets/js/90.2a30069d.js"><link rel="prefetch" href="/langnang/assets/js/91.d1fffc51.js"><link rel="prefetch" href="/langnang/assets/js/92.6d054837.js"><link rel="prefetch" href="/langnang/assets/js/93.6a2aeb2d.js"><link rel="prefetch" href="/langnang/assets/js/94.dfcb77e8.js"><link rel="prefetch" href="/langnang/assets/js/95.4e7702b3.js"><link rel="prefetch" href="/langnang/assets/js/96.5174433b.js"><link rel="prefetch" href="/langnang/assets/js/97.1afd331d.js"><link rel="prefetch" href="/langnang/assets/js/98.2888b244.js"><link rel="prefetch" href="/langnang/assets/js/99.1b857e0e.js"><link rel="prefetch" href="/langnang/assets/js/vendors~flowchart.d11844ea.js">
    <link rel="stylesheet" href="/langnang/assets/css/0.styles.8911c2d2.css">
  </head>
  <body>
    <div id="app" data-server-rendered="true"><div class="theme-container"><header class="navbar"><div class="sidebar-button"><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" role="img" viewBox="0 0 448 512" class="icon"><path fill="currentColor" d="M436 124H12c-6.627 0-12-5.373-12-12V80c0-6.627 5.373-12 12-12h424c6.627 0 12 5.373 12 12v32c0 6.627-5.373 12-12 12zm0 160H12c-6.627 0-12-5.373-12-12v-32c0-6.627 5.373-12 12-12h424c6.627 0 12 5.373 12 12v32c0 6.627-5.373 12-12 12zm0 160H12c-6.627 0-12-5.373-12-12v-32c0-6.627 5.373-12 12-12h424c6.627 0 12 5.373 12 12v32c0 6.627-5.373 12-12 12z"></path></svg></div> <a href="/langnang/" class="home-link router-link-active"><!----> <span class="site-name">Hello Langnang</span></a> <div class="links"><div class="search-box"><input aria-label="Search" autocomplete="off" spellcheck="false" value=""> <!----></div> <nav class="nav-links can-hide"><div class="nav-item"><a href="/langnang/" class="nav-link">
  Home
</a></div><div class="nav-item"><a href="/langnang/Interview/" class="nav-link">
  面试题
</a></div><div class="nav-item"><a href="/langnang/toolkit/" class="nav-link">
  软件工具&amp;服务
</a></div><div class="nav-item"><div class="dropdown-wrapper"><button type="button" aria-label="计算机科学技术" class="dropdown-title"><span class="title">计算机科学技术</span> <span class="arrow down"></span></button> <button type="button" aria-label="计算机科学技术" class="mobile-dropdown-title"><span class="title">计算机科学技术</span> <span class="arrow right"></span></button> <ul class="nav-dropdown" style="display:none;"><li class="dropdown-item"><h4>
          计算机科学技术基础
        </h4> <ul class="dropdown-subitem-wrapper"><li class="dropdown-subitem"><a href="/langnang/52010/5201040/" class="nav-link">
  算法理论
</a></li><li class="dropdown-subitem"><a href="/langnang/52010/5201050/" class="nav-link">
  数据结构
</a></li><li class="dropdown-subitem"><a href="/langnang/52010/5201060/" class="nav-link">
  数据安全与计算机安全
</a></li></ul></li><li class="dropdown-item"><h4>
          计算机软件
        </h4> <ul class="dropdown-subitem-wrapper"><li class="dropdown-subitem"><a href="/langnang/52040/5204010/" class="nav-link">
  软件理论
</a></li><li class="dropdown-subitem"><a href="/langnang/52040/5204020/" class="nav-link">
  操作系统与操作环境
</a></li><li class="dropdown-subitem"><a href="/langnang/52040/5204030/" class="nav-link">
  程序设计及其语言
</a></li><li class="dropdown-subitem"><a href="/langnang/52040/5204050/" class="nav-link">
  数据库
</a></li><li class="dropdown-subitem"><a href="/langnang/52040/5204060/HTML/" class="nav-link">
  软件开发环境与开发技术
</a></li><li class="dropdown-subitem"><a href="/langnang/52040/5204070/" class="nav-link">
  软件工程
</a></li></ul></li></ul></div></div><div class="nav-item"><a href="https://github.com/langnang/langnang" target="_blank" rel="noopener noreferrer" class="nav-link external">
  GitHub
  <span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a></div><div class="nav-item"><div class="dropdown-wrapper"><button type="button" aria-label="Langnang" class="dropdown-title"><span class="title">Langnang</span> <span class="arrow down"></span></button> <button type="button" aria-label="Langnang" class="mobile-dropdown-title"><span class="title">Langnang</span> <span class="arrow right"></span></button> <ul class="nav-dropdown" style="display:none;"><li class="dropdown-item"><!----> <a href="https://langnang.github.io/langnang" target="_blank" rel="noopener noreferrer" class="nav-link external">
  Langnang
  <span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a></li><li class="dropdown-item"><!----> <a href="https://langnang-temp.github.io/langnang-temp" target="_blank" rel="noopener noreferrer" class="nav-link external">
  Templates
  <span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a></li><li class="dropdown-item"><!----> <a href="https://langnang-package.github.io/langnang-package" target="_blank" rel="noopener noreferrer" class="nav-link external">
  Packages
  <span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a></li></ul></div></div> <!----></nav></div></header> <div class="sidebar-mask"></div> <aside class="sidebar"><nav class="nav-links"><div class="nav-item"><a href="/langnang/" class="nav-link">
  Home
</a></div><div class="nav-item"><a href="/langnang/Interview/" class="nav-link">
  面试题
</a></div><div class="nav-item"><a href="/langnang/toolkit/" class="nav-link">
  软件工具&amp;服务
</a></div><div class="nav-item"><div class="dropdown-wrapper"><button type="button" aria-label="计算机科学技术" class="dropdown-title"><span class="title">计算机科学技术</span> <span class="arrow down"></span></button> <button type="button" aria-label="计算机科学技术" class="mobile-dropdown-title"><span class="title">计算机科学技术</span> <span class="arrow right"></span></button> <ul class="nav-dropdown" style="display:none;"><li class="dropdown-item"><h4>
          计算机科学技术基础
        </h4> <ul class="dropdown-subitem-wrapper"><li class="dropdown-subitem"><a href="/langnang/52010/5201040/" class="nav-link">
  算法理论
</a></li><li class="dropdown-subitem"><a href="/langnang/52010/5201050/" class="nav-link">
  数据结构
</a></li><li class="dropdown-subitem"><a href="/langnang/52010/5201060/" class="nav-link">
  数据安全与计算机安全
</a></li></ul></li><li class="dropdown-item"><h4>
          计算机软件
        </h4> <ul class="dropdown-subitem-wrapper"><li class="dropdown-subitem"><a href="/langnang/52040/5204010/" class="nav-link">
  软件理论
</a></li><li class="dropdown-subitem"><a href="/langnang/52040/5204020/" class="nav-link">
  操作系统与操作环境
</a></li><li class="dropdown-subitem"><a href="/langnang/52040/5204030/" class="nav-link">
  程序设计及其语言
</a></li><li class="dropdown-subitem"><a href="/langnang/52040/5204050/" class="nav-link">
  数据库
</a></li><li class="dropdown-subitem"><a href="/langnang/52040/5204060/HTML/" class="nav-link">
  软件开发环境与开发技术
</a></li><li class="dropdown-subitem"><a href="/langnang/52040/5204070/" class="nav-link">
  软件工程
</a></li></ul></li></ul></div></div><div class="nav-item"><a href="https://github.com/langnang/langnang" target="_blank" rel="noopener noreferrer" class="nav-link external">
  GitHub
  <span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a></div><div class="nav-item"><div class="dropdown-wrapper"><button type="button" aria-label="Langnang" class="dropdown-title"><span class="title">Langnang</span> <span class="arrow down"></span></button> <button type="button" aria-label="Langnang" class="mobile-dropdown-title"><span class="title">Langnang</span> <span class="arrow right"></span></button> <ul class="nav-dropdown" style="display:none;"><li class="dropdown-item"><!----> <a href="https://langnang.github.io/langnang" target="_blank" rel="noopener noreferrer" class="nav-link external">
  Langnang
  <span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a></li><li class="dropdown-item"><!----> <a href="https://langnang-temp.github.io/langnang-temp" target="_blank" rel="noopener noreferrer" class="nav-link external">
  Templates
  <span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a></li><li class="dropdown-item"><!----> <a href="https://langnang-package.github.io/langnang-package" target="_blank" rel="noopener noreferrer" class="nav-link external">
  Packages
  <span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a></li></ul></div></div> <!----></nav>  <ul class="sidebar-links"><li><a href="/langnang/52040/5204010/" class="sidebar-link">软件理论</a></li><li><a href="/langnang/52040/5204020/" class="sidebar-link">操作系统与操作环境</a></li><li><a href="/langnang/52040/5204030/" class="sidebar-link">程序设计及其语言</a></li><li><a href="/langnang/52040/5204050/" class="sidebar-link">数据库</a></li><li><section class="sidebar-group collapsable depth-0"><p class="sidebar-heading open"><span>软件开发环境与开发技术</span> <span class="arrow down"></span></p> <ul class="sidebar-links sidebar-group-items"><li><a href="/langnang/52040/5204060/HTML/" class="sidebar-link">HTML</a></li><li><section class="sidebar-group collapsable is-sub-group depth-1"><a href="/langnang/52040/5204060/CSS/" class="sidebar-heading clickable"><span>CSS</span> <span class="arrow right"></span></a> <!----></section></li><li><section class="sidebar-group collapsable is-sub-group depth-1"><a href="/langnang/52040/5204060/JavaScript/" class="sidebar-heading clickable"><span>JavaScript</span> <span class="arrow right"></span></a> <!----></section></li><li><section class="sidebar-group collapsable is-sub-group depth-1"><a href="/langnang/52040/5204060/ECMAScript/ES6/" class="sidebar-heading clickable router-link-active open"><span>ES2015/ES6</span> <span class="arrow down"></span></a> <ul class="sidebar-links sidebar-group-items"><li><section class="sidebar-group collapsable is-sub-group depth-2"><p class="sidebar-heading"><span>面试题</span> <span class="arrow right"></span></p> <!----></section></li><li><section class="sidebar-group collapsable is-sub-group depth-2"><p class="sidebar-heading open"><span>参考手册</span> <span class="arrow down"></span></p> <ul class="sidebar-links sidebar-group-items"><li><section class="sidebar-group collapsable is-sub-group depth-3"><p class="sidebar-heading open"><span>ECMAScript 6 入门教程</span> <span class="arrow down"></span></p> <ul class="sidebar-links sidebar-group-items"><li><a href="/langnang/52040/5204060/ECMAScript/ES6/Reference/ECMAScript 6 入门教程/01-ECMAScript 6 简介.html" class="sidebar-link">ECMAScript 6 简介</a></li><li><a href="/langnang/52040/5204060/ECMAScript/ES6/Reference/ECMAScript 6 入门教程/02-let 和 const 命令.html" class="sidebar-link">let 和 const 命令</a></li><li><a href="/langnang/52040/5204060/ECMAScript/ES6/Reference/ECMAScript 6 入门教程/03-变量的解构赋值.html" class="sidebar-link">变量的解构赋值</a></li><li><a href="/langnang/52040/5204060/ECMAScript/ES6/Reference/ECMAScript 6 入门教程/04-字符串的扩展.html" class="sidebar-link">字符串的扩展</a></li><li><a href="/langnang/52040/5204060/ECMAScript/ES6/Reference/ECMAScript 6 入门教程/05-字符串的新增方法.html" class="sidebar-link">字符串的新增方法</a></li><li><a href="/langnang/52040/5204060/ECMAScript/ES6/Reference/ECMAScript 6 入门教程/06-正则的扩展.html" class="sidebar-link">正则的扩展</a></li><li><a href="/langnang/52040/5204060/ECMAScript/ES6/Reference/ECMAScript 6 入门教程/07-数值的扩展.html" class="sidebar-link">数值的扩展</a></li><li><a href="/langnang/52040/5204060/ECMAScript/ES6/Reference/ECMAScript 6 入门教程/08-函数的扩展.html" class="sidebar-link">函数的扩展</a></li><li><a href="/langnang/52040/5204060/ECMAScript/ES6/Reference/ECMAScript 6 入门教程/09-数组的扩展.html" class="sidebar-link">数组的扩展</a></li><li><a href="/langnang/52040/5204060/ECMAScript/ES6/Reference/ECMAScript 6 入门教程/10-对象的扩展.html" class="sidebar-link">对象的扩展</a></li><li><a href="/langnang/52040/5204060/ECMAScript/ES6/Reference/ECMAScript 6 入门教程/11-对象的新增方法.html" class="sidebar-link">对象的新增方法</a></li><li><a href="/langnang/52040/5204060/ECMAScript/ES6/Reference/ECMAScript 6 入门教程/12-运算符的扩展.html" class="sidebar-link">运算符的扩展</a></li><li><a href="/langnang/52040/5204060/ECMAScript/ES6/Reference/ECMAScript 6 入门教程/13-Symbol.html" class="sidebar-link">Symbol</a></li><li><a href="/langnang/52040/5204060/ECMAScript/ES6/Reference/ECMAScript 6 入门教程/14-Set 和 Map 数据结构.html" class="active sidebar-link">Set 和 Map 数据结构</a><ul class="sidebar-sub-headers"><li class="sidebar-sub-header"><a href="/langnang/52040/5204060/ECMAScript/ES6/Reference/ECMAScript 6 入门教程/14-Set 和 Map 数据结构.html#set" class="sidebar-link">Set</a></li><li class="sidebar-sub-header"><a href="/langnang/52040/5204060/ECMAScript/ES6/Reference/ECMAScript 6 入门教程/14-Set 和 Map 数据结构.html#weakset" class="sidebar-link">WeakSet</a></li><li class="sidebar-sub-header"><a href="/langnang/52040/5204060/ECMAScript/ES6/Reference/ECMAScript 6 入门教程/14-Set 和 Map 数据结构.html#map" class="sidebar-link">Map</a></li><li class="sidebar-sub-header"><a href="/langnang/52040/5204060/ECMAScript/ES6/Reference/ECMAScript 6 入门教程/14-Set 和 Map 数据结构.html#weakmap" class="sidebar-link">WeakMap</a></li><li class="sidebar-sub-header"><a href="/langnang/52040/5204060/ECMAScript/ES6/Reference/ECMAScript 6 入门教程/14-Set 和 Map 数据结构.html#weakref" class="sidebar-link">WeakRef</a></li><li class="sidebar-sub-header"><a href="/langnang/52040/5204060/ECMAScript/ES6/Reference/ECMAScript 6 入门教程/14-Set 和 Map 数据结构.html#finalizationregistry" class="sidebar-link">FinalizationRegistry</a></li></ul></li><li><a href="/langnang/52040/5204060/ECMAScript/ES6/Reference/ECMAScript 6 入门教程/15-Proxy.html" class="sidebar-link">Set 和 Map 数据结构</a></li><li><a href="/langnang/52040/5204060/ECMAScript/ES6/Reference/ECMAScript 6 入门教程/16-Reflect.html" class="sidebar-link">Reflect</a></li><li><a href="/langnang/52040/5204060/ECMAScript/ES6/Reference/ECMAScript 6 入门教程/17-Promise 对象.html" class="sidebar-link">Promise 对象</a></li><li><a href="/langnang/52040/5204060/ECMAScript/ES6/Reference/ECMAScript 6 入门教程/18-Iterator 和 for...of 循环.html" class="sidebar-link">Iterator 和 for...of 循环</a></li><li><a href="/langnang/52040/5204060/ECMAScript/ES6/Reference/ECMAScript 6 入门教程/19-Generator 函数的语法.html" class="sidebar-link">Generator 函数的语法</a></li><li><a href="/langnang/52040/5204060/ECMAScript/ES6/Reference/ECMAScript 6 入门教程/20-Generator 函数的异步应用.html" class="sidebar-link">Generator 函数的异步应用</a></li><li><a href="/langnang/52040/5204060/ECMAScript/ES6/Reference/ECMAScript 6 入门教程/21-async 函数.html" class="sidebar-link">async 函数</a></li><li><a href="/langnang/52040/5204060/ECMAScript/ES6/Reference/ECMAScript 6 入门教程/22-Class 的基本语法.html" class="sidebar-link">Class 的基本语法</a></li><li><a href="/langnang/52040/5204060/ECMAScript/ES6/Reference/ECMAScript 6 入门教程/23-Class 的继承.html" class="sidebar-link">Class 的继承</a></li><li><a href="/langnang/52040/5204060/ECMAScript/ES6/Reference/ECMAScript 6 入门教程/24-Module 的语法.html" class="sidebar-link">Class 的继承</a></li><li><a href="/langnang/52040/5204060/ECMAScript/ES6/Reference/ECMAScript 6 入门教程/25-Module 的加载实现.html" class="sidebar-link">Module 的加载实现</a></li><li><a href="/langnang/52040/5204060/ECMAScript/ES6/Reference/ECMAScript 6 入门教程/26-编程风格.html" class="sidebar-link">编程风格</a></li><li><a href="/langnang/52040/5204060/ECMAScript/ES6/Reference/ECMAScript 6 入门教程/27-读懂 ECMAScript 规格.html" class="sidebar-link">读懂 ECMAScript 规格</a></li><li><a href="/langnang/52040/5204060/ECMAScript/ES6/Reference/ECMAScript 6 入门教程/28-异步遍历器.html" class="sidebar-link">异步遍历器</a></li><li><a href="/langnang/52040/5204060/ECMAScript/ES6/Reference/ECMAScript 6 入门教程/29-ArrayBuffer.html" class="sidebar-link">ArrayBuffer</a></li><li><a href="/langnang/52040/5204060/ECMAScript/ES6/Reference/ECMAScript 6 入门教程/30-最新提案.html" class="sidebar-link">最新提案</a></li><li><a href="/langnang/52040/5204060/ECMAScript/ES6/Reference/ECMAScript 6 入门教程/31-装饰器.html" class="sidebar-link">装饰器</a></li><li><a href="/langnang/52040/5204060/ECMAScript/ES6/Reference/ECMAScript 6 入门教程/32-参考链接.html" class="sidebar-link">参考链接</a></li></ul></section></li></ul></section></li></ul></section></li><li><section class="sidebar-group collapsable is-sub-group depth-1"><a href="/langnang/52040/5204060/NodeJs/" class="sidebar-heading clickable"><span>NodeJs</span> <span class="arrow right"></span></a> <!----></section></li><li><a href="/langnang/52040/5204060/React/" class="sidebar-link">React</a></li><li><section class="sidebar-group collapsable is-sub-group depth-1"><a href="/langnang/52040/5204060/Vue/" class="sidebar-heading clickable"><span>Vue</span> <span class="arrow right"></span></a> <!----></section></li><li><a href="/langnang/52040/5204060/TypeScript/" class="sidebar-link">TypeScript</a></li><li><a href="/langnang/52040/5204060/WeChat/" class="sidebar-link">小程序</a></li><li><section class="sidebar-group collapsable is-sub-group depth-1"><p class="sidebar-heading"><span>NPM Packages</span> <span class="arrow right"></span></p> <!----></section></li></ul></section></li><li><a href="/langnang/52040/5204070/" class="sidebar-link">软件工程</a></li></ul> </aside> <main class="page"> <div class="theme-default-content content__default"><h1 id="set-和-map-数据结构"><a href="#set-和-map-数据结构" class="header-anchor">#</a> Set 和 Map 数据结构</h1> <ol><li><a href="https://es6.ruanyifeng.com/#docs/set-map#Set" target="_blank" rel="noopener noreferrer">Set<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a></li> <li><a href="https://es6.ruanyifeng.com/#docs/set-map#WeakSet" target="_blank" rel="noopener noreferrer">WeakSet<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a></li> <li><a href="https://es6.ruanyifeng.com/#docs/set-map#Map" target="_blank" rel="noopener noreferrer">Map<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a></li> <li><a href="https://es6.ruanyifeng.com/#docs/set-map#WeakMap" target="_blank" rel="noopener noreferrer">WeakMap<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a></li> <li><a href="https://es6.ruanyifeng.com/#docs/set-map#WeakRef" target="_blank" rel="noopener noreferrer">WeakRef<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a></li> <li><a href="https://es6.ruanyifeng.com/#docs/set-map#FinalizationRegistry" target="_blank" rel="noopener noreferrer">FinalizationRegistry<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a></li></ol> <h2 id="set"><a href="#set" class="header-anchor">#</a> Set</h2> <h3 id="基本用法"><a href="#基本用法" class="header-anchor">#</a> 基本用法</h3> <p>ES6 提供了新的数据结构 Set。它类似于数组，但是成员的值都是唯一的，没有重复的值。</p> <p><code>Set</code>本身是一个构造函数，用来生成 Set 数据结构。</p> <div class="language- line-numbers-mode"><pre class="language-text"><code>const s = new Set();

[2, 3, 5, 4, 5, 2, 2].forEach(x =&gt; s.add(x));

for (let i of s) {
  console.log(i);
}
// 2 3 5 4
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>上面代码通过<code>add()</code>方法向 Set 结构加入成员，结果表明 Set 结构不会添加重复的值。</p> <p><code>Set</code>函数可以接受一个数组（或者具有 iterable 接口的其他数据结构）作为参数，用来初始化。</p> <div class="language- line-numbers-mode"><pre class="language-text"><code>// 例一
const set = new Set([1, 2, 3, 4, 4]);
[...set]
// [1, 2, 3, 4]

// 例二
const items = new Set([1, 2, 3, 4, 5, 5, 5, 5]);
items.size // 5

// 例三
const set = new Set(document.querySelectorAll('div'));
set.size // 56

// 类似于
const set = new Set();
document
 .querySelectorAll('div')
 .forEach(div =&gt; set.add(div));
set.size // 56
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>上面代码中，例一和例二都是<code>Set</code>函数接受数组作为参数，例三是接受类似数组的对象作为参数。</p> <p>上面代码也展示了一种去除数组重复成员的方法。</p> <div class="language- line-numbers-mode"><pre class="language-text"><code>// 去除数组的重复成员
[...new Set(array)]
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>上面的方法也可以用于，去除字符串里面的重复字符。</p> <div class="language- line-numbers-mode"><pre class="language-text"><code>[...new Set('ababbc')].join('')
// &quot;abc&quot;
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>向 Set 加入值的时候，不会发生类型转换，所以<code>5</code>和<code>&quot;5&quot;</code>是两个不同的值。Set 内部判断两个值是否不同，使用的算法叫做“Same-value-zero equality”，它类似于精确相等运算符（<code>===</code>），主要的区别是向 Set 加入值时认为<code>NaN</code>等于自身，而精确相等运算符认为<code>NaN</code>不等于自身。</p> <div class="language- line-numbers-mode"><pre class="language-text"><code>let set = new Set();
let a = NaN;
let b = NaN;
set.add(a);
set.add(b);
set // Set {NaN}
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>上面代码向 Set 实例添加了两次<code>NaN</code>，但是只会加入一个。这表明，在 Set 内部，两个<code>NaN</code>是相等的。</p> <p>另外，两个对象总是不相等的。</p> <div class="language- line-numbers-mode"><pre class="language-text"><code>let set = new Set();

set.add({});
set.size // 1

set.add({});
set.size // 2
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>上面代码表示，由于两个空对象不相等，所以它们被视为两个值。</p> <h3 id="set-实例的属性和方法"><a href="#set-实例的属性和方法" class="header-anchor">#</a> Set 实例的属性和方法</h3> <p>Set 结构的实例有以下属性。</p> <ul><li><code>Set.prototype.constructor</code>：构造函数，默认就是<code>Set</code>函数。</li> <li><code>Set.prototype.size</code>：返回<code>Set</code>实例的成员总数。</li></ul> <p>Set 实例的方法分为两大类：操作方法（用于操作数据）和遍历方法（用于遍历成员）。下面先介绍四个操作方法。</p> <ul><li><code>Set.prototype.add(value)</code>：添加某个值，返回 Set 结构本身。</li> <li><code>Set.prototype.delete(value)</code>：删除某个值，返回一个布尔值，表示删除是否成功。</li> <li><code>Set.prototype.has(value)</code>：返回一个布尔值，表示该值是否为<code>Set</code>的成员。</li> <li><code>Set.prototype.clear()</code>：清除所有成员，没有返回值。</li></ul> <p>上面这些属性和方法的实例如下。</p> <div class="language- line-numbers-mode"><pre class="language-text"><code>s.add(1).add(2).add(2);
// 注意2被加入了两次

s.size // 2

s.has(1) // true
s.has(2) // true
s.has(3) // false

s.delete(2);
s.has(2) // false
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>下面是一个对比，看看在判断是否包括一个键上面，<code>Object</code>结构和<code>Set</code>结构的写法不同。</p> <div class="language- line-numbers-mode"><pre class="language-text"><code>// 对象的写法
const properties = {
  'width': 1,
  'height': 1
};

if (properties[someName]) {
  // do something
}

// Set的写法
const properties = new Set();

properties.add('width');
properties.add('height');

if (properties.has(someName)) {
  // do something
}
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p><code>Array.from</code>方法可以将 Set 结构转为数组。</p> <div class="language- line-numbers-mode"><pre class="language-text"><code>const items = new Set([1, 2, 3, 4, 5]);
const array = Array.from(items);
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>这就提供了去除数组重复成员的另一种方法。</p> <div class="language- line-numbers-mode"><pre class="language-text"><code>function dedupe(array) {
  return Array.from(new Set(array));
}

dedupe([1, 1, 2, 3]) // [1, 2, 3]
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="遍历操作"><a href="#遍历操作" class="header-anchor">#</a> 遍历操作</h3> <p>Set 结构的实例有四个遍历方法，可以用于遍历成员。</p> <ul><li><code>Set.prototype.keys()</code>：返回键名的遍历器</li> <li><code>Set.prototype.values()</code>：返回键值的遍历器</li> <li><code>Set.prototype.entries()</code>：返回键值对的遍历器</li> <li><code>Set.prototype.forEach()</code>：使用回调函数遍历每个成员</li></ul> <p>需要特别指出的是，<code>Set</code>的遍历顺序就是插入顺序。这个特性有时非常有用，比如使用 Set 保存一个回调函数列表，调用时就能保证按照添加顺序调用。</p> <p><strong>（1）<code>keys()</code>，<code>values()</code>，<code>entries()</code></strong></p> <p><code>keys</code>方法、<code>values</code>方法、<code>entries</code>方法返回的都是遍历器对象（详见《Iterator 对象》一章）。由于 Set 结构没有键名，只有键值（或者说键名和键值是同一个值），所以<code>keys</code>方法和<code>values</code>方法的行为完全一致。</p> <div class="language- line-numbers-mode"><pre class="language-text"><code>let set = new Set(['red', 'green', 'blue']);

for (let item of set.keys()) {
  console.log(item);
}
// red
// green
// blue

for (let item of set.values()) {
  console.log(item);
}
// red
// green
// blue

for (let item of set.entries()) {
  console.log(item);
}
// [&quot;red&quot;, &quot;red&quot;]
// [&quot;green&quot;, &quot;green&quot;]
// [&quot;blue&quot;, &quot;blue&quot;]
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><p>上面代码中，<code>entries</code>方法返回的遍历器，同时包括键名和键值，所以每次输出一个数组，它的两个成员完全相等。</p> <p>Set 结构的实例默认可遍历，它的默认遍历器生成函数就是它的<code>values</code>方法。</p> <div class="language- line-numbers-mode"><pre class="language-text"><code>Set.prototype[Symbol.iterator] === Set.prototype.values
// true
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>这意味着，可以省略<code>values</code>方法，直接用<code>for...of</code>循环遍历 Set。</p> <div class="language- line-numbers-mode"><pre class="language-text"><code>let set = new Set(['red', 'green', 'blue']);

for (let x of set) {
  console.log(x);
}
// red
// green
// blue
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p><strong>（2）<code>forEach()</code></strong></p> <p>Set 结构的实例与数组一样，也拥有<code>forEach</code>方法，用于对每个成员执行某种操作，没有返回值。</p> <div class="language- line-numbers-mode"><pre class="language-text"><code>let set = new Set([1, 4, 9]);
set.forEach((value, key) =&gt; console.log(key + ' : ' + value))
// 1 : 1
// 4 : 4
// 9 : 9
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>上面代码说明，<code>forEach</code>方法的参数就是一个处理函数。该函数的参数与数组的<code>forEach</code>一致，依次为键值、键名、集合本身（上例省略了该参数）。这里需要注意，Set 结构的键名就是键值（两者是同一个值），因此第一个参数与第二个参数的值永远都是一样的。</p> <p>另外，<code>forEach</code>方法还可以有第二个参数，表示绑定处理函数内部的<code>this</code>对象。</p> <p><strong>（3）遍历的应用</strong></p> <p>扩展运算符（<code>...</code>）内部使用<code>for...of</code>循环，所以也可以用于 Set 结构。</p> <div class="language- line-numbers-mode"><pre class="language-text"><code>let set = new Set(['red', 'green', 'blue']);
let arr = [...set];
// ['red', 'green', 'blue']
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>扩展运算符和 Set 结构相结合，就可以去除数组的重复成员。</p> <div class="language- line-numbers-mode"><pre class="language-text"><code>let arr = [3, 5, 2, 2, 5, 5];
let unique = [...new Set(arr)];
// [3, 5, 2]
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>而且，数组的<code>map</code>和<code>filter</code>方法也可以间接用于 Set 了。</p> <div class="language- line-numbers-mode"><pre class="language-text"><code>let set = new Set([1, 2, 3]);
set = new Set([...set].map(x =&gt; x * 2));
// 返回Set结构：{2, 4, 6}

let set = new Set([1, 2, 3, 4, 5]);
set = new Set([...set].filter(x =&gt; (x % 2) == 0));
// 返回Set结构：{2, 4}
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>因此使用 Set 可以很容易地实现并集（Union）、交集（Intersect）和差集（Difference）。</p> <div class="language- line-numbers-mode"><pre class="language-text"><code>let a = new Set([1, 2, 3]);
let b = new Set([4, 3, 2]);

// 并集
let union = new Set([...a, ...b]);
// Set {1, 2, 3, 4}

// 交集
let intersect = new Set([...a].filter(x =&gt; b.has(x)));
// set {2, 3}

// （a 相对于 b 的）差集
let difference = new Set([...a].filter(x =&gt; !b.has(x)));
// Set {1}
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>如果想在遍历操作中，同步改变原来的 Set 结构，目前没有直接的方法，但有两种变通方法。一种是利用原 Set 结构映射出一个新的结构，然后赋值给原来的 Set 结构；另一种是利用<code>Array.from</code>方法。</p> <div class="language- line-numbers-mode"><pre class="language-text"><code>// 方法一
let set = new Set([1, 2, 3]);
set = new Set([...set].map(val =&gt; val * 2));
// set的值是2, 4, 6

// 方法二
let set = new Set([1, 2, 3]);
set = new Set(Array.from(set, val =&gt; val * 2));
// set的值是2, 4, 6
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>上面代码提供了两种方法，直接在遍历操作中改变原来的 Set 结构。</p> <h2 id="weakset"><a href="#weakset" class="header-anchor">#</a> WeakSet</h2> <h3 id="含义"><a href="#含义" class="header-anchor">#</a> 含义</h3> <p>WeakSet 结构与 Set 类似，也是不重复的值的集合。但是，它与 Set 有两个区别。</p> <p>首先，WeakSet 的成员只能是对象，而不能是其他类型的值。</p> <div class="language- line-numbers-mode"><pre class="language-text"><code>const ws = new WeakSet();
ws.add(1)
// TypeError: Invalid value used in weak set
ws.add(Symbol())
// TypeError: invalid value used in weak set
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>上面代码试图向 WeakSet 添加一个数值和<code>Symbol</code>值，结果报错，因为 WeakSet 只能放置对象。</p> <p>其次，WeakSet 中的对象都是弱引用，即垃圾回收机制不考虑 WeakSet 对该对象的引用，也就是说，如果其他对象都不再引用该对象，那么垃圾回收机制会自动回收该对象所占用的内存，不考虑该对象还存在于 WeakSet 之中。</p> <p>这是因为垃圾回收机制根据对象的可达性（reachability）来判断回收，如果对象还能被访问到，垃圾回收机制就不会释放这块内存。结束使用该值之后，有时会忘记取消引用，导致内存无法释放，进而可能会引发内存泄漏。WeakSet 里面的引用，都不计入垃圾回收机制，所以就不存在这个问题。因此，WeakSet 适合临时存放一组对象，以及存放跟对象绑定的信息。只要这些对象在外部消失，它在 WeakSet 里面的引用就会自动消失。</p> <p>由于上面这个特点，WeakSet 的成员是不适合引用的，因为它会随时消失。另外，由于 WeakSet 内部有多少个成员，取决于垃圾回收机制有没有运行，运行前后很可能成员个数是不一样的，而垃圾回收机制何时运行是不可预测的，因此 ES6 规定 WeakSet 不可遍历。</p> <p>这些特点同样适用于本章后面要介绍的 WeakMap 结构。</p> <h3 id="语法"><a href="#语法" class="header-anchor">#</a> 语法</h3> <p>WeakSet 是一个构造函数，可以使用<code>new</code>命令，创建 WeakSet 数据结构。</p> <div class="language- line-numbers-mode"><pre class="language-text"><code>const ws = new WeakSet();
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br></div></div><p>作为构造函数，WeakSet 可以接受一个数组或类似数组的对象作为参数。（实际上，任何具有 Iterable 接口的对象，都可以作为 WeakSet 的参数。）该数组的所有成员，都会自动成为 WeakSet 实例对象的成员。</p> <div class="language- line-numbers-mode"><pre class="language-text"><code>const a = [[1, 2], [3, 4]];
const ws = new WeakSet(a);
// WeakSet {[1, 2], [3, 4]}
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>上面代码中，<code>a</code>是一个数组，它有两个成员，也都是数组。将<code>a</code>作为 WeakSet 构造函数的参数，<code>a</code>的成员会自动成为 WeakSet 的成员。</p> <p>注意，是<code>a</code>数组的成员成为 WeakSet 的成员，而不是<code>a</code>数组本身。这意味着，数组的成员只能是对象。</p> <div class="language- line-numbers-mode"><pre class="language-text"><code>const b = [3, 4];
const ws = new WeakSet(b);
// Uncaught TypeError: Invalid value used in weak set(…)
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>上面代码中，数组<code>b</code>的成员不是对象，加入 WeakSet 就会报错。</p> <p>WeakSet 结构有以下三个方法。</p> <ul><li><strong>WeakSet.prototype.add(value)</strong>：向 WeakSet 实例添加一个新成员。</li> <li><strong>WeakSet.prototype.delete(value)</strong>：清除 WeakSet 实例的指定成员。</li> <li><strong>WeakSet.prototype.has(value)</strong>：返回一个布尔值，表示某个值是否在 WeakSet 实例之中。</li></ul> <p>下面是一个例子。</p> <div class="language- line-numbers-mode"><pre class="language-text"><code>const ws = new WeakSet();
const obj = {};
const foo = {};

ws.add(window);
ws.add(obj);

ws.has(window); // true
ws.has(foo);    // false

ws.delete(window);
ws.has(window);    // false
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>WeakSet 没有<code>size</code>属性，没有办法遍历它的成员。</p> <div class="language- line-numbers-mode"><pre class="language-text"><code>ws.size // undefined
ws.forEach // undefined

ws.forEach(function(item){ console.log('WeakSet has ' + item)})
// TypeError: undefined is not a function
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>上面代码试图获取<code>size</code>和<code>forEach</code>属性，结果都不能成功。</p> <p>WeakSet 不能遍历，是因为成员都是弱引用，随时可能消失，遍历机制无法保证成员的存在，很可能刚刚遍历结束，成员就取不到了。WeakSet 的一个用处，是储存 DOM 节点，而不用担心这些节点从文档移除时，会引发内存泄漏。</p> <p>下面是 WeakSet 的另一个例子。</p> <div class="language- line-numbers-mode"><pre class="language-text"><code>const foos = new WeakSet()
class Foo {
  constructor() {
    foos.add(this)
  }
  method () {
    if (!foos.has(this)) {
      throw new TypeError('Foo.prototype.method 只能在Foo的实例上调用！');
    }
  }
}
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>上面代码保证了<code>Foo</code>的实例方法，只能在<code>Foo</code>的实例上调用。这里使用 WeakSet 的好处是，<code>foos</code>对实例的引用，不会被计入内存回收机制，所以删除实例的时候，不用考虑<code>foos</code>，也不会出现内存泄漏。</p> <h2 id="map"><a href="#map" class="header-anchor">#</a> Map</h2> <h3 id="含义和基本用法"><a href="#含义和基本用法" class="header-anchor">#</a> 含义和基本用法</h3> <p>JavaScript 的对象（Object），本质上是键值对的集合（Hash 结构），但是传统上只能用字符串当作键。这给它的使用带来了很大的限制。</p> <div class="language- line-numbers-mode"><pre class="language-text"><code>const data = {};
const element = document.getElementById('myDiv');

data[element] = 'metadata';
data['[object HTMLDivElement]'] // &quot;metadata&quot;
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>上面代码原意是将一个 DOM 节点作为对象<code>data</code>的键，但是由于对象只接受字符串作为键名，所以<code>element</code>被自动转为字符串<code>[object HTMLDivElement]</code>。</p> <p>为了解决这个问题，ES6 提供了 Map 数据结构。它类似于对象，也是键值对的集合，但是“键”的范围不限于字符串，各种类型的值（包括对象）都可以当作键。也就是说，Object 结构提供了“字符串—值”的对应，Map 结构提供了“值—值”的对应，是一种更完善的 Hash 结构实现。如果你需要“键值对”的数据结构，Map 比 Object 更合适。</p> <div class="language- line-numbers-mode"><pre class="language-text"><code>const m = new Map();
const o = {p: 'Hello World'};

m.set(o, 'content')
m.get(o) // &quot;content&quot;

m.has(o) // true
m.delete(o) // true
m.has(o) // false
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>上面代码使用 Map 结构的<code>set</code>方法，将对象<code>o</code>当作<code>m</code>的一个键，然后又使用<code>get</code>方法读取这个键，接着使用<code>delete</code>方法删除了这个键。</p> <p>上面的例子展示了如何向 Map 添加成员。作为构造函数，Map 也可以接受一个数组作为参数。该数组的成员是一个个表示键值对的数组。</p> <div class="language- line-numbers-mode"><pre class="language-text"><code>const map = new Map([
  ['name', '张三'],
  ['title', 'Author']
]);

map.size // 2
map.has('name') // true
map.get('name') // &quot;张三&quot;
map.has('title') // true
map.get('title') // &quot;Author&quot;
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>上面代码在新建 Map 实例时，就指定了两个键<code>name</code>和<code>title</code>。</p> <p><code>Map</code>构造函数接受数组作为参数，实际上执行的是下面的算法。</p> <div class="language- line-numbers-mode"><pre class="language-text"><code>const items = [
  ['name', '张三'],
  ['title', 'Author']
];

const map = new Map();

items.forEach(
  ([key, value]) =&gt; map.set(key, value)
);
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>事实上，不仅仅是数组，任何具有 Iterator 接口、且每个成员都是一个双元素的数组的数据结构（详见《Iterator》一章）都可以当作<code>Map</code>构造函数的参数。这就是说，<code>Set</code>和<code>Map</code>都可以用来生成新的 Map。</p> <div class="language- line-numbers-mode"><pre class="language-text"><code>const set = new Set([
  ['foo', 1],
  ['bar', 2]
]);
const m1 = new Map(set);
m1.get('foo') // 1

const m2 = new Map([['baz', 3]]);
const m3 = new Map(m2);
m3.get('baz') // 3
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>上面代码中，我们分别使用 Set 对象和 Map 对象，当作<code>Map</code>构造函数的参数，结果都生成了新的 Map 对象。</p> <p>如果对同一个键多次赋值，后面的值将覆盖前面的值。</p> <div class="language- line-numbers-mode"><pre class="language-text"><code>const map = new Map();

map
.set(1, 'aaa')
.set(1, 'bbb');

map.get(1) // &quot;bbb&quot;
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>上面代码对键<code>1</code>连续赋值两次，后一次的值覆盖前一次的值。</p> <p>如果读取一个未知的键，则返回<code>undefined</code>。</p> <div class="language- line-numbers-mode"><pre class="language-text"><code>new Map().get('asfddfsasadf')
// undefined
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>注意，只有对同一个对象的引用，Map 结构才将其视为同一个键。这一点要非常小心。</p> <div class="language- line-numbers-mode"><pre class="language-text"><code>const map = new Map();

map.set(['a'], 555);
map.get(['a']) // undefined
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>上面代码的<code>set</code>和<code>get</code>方法，表面是针对同一个键，但实际上这是两个不同的数组实例，内存地址是不一样的，因此<code>get</code>方法无法读取该键，返回<code>undefined</code>。</p> <p>同理，同样的值的两个实例，在 Map 结构中被视为两个键。</p> <div class="language- line-numbers-mode"><pre class="language-text"><code>const map = new Map();

const k1 = ['a'];
const k2 = ['a'];

map
.set(k1, 111)
.set(k2, 222);

map.get(k1) // 111
map.get(k2) // 222
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>上面代码中，变量<code>k1</code>和<code>k2</code>的值是一样的，但是它们在 Map 结构中被视为两个键。</p> <p>由上可知，Map 的键实际上是跟内存地址绑定的，只要内存地址不一样，就视为两个键。这就解决了同名属性碰撞（clash）的问题，我们扩展别人的库的时候，如果使用对象作为键名，就不用担心自己的属性与原作者的属性同名。</p> <p>如果 Map 的键是一个简单类型的值（数字、字符串、布尔值），则只要两个值严格相等，Map 将其视为一个键，比如<code>0</code>和<code>-0</code>就是一个键，布尔值<code>true</code>和字符串<code>true</code>则是两个不同的键。另外，<code>undefined</code>和<code>null</code>也是两个不同的键。虽然<code>NaN</code>不严格相等于自身，但 Map 将其视为同一个键。</p> <div class="language- line-numbers-mode"><pre class="language-text"><code>let map = new Map();

map.set(-0, 123);
map.get(+0) // 123

map.set(true, 1);
map.set('true', 2);
map.get(true) // 1

map.set(undefined, 3);
map.set(null, 4);
map.get(undefined) // 3

map.set(NaN, 123);
map.get(NaN) // 123
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h3 id="实例的属性和操作方法"><a href="#实例的属性和操作方法" class="header-anchor">#</a> 实例的属性和操作方法</h3> <p>Map 结构的实例有以下属性和操作方法。</p> <p><strong>（1）size 属性</strong></p> <p><code>size</code>属性返回 Map 结构的成员总数。</p> <div class="language- line-numbers-mode"><pre class="language-text"><code>const map = new Map();
map.set('foo', true);
map.set('bar', false);

map.size // 2
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p><strong>（2）Map.prototype.set(key, value)</strong></p> <p><code>set</code>方法设置键名<code>key</code>对应的键值为<code>value</code>，然后返回整个 Map 结构。如果<code>key</code>已经有值，则键值会被更新，否则就新生成该键。</p> <div class="language- line-numbers-mode"><pre class="language-text"><code>const m = new Map();

m.set('edition', 6)        // 键是字符串
m.set(262, 'standard')     // 键是数值
m.set(undefined, 'nah')    // 键是 undefined
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p><code>set</code>方法返回的是当前的<code>Map</code>对象，因此可以采用链式写法。</p> <div class="language- line-numbers-mode"><pre class="language-text"><code>let map = new Map()
  .set(1, 'a')
  .set(2, 'b')
  .set(3, 'c');
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><strong>（3）Map.prototype.get(key)</strong></p> <p><code>get</code>方法读取<code>key</code>对应的键值，如果找不到<code>key</code>，返回<code>undefined</code>。</p> <div class="language- line-numbers-mode"><pre class="language-text"><code>const m = new Map();

const hello = function() {console.log('hello');};
m.set(hello, 'Hello ES6!') // 键是函数

m.get(hello)  // Hello ES6!
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p><strong>（4）Map.prototype.has(key)</strong></p> <p><code>has</code>方法返回一个布尔值，表示某个键是否在当前 Map 对象之中。</p> <div class="language- line-numbers-mode"><pre class="language-text"><code>const m = new Map();

m.set('edition', 6);
m.set(262, 'standard');
m.set(undefined, 'nah');

m.has('edition')     // true
m.has('years')       // false
m.has(262)           // true
m.has(undefined)     // true
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p><strong>（5）Map.prototype.delete(key)</strong></p> <p><code>delete</code>方法删除某个键，返回<code>true</code>。如果删除失败，返回<code>false</code>。</p> <div class="language- line-numbers-mode"><pre class="language-text"><code>const m = new Map();
m.set(undefined, 'nah');
m.has(undefined)     // true

m.delete(undefined)
m.has(undefined)       // false
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p><strong>（6）Map.prototype.clear()</strong></p> <p><code>clear</code>方法清除所有成员，没有返回值。</p> <div class="language- line-numbers-mode"><pre class="language-text"><code>let map = new Map();
map.set('foo', true);
map.set('bar', false);

map.size // 2
map.clear()
map.size // 0
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="遍历方法"><a href="#遍历方法" class="header-anchor">#</a> 遍历方法</h3> <p>Map 结构原生提供三个遍历器生成函数和一个遍历方法。</p> <ul><li><code>Map.prototype.keys()</code>：返回键名的遍历器。</li> <li><code>Map.prototype.values()</code>：返回键值的遍历器。</li> <li><code>Map.prototype.entries()</code>：返回所有成员的遍历器。</li> <li><code>Map.prototype.forEach()</code>：遍历 Map 的所有成员。</li></ul> <p>需要特别注意的是，Map 的遍历顺序就是插入顺序。</p> <div class="language- line-numbers-mode"><pre class="language-text"><code>const map = new Map([
  ['F', 'no'],
  ['T',  'yes'],
]);

for (let key of map.keys()) {
  console.log(key);
}
// &quot;F&quot;
// &quot;T&quot;

for (let value of map.values()) {
  console.log(value);
}
// &quot;no&quot;
// &quot;yes&quot;

for (let item of map.entries()) {
  console.log(item[0], item[1]);
}
// &quot;F&quot; &quot;no&quot;
// &quot;T&quot; &quot;yes&quot;

// 或者
for (let [key, value] of map.entries()) {
  console.log(key, value);
}
// &quot;F&quot; &quot;no&quot;
// &quot;T&quot; &quot;yes&quot;

// 等同于使用map.entries()
for (let [key, value] of map) {
  console.log(key, value);
}
// &quot;F&quot; &quot;no&quot;
// &quot;T&quot; &quot;yes&quot;
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br></div></div><p>上面代码最后的那个例子，表示 Map 结构的默认遍历器接口（<code>Symbol.iterator</code>属性），就是<code>entries</code>方法。</p> <div class="language- line-numbers-mode"><pre class="language-text"><code>map[Symbol.iterator] === map.entries
// true
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Map 结构转为数组结构，比较快速的方法是使用扩展运算符（<code>...</code>）。</p> <div class="language- line-numbers-mode"><pre class="language-text"><code>const map = new Map([
  [1, 'one'],
  [2, 'two'],
  [3, 'three'],
]);

[...map.keys()]
// [1, 2, 3]

[...map.values()]
// ['one', 'two', 'three']

[...map.entries()]
// [[1,'one'], [2, 'two'], [3, 'three']]

[...map]
// [[1,'one'], [2, 'two'], [3, 'three']]
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>结合数组的<code>map</code>方法、<code>filter</code>方法，可以实现 Map 的遍历和过滤（Map 本身没有<code>map</code>和<code>filter</code>方法）。</p> <div class="language- line-numbers-mode"><pre class="language-text"><code>const map0 = new Map()
  .set(1, 'a')
  .set(2, 'b')
  .set(3, 'c');

const map1 = new Map(
  [...map0].filter(([k, v]) =&gt; k &lt; 3)
);
// 产生 Map 结构 {1 =&gt; 'a', 2 =&gt; 'b'}

const map2 = new Map(
  [...map0].map(([k, v]) =&gt; [k * 2, '_' + v])
    );
// 产生 Map 结构 {2 =&gt; '_a', 4 =&gt; '_b', 6 =&gt; '_c'}
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>此外，Map 还有一个<code>forEach</code>方法，与数组的<code>forEach</code>方法类似，也可以实现遍历。</p> <div class="language- line-numbers-mode"><pre class="language-text"><code>map.forEach(function(value, key, map) {
  console.log(&quot;Key: %s, Value: %s&quot;, key, value);
});
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><code>forEach</code>方法还可以接受第二个参数，用来绑定<code>this</code>。</p> <div class="language- line-numbers-mode"><pre class="language-text"><code>const reporter = {
  report: function(key, value) {
    console.log(&quot;Key: %s, Value: %s&quot;, key, value);
  }
};

map.forEach(function(value, key, map) {
  this.report(key, value);
}, reporter);
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>上面代码中，<code>forEach</code>方法的回调函数的<code>this</code>，就指向<code>reporter</code>。</p> <h3 id="与其他数据结构的互相转换"><a href="#与其他数据结构的互相转换" class="header-anchor">#</a> 与其他数据结构的互相转换</h3> <p><strong>（1）Map 转为数组</strong></p> <p>前面已经提过，Map 转为数组最方便的方法，就是使用扩展运算符（<code>...</code>）。</p> <div class="language- line-numbers-mode"><pre class="language-text"><code>const myMap = new Map()
  .set(true, 7)
  .set({foo: 3}, ['abc']);
[...myMap]
// [ [ true, 7 ], [ { foo: 3 }, [ 'abc' ] ] ]
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p><strong>（2）数组 转为 Map</strong></p> <p>将数组传入 Map 构造函数，就可以转为 Map。</p> <div class="language- line-numbers-mode"><pre class="language-text"><code>new Map([
  [true, 7],
  [{foo: 3}, ['abc']]
])
// Map {
//   true =&gt; 7,
//   Object {foo: 3} =&gt; ['abc']
// }
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p><strong>（3）Map 转为对象</strong></p> <p>如果所有 Map 的键都是字符串，它可以无损地转为对象。</p> <div class="language- line-numbers-mode"><pre class="language-text"><code>function strMapToObj(strMap) {
  let obj = Object.create(null);
  for (let [k,v] of strMap) {
    obj[k] = v;
  }
  return obj;
}

const myMap = new Map()
  .set('yes', true)
  .set('no', false);
strMapToObj(myMap)
// { yes: true, no: false }
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>如果有非字符串的键名，那么这个键名会被转成字符串，再作为对象的键名。</p> <p><strong>（4）对象转为 Map</strong></p> <p>对象转为 Map 可以通过<code>Object.entries()</code>。</p> <div class="language- line-numbers-mode"><pre class="language-text"><code>let obj = {&quot;a&quot;:1, &quot;b&quot;:2};
let map = new Map(Object.entries(obj));
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>此外，也可以自己实现一个转换函数。</p> <div class="language- line-numbers-mode"><pre class="language-text"><code>function objToStrMap(obj) {
  let strMap = new Map();
  for (let k of Object.keys(obj)) {
    strMap.set(k, obj[k]);
  }
  return strMap;
}

objToStrMap({yes: true, no: false})
// Map {&quot;yes&quot; =&gt; true, &quot;no&quot; =&gt; false}
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p><strong>（5）Map 转为 JSON</strong></p> <p>Map 转为 JSON 要区分两种情况。一种情况是，Map 的键名都是字符串，这时可以选择转为对象 JSON。</p> <div class="language- line-numbers-mode"><pre class="language-text"><code>function strMapToJson(strMap) {
  return JSON.stringify(strMapToObj(strMap));
}

let myMap = new Map().set('yes', true).set('no', false);
strMapToJson(myMap)
// '{&quot;yes&quot;:true,&quot;no&quot;:false}'
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>另一种情况是，Map 的键名有非字符串，这时可以选择转为数组 JSON。</p> <div class="language- line-numbers-mode"><pre class="language-text"><code>function mapToArrayJson(map) {
  return JSON.stringify([...map]);
}

let myMap = new Map().set(true, 7).set({foo: 3}, ['abc']);
mapToArrayJson(myMap)
// '[[true,7],[{&quot;foo&quot;:3},[&quot;abc&quot;]]]'
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p><strong>（6）JSON 转为 Map</strong></p> <p>JSON 转为 Map，正常情况下，所有键名都是字符串。</p> <div class="language- line-numbers-mode"><pre class="language-text"><code>function jsonToStrMap(jsonStr) {
  return objToStrMap(JSON.parse(jsonStr));
}

jsonToStrMap('{&quot;yes&quot;: true, &quot;no&quot;: false}')
// Map {'yes' =&gt; true, 'no' =&gt; false}
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>但是，有一种特殊情况，整个 JSON 就是一个数组，且每个数组成员本身，又是一个有两个成员的数组。这时，它可以一一对应地转为 Map。这往往是 Map 转为数组 JSON 的逆操作。</p> <div class="language- line-numbers-mode"><pre class="language-text"><code>function jsonToMap(jsonStr) {
  return new Map(JSON.parse(jsonStr));
}

jsonToMap('[[true,7],[{&quot;foo&quot;:3},[&quot;abc&quot;]]]')
// Map {true =&gt; 7, Object {foo: 3} =&gt; ['abc']}
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="weakmap"><a href="#weakmap" class="header-anchor">#</a> WeakMap</h2> <h3 id="含义-2"><a href="#含义-2" class="header-anchor">#</a> 含义</h3> <p><code>WeakMap</code>结构与<code>Map</code>结构类似，也是用于生成键值对的集合。</p> <div class="language- line-numbers-mode"><pre class="language-text"><code>// WeakMap 可以使用 set 方法添加成员
const wm1 = new WeakMap();
const key = {foo: 1};
wm1.set(key, 2);
wm1.get(key) // 2

// WeakMap 也可以接受一个数组，
// 作为构造函数的参数
const k1 = [1, 2, 3];
const k2 = [4, 5, 6];
const wm2 = new WeakMap([[k1, 'foo'], [k2, 'bar']]);
wm2.get(k2) // &quot;bar&quot;
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p><code>WeakMap</code>与<code>Map</code>的区别有两点。</p> <p>首先，<code>WeakMap</code>只接受对象作为键名（<code>null</code>除外），不接受其他类型的值作为键名。</p> <div class="language- line-numbers-mode"><pre class="language-text"><code>const map = new WeakMap();
map.set(1, 2)
// TypeError: 1 is not an object!
map.set(Symbol(), 2)
// TypeError: Invalid value used as weak map key
map.set(null, 2)
// TypeError: Invalid value used as weak map key
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>上面代码中，如果将数值<code>1</code>和<code>Symbol</code>值作为 WeakMap 的键名，都会报错。</p> <p>不过，现在有一个<a href="https://github.com/tc39/proposal-symbols-as-weakmap-keys" target="_blank" rel="noopener noreferrer">提案<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a>，允许 Symbol 值也可以作为 WeakMap 的键名。一旦纳入标准，就意味着键名存在两种可能：对象和 Symbole 值。</p> <p>其次，<code>WeakMap</code>的键名所指向的对象，不计入垃圾回收机制。</p> <p><code>WeakMap</code>的设计目的在于，有时我们想在某个对象上面存放一些数据，但是这会形成对于这个对象的引用。请看下面的例子。</p> <div class="language- line-numbers-mode"><pre class="language-text"><code>const e1 = document.getElementById('foo');
const e2 = document.getElementById('bar');
const arr = [
  [e1, 'foo 元素'],
  [e2, 'bar 元素'],
];
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>上面代码中，<code>e1</code>和<code>e2</code>是两个对象，我们通过<code>arr</code>数组对这两个对象添加一些文字说明。这就形成了<code>arr</code>对<code>e1</code>和<code>e2</code>的引用。</p> <p>一旦不再需要这两个对象，我们就必须手动删除这个引用，否则垃圾回收机制就不会释放<code>e1</code>和<code>e2</code>占用的内存。</p> <div class="language- line-numbers-mode"><pre class="language-text"><code>// 不需要 e1 和 e2 的时候
// 必须手动删除引用
arr [0] = null;
arr [1] = null;
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>上面这样的写法显然很不方便。一旦忘了写，就会造成内存泄露。</p> <p>WeakMap 就是为了解决这个问题而诞生的，它的键名所引用的对象都是弱引用，即垃圾回收机制不将该引用考虑在内。因此，只要所引用的对象的其他引用都被清除，垃圾回收机制就会释放该对象所占用的内存。也就是说，一旦不再需要，WeakMap 里面的键名对象和所对应的键值对会自动消失，不用手动删除引用。</p> <p>基本上，如果你要往对象上添加数据，又不想干扰垃圾回收机制，就可以使用 WeakMap。一个典型应用场景是，在网页的 DOM 元素上添加数据，就可以使用<code>WeakMap</code>结构。当该 DOM 元素被清除，其所对应的<code>WeakMap</code>记录就会自动被移除。</p> <div class="language- line-numbers-mode"><pre class="language-text"><code>const wm = new WeakMap();

const element = document.getElementById('example');

wm.set(element, 'some information');
wm.get(element) // &quot;some information&quot;
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>上面代码中，先新建一个 WeakMap 实例。然后，将一个 DOM 节点作为键名存入该实例，并将一些附加信息作为键值，一起存放在 WeakMap 里面。这时，WeakMap 里面对<code>element</code>的引用就是弱引用，不会被计入垃圾回收机制。</p> <p>也就是说，上面的 DOM 节点对象除了 WeakMap 的弱引用外，其他位置对该对象的引用一旦消除，该对象占用的内存就会被垃圾回收机制释放。WeakMap 保存的这个键值对，也会自动消失。</p> <p>总之，<code>WeakMap</code>的专用场合就是，它的键所对应的对象，可能会在将来消失。<code>WeakMap</code>结构有助于防止内存泄漏。</p> <p>注意，WeakMap 弱引用的只是键名，而不是键值。键值依然是正常引用。</p> <div class="language- line-numbers-mode"><pre class="language-text"><code>const wm = new WeakMap();
let key = {};
let obj = {foo: 1};

wm.set(key, obj);
obj = null;
wm.get(key)
// Object {foo: 1}
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>上面代码中，键值<code>obj</code>是正常引用。所以，即使在 WeakMap 外部消除了<code>obj</code>的引用，WeakMap 内部的引用依然存在。</p> <h3 id="weakmap-的语法"><a href="#weakmap-的语法" class="header-anchor">#</a> WeakMap 的语法</h3> <p>WeakMap 与 Map 在 API 上的区别主要是两个，一是没有遍历操作（即没有<code>keys()</code>、<code>values()</code>和<code>entries()</code>方法），也没有<code>size</code>属性。因为没有办法列出所有键名，某个键名是否存在完全不可预测，跟垃圾回收机制是否运行相关。这一刻可以取到键名，下一刻垃圾回收机制突然运行了，这个键名就没了，为了防止出现不确定性，就统一规定不能取到键名。二是无法清空，即不支持<code>clear</code>方法。因此，<code>WeakMap</code>只有四个方法可用：<code>get()</code>、<code>set()</code>、<code>has()</code>、<code>delete()</code>。</p> <div class="language- line-numbers-mode"><pre class="language-text"><code>const wm = new WeakMap();

// size、forEach、clear 方法都不存在
wm.size // undefined
wm.forEach // undefined
wm.clear // undefined
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="weakmap-的示例"><a href="#weakmap-的示例" class="header-anchor">#</a> WeakMap 的示例</h3> <p>WeakMap 的例子很难演示，因为无法观察它里面的引用会自动消失。此时，其他引用都解除了，已经没有引用指向 WeakMap 的键名了，导致无法证实那个键名是不是存在。</p> <p>贺师俊老师<a href="https://github.com/ruanyf/es6tutorial/issues/362#issuecomment-292109104" target="_blank" rel="noopener noreferrer">提示<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a>，如果引用所指向的值占用特别多的内存，就可以通过 Node 的<code>process.memoryUsage</code>方法看出来。根据这个思路，网友<a href="https://github.com/ruanyf/es6tutorial/issues/362#issuecomment-292451925" target="_blank" rel="noopener noreferrer">vtxf<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a>补充了下面的例子。</p> <p>首先，打开 Node 命令行。</p> <div class="language- line-numbers-mode"><pre class="language-text"><code>$ node --expose-gc
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br></div></div><p>上面代码中，<code>--expose-gc</code>参数表示允许手动执行垃圾回收机制。</p> <p>然后，执行下面的代码。</p> <div class="language- line-numbers-mode"><pre class="language-text"><code>// 手动执行一次垃圾回收，保证获取的内存使用状态准确
&gt; global.gc();
undefined

// 查看内存占用的初始状态，heapUsed 为 4M 左右
&gt; process.memoryUsage();
{ rss: 21106688,
  heapTotal: 7376896,
  heapUsed: 4153936,
  external: 9059 }

&gt; let wm = new WeakMap();
undefined

// 新建一个变量 key，指向一个 5*1024*1024 的数组
&gt; let key = new Array(5 * 1024 * 1024);
undefined

// 设置 WeakMap 实例的键名，也指向 key 数组
// 这时，key 数组实际被引用了两次，
// 变量 key 引用一次，WeakMap 的键名引用了第二次
// 但是，WeakMap 是弱引用，对于引擎来说，引用计数还是1
&gt; wm.set(key, 1);
WeakMap {}

&gt; global.gc();
undefined

// 这时内存占用 heapUsed 增加到 45M 了
&gt; process.memoryUsage();
{ rss: 67538944,
  heapTotal: 7376896,
  heapUsed: 45782816,
  external: 8945 }

// 清除变量 key 对数组的引用，
// 但没有手动清除 WeakMap 实例的键名对数组的引用
&gt; key = null;
null

// 再次执行垃圾回收
&gt; global.gc();
undefined

// 内存占用 heapUsed 变回 4M 左右，
// 可以看到 WeakMap 的键名引用没有阻止 gc 对内存的回收
&gt; process.memoryUsage();
{ rss: 20639744,
  heapTotal: 8425472,
  heapUsed: 3979792,
  external: 8956 }
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br></div></div><p>上面代码中，只要外部的引用消失，WeakMap 内部的引用，就会自动被垃圾回收清除。由此可见，有了 WeakMap 的帮助，解决内存泄漏就会简单很多。</p> <p>Chrome 浏览器的 Dev Tools 的 Memory 面板，有一个垃圾桶的按钮，可以强制垃圾回收（garbage collect）。这个按钮也能用来观察 WeakMap 里面的引用是否消失。</p> <h3 id="weakmap-的用途"><a href="#weakmap-的用途" class="header-anchor">#</a> WeakMap 的用途</h3> <p>前文说过，WeakMap 应用的典型场合就是 DOM 节点作为键名。下面是一个例子。</p> <div class="language- line-numbers-mode"><pre class="language-text"><code>let myWeakmap = new WeakMap();

myWeakmap.set(
  document.getElementById('logo'),
  {timesClicked: 0})
;

document.getElementById('logo').addEventListener('click', function() {
  let logoData = myWeakmap.get(document.getElementById('logo'));
  logoData.timesClicked++;
}, false);
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>上面代码中，<code>document.getElementById('logo')</code>是一个 DOM 节点，每当发生<code>click</code>事件，就更新一下状态。我们将这个状态作为键值放在 WeakMap 里，对应的键名就是这个节点对象。一旦这个 DOM 节点删除，该状态就会自动消失，不存在内存泄漏风险。</p> <p>WeakMap 的另一个用处是部署私有属性。</p> <div class="language- line-numbers-mode"><pre class="language-text"><code>const _counter = new WeakMap();
const _action = new WeakMap();

class Countdown {
  constructor(counter, action) {
    _counter.set(this, counter);
    _action.set(this, action);
  }
  dec() {
    let counter = _counter.get(this);
    if (counter &lt; 1) return;
    counter--;
    _counter.set(this, counter);
    if (counter === 0) {
      _action.get(this)();
    }
  }
}

const c = new Countdown(2, () =&gt; console.log('DONE'));

c.dec()
c.dec()
// DONE
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><p>上面代码中，<code>Countdown</code>类的两个内部属性<code>_counter</code>和<code>_action</code>，是实例的弱引用，所以如果删除实例，它们也就随之消失，不会造成内存泄漏。</p> <h2 id="weakref"><a href="#weakref" class="header-anchor">#</a> WeakRef</h2> <p>WeakSet 和 WeakMap 是基于弱引用的数据结构，<a href="https://github.com/tc39/proposal-weakrefs" target="_blank" rel="noopener noreferrer">ES2021<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a> 更进一步，提供了 WeakRef 对象，用于直接创建对象的弱引用。</p> <div class="language- line-numbers-mode"><pre class="language-text"><code>let target = {};
let wr = new WeakRef(target);
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>上面示例中，<code>target</code>是原始对象，构造函数<code>WeakRef()</code>创建了一个基于<code>target</code>的新对象<code>wr</code>。这里，<code>wr</code>就是一个 WeakRef 的实例，属于对<code>target</code>的弱引用，垃圾回收机制不会计入这个引用，也就是说，<code>wr</code>的引用不会妨碍原始对象<code>target</code>被垃圾回收机制清除。</p> <p>WeakRef 实例对象有一个<code>deref()</code>方法，如果原始对象存在，该方法返回原始对象；如果原始对象已经被垃圾回收机制清除，该方法返回<code>undefined</code>。</p> <div class="language- line-numbers-mode"><pre class="language-text"><code>let target = {};
let wr = new WeakRef(target);

let obj = wr.deref();
if (obj) { // target 未被垃圾回收机制清除
  // ...
}
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>上面示例中，<code>deref()</code>方法可以判断原始对象是否已被清除。</p> <p>弱引用对象的一大用处，就是作为缓存，未被清除时可以从缓存取值，一旦清除缓存就自动失效。</p> <div class="language- line-numbers-mode"><pre class="language-text"><code>function makeWeakCached(f) {
  const cache = new Map();
  return key =&gt; {
    const ref = cache.get(key);
    if (ref) {
      const cached = ref.deref();
      if (cached !== undefined) return cached;
    }

    const fresh = f(key);
    cache.set(key, new WeakRef(fresh));
    return fresh;
  };
}

const getImageCached = makeWeakCached(getImage);
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>上面示例中，<code>makeWeakCached()</code>用于建立一个缓存，缓存里面保存对原始文件的弱引用。</p> <p>注意，标准规定，一旦使用<code>WeakRef()</code>创建了原始对象的弱引用，那么在本轮事件循环（event loop），原始对象肯定不会被清除，只会在后面的事件循环才会被清除。</p> <h2 id="finalizationregistry"><a href="#finalizationregistry" class="header-anchor">#</a> FinalizationRegistry</h2> <p><a href="https://github.com/tc39/proposal-weakrefs#finalizers" target="_blank" rel="noopener noreferrer">ES2021<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a> 引入了清理器注册表功能 FinalizationRegistry，用来指定目标对象被垃圾回收机制清除以后，所要执行的回调函数。</p> <p>首先，新建一个注册表实例。</p> <div class="language- line-numbers-mode"><pre class="language-text"><code>const registry = new FinalizationRegistry(heldValue =&gt; {
  // ....
});
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>上面代码中，<code>FinalizationRegistry()</code>是系统提供的构造函数，返回一个清理器注册表实例，里面登记了所要执行的回调函数。回调函数作为<code>FinalizationRegistry()</code>的参数传入，它本身有一个参数<code>heldValue</code>。</p> <p>然后，注册表实例的<code>register()</code>方法，用来注册所要观察的目标对象。</p> <div class="language- line-numbers-mode"><pre class="language-text"><code>registry.register(theObject, &quot;some value&quot;);
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br></div></div><p>上面示例中，<code>theObject</code>就是所要观察的目标对象，一旦该对象被垃圾回收机制清除，注册表就会在清除完成后，调用早前注册的回调函数，并将<code>some value</code>作为参数（前面的<code>heldValue</code>）传入回调函数。</p> <p>注意，注册表不对目标对象<code>theObject</code>构成强引用，属于弱引用。因为强引用的话，原始对象就不会被垃圾回收机制清除，这就失去使用注册表的意义了。</p> <p>回调函数的参数<code>heldValue</code>可以是任意类型的值，字符串、数值、布尔值、对象，甚至可以是<code>undefined</code>。</p> <p>最后，如果以后还想取消已经注册的回调函数，则要向<code>register()</code>传入第三个参数，作为标记值。这个标记值必须是对象，一般都用原始对象。接着，再使用注册表实例对象的<code>unregister()</code>方法取消注册。</p> <div class="language- line-numbers-mode"><pre class="language-text"><code>registry.register(theObject, &quot;some value&quot;, theObject);
// ...其他操作...
registry.unregister(theObject);
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>上面代码中，<code>register()</code>方法的第三个参数就是标记值<code>theObject</code>。取消回调函数时，要使用<code>unregister()</code>方法，并将标记值作为该方法的参数。这里<code>register()</code>方法对第三个参数的引用，也属于弱引用。如果没有这个参数，则回调函数无法取消。</p> <p>由于回调函数被调用以后，就不再存在于注册表之中了，所以执行<code>unregister()</code>应该是在回调函数还没被调用之前。</p> <p>下面使用<code>FinalizationRegistry</code>，对前一节的缓存函数进行增强。</p> <div class="language- line-numbers-mode"><pre class="language-text"><code>function makeWeakCached(f) {
  const cache = new Map();
  const cleanup = new FinalizationRegistry(key =&gt; {
    const ref = cache.get(key);
    if (ref &amp;&amp; !ref.deref()) cache.delete(key);
  });

  return key =&gt; {
    const ref = cache.get(key);
    if (ref) {
      const cached = ref.deref();
      if (cached !== undefined) return cached;
    }

    const fresh = f(key);
    cache.set(key, new WeakRef(fresh));
    cleanup.register(fresh, key);
    return fresh;
  };
}

const getImageCached = makeWeakCached(getImage);
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><p>上面示例与前一节的例子相比，就是增加一个清理器注册表，一旦缓存的原始对象被垃圾回收机制清除，会自动执行一个回调函数。该回调函数会清除缓存里面已经失效的键。</p> <p>下面是另一个例子。</p> <div class="language- line-numbers-mode"><pre class="language-text"><code>class Thingy {
  #file;
  #cleanup = file =&gt; {
    console.error(
      `The \`release\` method was never called for the \`Thingy\` for the file &quot;${file.name}&quot;`
    );
  };
  #registry = new FinalizationRegistry(this.#cleanup);

  constructor(filename) {
    this.#file = File.open(filename);
    this.#registry.register(this, this.#file, this.#file);
  }

  release() {
    if (this.#file) {
      this.#registry.unregister(this.#file);
      File.close(this.#file);
      this.#file = null;
    }
  }
}
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><p>上面示例中，如果由于某种原因，<code>Thingy</code>类的实例对象没有调用<code>release()</code>方法，就被垃圾回收机制清除了，那么清理器就会调用回调函数<code>#cleanup()</code>，输出一条错误信息。</p> <p>由于无法知道清理器何时会执行，所以最好避免使用它。另外，如果浏览器窗口关闭或者进程意外退出，清理器则不会运行。</p> <h3 id="留言"><a href="#留言" class="header-anchor">#</a> 留言</h3></div> <footer class="page-edit"><!----> <div class="last-updated"><span class="prefix">Last Updated:</span> <span class="time">7/29/2022, 7:39:19 AM</span></div></footer> <!----> </main></div><div class="global-ui"><!----></div></div>
    <script src="/langnang/assets/js/app.d31b4f67.js" defer></script><script src="/langnang/assets/js/3.4862c1a5.js" defer></script><script src="/langnang/assets/js/70.adb07203.js" defer></script>
  </body>
</html>
